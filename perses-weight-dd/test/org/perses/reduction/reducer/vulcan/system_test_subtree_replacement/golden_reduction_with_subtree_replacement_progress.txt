=====================Reduction starts.======================

The initial program size is 14
------------------------------------------------------------


=Fixpoint iteration 1. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=4,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=5,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=67,slot_type=declarationSpecifiers}
        |       |___Token:int {id=71,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=58,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=66,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=60,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=62,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=63,slot_type=LeftParen}
        |           |___Token:) {id=65,slot_type=RightParen}
        |___compoundStatement {id=7,slot_type=compoundStatement}
            |___Token:{ {id=8,slot_type=LeftBrace}
            |___(?) {id=9,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=12,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=15,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19,slot_type=Return}
            |           |   |___(?) {id=20,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=32,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=46,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_9 {id=49,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_9]}
            |           |           |   |   |___Token:sizeof {id=50,slot_type=Sizeof}
            |           |           |   |   |___Token:( {id=51,slot_type=LeftParen}
            |           |           |   |   |___Token:char {id=57,slot_type=[typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Char]}
            |           |           |   |___Token:) {id=48,slot_type=RightParen}
            |           |           |___(*) {id=34,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=35,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=43,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=42,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=17,slot_type=Semi}
            |___Token:} {id=10,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 4, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4
------------------------------------------------------------


==================Reducing node 7, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 7
------------------------------------------------------------


==================Reducing node 9, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


=================Reducing node 12, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 12
------------------------------------------------------------


=================Reducing node 15, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main() {
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main() {
                               ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 15
------------------------------------------------------------


=================Reducing node 18, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main() {
        return                 ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18
------------------------------------------------------------


=================Reducing node 20, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int main() {
        return                 ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20
------------------------------------------------------------


=================Reducing node 32, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main() {
        return                 ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main() {
        return                1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main() {
        return sizeof(char)    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 32
------------------------------------------------------------


=================Reducing node 46, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 46
------------------------------------------------------------


=================Reducing node 58, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main   {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 58
------------------------------------------------------------


=================Reducing node 49, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 49
------------------------------------------------------------


=================Reducing node 60, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int main   {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 60
------------------------------------------------------------


=================Reducing node 62, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main   {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 62
------------------------------------------------------------


=================Reducing node 34, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    int main() {
        return sizeof(char)    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 34
------------------------------------------------------------


=================Reducing node 35, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main() {
        return sizeof(char)    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 35
------------------------------------------------------------


=================Reducing node 66, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 66
------------------------------------------------------------


=================Reducing node 65, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 65
------------------------------------------------------------


=================Reducing node 63, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 63
------------------------------------------------------------


=================Reducing node 57, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 57
------------------------------------------------------------


=================Reducing node 51, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 51
------------------------------------------------------------


=================Reducing node 50, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 50
------------------------------------------------------------


=================Reducing node 48, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 48
------------------------------------------------------------


=================Reducing node 43, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 43
------------------------------------------------------------


=================Reducing node 42, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 42
------------------------------------------------------------


=================Reducing node 19, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19
------------------------------------------------------------


=================Reducing node 17, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17
------------------------------------------------------------


=================Reducing node 10, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


==================Reducing node 8, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


==================Reducing node 5, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


=================Reducing node 67, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 67
------------------------------------------------------------


=================Reducing node 71, size=14==================

The current best program is the following

    int main() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 71
------------------------------------------------------------


======Fixpoint iteration 2. Reducer: subtree_replacer=======

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=4,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=5,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=67,slot_type=declarationSpecifiers}
        |       |___Token:int {id=71,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=58,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=66,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=60,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=62,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=63,slot_type=LeftParen}
        |           |___Token:) {id=65,slot_type=RightParen}
        |___compoundStatement {id=7,slot_type=compoundStatement}
            |___Token:{ {id=8,slot_type=LeftBrace}
            |___(?) {id=9,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=12,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=15,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19,slot_type=Return}
            |           |   |___(?) {id=20,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=32,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=46,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_9 {id=49,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_9]}
            |           |           |   |   |___Token:sizeof {id=50,slot_type=Sizeof}
            |           |           |   |   |___Token:( {id=51,slot_type=LeftParen}
            |           |           |   |   |___Token:char {id=57,slot_type=[typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Char]}
            |           |           |   |___Token:) {id=48,slot_type=RightParen}
            |           |           |___(*) {id=34,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=35,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=43,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=42,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=17,slot_type=Semi}
            |___Token:} {id=10,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    main{}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedef;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedef main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    automain() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    voidmain() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    charmain() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    longmain() {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 3. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=17716}
|___(+) {id=17717,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=17719,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=17720,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=17782,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=17786,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=17773,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=17781,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=17775,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=17777,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=17778,slot_type=LeftParen}
        |           |___Token:) {id=17780,slot_type=RightParen}
        |___compoundStatement {id=17722,slot_type=compoundStatement}
            |___Token:{ {id=17723,slot_type=LeftBrace}
            |___(?) {id=17724,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=17727,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=17730,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=17733,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=17734,slot_type=Return}
            |           |   |___(?) {id=17735,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=17747,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=17761,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_9 {id=17764,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_9]}
            |           |           |   |   |___Token:sizeof {id=17765,slot_type=Sizeof}
            |           |           |   |   |___Token:( {id=17766,slot_type=LeftParen}
            |           |           |   |   |___Token:char {id=17772,slot_type=[typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Char]}
            |           |           |   |___Token:) {id=17763,slot_type=RightParen}
            |           |           |___(*) {id=17749,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=17750,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=17758,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=17757,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=17732,slot_type=Semi}
            |___Token:} {id=17725,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 17717, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17717
------------------------------------------------------------


================Reducing node 17719, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17719
------------------------------------------------------------


================Reducing node 17722, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17722
------------------------------------------------------------


================Reducing node 17724, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17724
------------------------------------------------------------


================Reducing node 17727, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17727
------------------------------------------------------------


================Reducing node 17730, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                               ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17730
------------------------------------------------------------


================Reducing node 17733, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                 ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17733
------------------------------------------------------------


================Reducing node 17735, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                 ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17735
------------------------------------------------------------


================Reducing node 17747, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                 ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return sizeof(char)    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17747
------------------------------------------------------------


================Reducing node 17761, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17761
------------------------------------------------------------


================Reducing node 17773, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17773
------------------------------------------------------------


================Reducing node 17764, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17764
------------------------------------------------------------


================Reducing node 17775, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17775
------------------------------------------------------------


================Reducing node 17777, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17777
------------------------------------------------------------


================Reducing node 17749, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    signed main(){
        return sizeof(char)    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17749
------------------------------------------------------------


================Reducing node 17750, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return sizeof(char)    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17750
------------------------------------------------------------


================Reducing node 17781, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17781
------------------------------------------------------------


================Reducing node 17780, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17780
------------------------------------------------------------


================Reducing node 17778, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17778
------------------------------------------------------------


================Reducing node 17772, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17772
------------------------------------------------------------


================Reducing node 17766, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17766
------------------------------------------------------------


================Reducing node 17765, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17765
------------------------------------------------------------


================Reducing node 17763, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17763
------------------------------------------------------------


================Reducing node 17758, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17758
------------------------------------------------------------


================Reducing node 17757, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17757
------------------------------------------------------------


================Reducing node 17734, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17734
------------------------------------------------------------


================Reducing node 17732, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17732
------------------------------------------------------------


================Reducing node 17725, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17725
------------------------------------------------------------


================Reducing node 17723, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17723
------------------------------------------------------------


================Reducing node 17720, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17720
------------------------------------------------------------


================Reducing node 17782, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17782
------------------------------------------------------------


================Reducing node 17786, size=14================

The current best program is the following

    signed main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17786
------------------------------------------------------------


======Fixpoint iteration 4. Reducer: subtree_replacer=======

The spar-tree is the following.
translationUnit {id=17716}
|___(+) {id=17717,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=17719,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=17720,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=17782,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=17786,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=17773,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=17781,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=17775,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=17777,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=17778,slot_type=LeftParen}
        |           |___Token:) {id=17780,slot_type=RightParen}
        |___compoundStatement {id=17722,slot_type=compoundStatement}
            |___Token:{ {id=17723,slot_type=LeftBrace}
            |___(?) {id=17724,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=17727,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=17730,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=17733,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=17734,slot_type=Return}
            |           |   |___(?) {id=17735,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=17747,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=17761,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_9 {id=17764,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_9]}
            |           |           |   |   |___Token:sizeof {id=17765,slot_type=Sizeof}
            |           |           |   |   |___Token:( {id=17766,slot_type=LeftParen}
            |           |           |   |   |___Token:char {id=17772,slot_type=[typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Char]}
            |           |           |   |___Token:) {id=17763,slot_type=RightParen}
            |           |           |___(*) {id=17749,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=17750,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=17758,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=17757,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=17732,slot_type=Semi}
            |___Token:} {id=17725,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main[]{
        return sizeof(char) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
    typedef;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
    {}
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
    continue;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
    asm();
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
    break                      ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
    return                     ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 5. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=17858}
|___(+) {id=17859,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=17861,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=17862,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=17924,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=17928,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=17915,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=17923,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=17917,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=17919,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=17920,slot_type=LeftParen}
        |           |___Token:) {id=17922,slot_type=RightParen}
        |___compoundStatement {id=17864,slot_type=compoundStatement}
            |___Token:{ {id=17865,slot_type=LeftBrace}
            |___(?) {id=17866,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=17869,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=17872,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=17875,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=17876,slot_type=Return}
            |           |   |___(?) {id=17877,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=17889,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=17903,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_9 {id=17906,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_9]}
            |           |           |   |   |___Token:sizeof {id=17907,slot_type=Sizeof}
            |           |           |   |   |___Token:( {id=17908,slot_type=LeftParen}
            |           |           |   |   |___Token:void {id=17914,slot_type=[typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Void]}
            |           |           |   |___Token:) {id=17905,slot_type=RightParen}
            |           |           |___(*) {id=17891,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=17892,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=17900,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=17899,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=17874,slot_type=Semi}
            |___Token:} {id=17867,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 17859, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17859
------------------------------------------------------------


================Reducing node 17861, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17861
------------------------------------------------------------


================Reducing node 17864, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17864
------------------------------------------------------------


================Reducing node 17866, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17866
------------------------------------------------------------


================Reducing node 17869, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17869
------------------------------------------------------------


================Reducing node 17872, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                               ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17872
------------------------------------------------------------


================Reducing node 17875, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                 ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17875
------------------------------------------------------------


================Reducing node 17877, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                 ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17877
------------------------------------------------------------


================Reducing node 17889, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                 ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return sizeof(void)    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17889
------------------------------------------------------------


================Reducing node 17903, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17903
------------------------------------------------------------


================Reducing node 17915, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17915
------------------------------------------------------------


================Reducing node 17906, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17906
------------------------------------------------------------


================Reducing node 17917, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17917
------------------------------------------------------------


================Reducing node 17919, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17919
------------------------------------------------------------


================Reducing node 17891, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    signed main(){
        return sizeof(void)    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17891
------------------------------------------------------------


================Reducing node 17892, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return sizeof(void)    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17892
------------------------------------------------------------


================Reducing node 17923, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17923
------------------------------------------------------------


================Reducing node 17922, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17922
------------------------------------------------------------


================Reducing node 17920, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17920
------------------------------------------------------------


================Reducing node 17914, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17914
------------------------------------------------------------


================Reducing node 17908, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17908
------------------------------------------------------------


================Reducing node 17907, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17907
------------------------------------------------------------


================Reducing node 17905, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17905
------------------------------------------------------------


================Reducing node 17900, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17900
------------------------------------------------------------


================Reducing node 17899, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17899
------------------------------------------------------------


================Reducing node 17876, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17876
------------------------------------------------------------


================Reducing node 17874, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17874
------------------------------------------------------------


================Reducing node 17867, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17867
------------------------------------------------------------


================Reducing node 17865, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17865
------------------------------------------------------------


================Reducing node 17862, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17862
------------------------------------------------------------


================Reducing node 17924, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17924
------------------------------------------------------------


================Reducing node 17928, size=14================

The current best program is the following

    signed main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17928
------------------------------------------------------------


======Fixpoint iteration 6. Reducer: subtree_replacer=======

The spar-tree is the following.
translationUnit {id=17858}
|___(+) {id=17859,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=17861,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=17862,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=17924,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=17928,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=17915,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=17923,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=17917,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=17919,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=17920,slot_type=LeftParen}
        |           |___Token:) {id=17922,slot_type=RightParen}
        |___compoundStatement {id=17864,slot_type=compoundStatement}
            |___Token:{ {id=17865,slot_type=LeftBrace}
            |___(?) {id=17866,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=17869,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=17872,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=17875,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=17876,slot_type=Return}
            |           |   |___(?) {id=17877,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=17889,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=17903,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_9 {id=17906,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_9]}
            |           |           |   |   |___Token:sizeof {id=17907,slot_type=Sizeof}
            |           |           |   |   |___Token:( {id=17908,slot_type=LeftParen}
            |           |           |   |   |___Token:void {id=17914,slot_type=[typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Void]}
            |           |           |   |___Token:) {id=17905,slot_type=RightParen}
            |           |           |___(*) {id=17891,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=17892,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=17900,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=17899,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=17874,slot_type=Semi}
            |___Token:} {id=17867,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 7. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=17952}
|___(+) {id=17953,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=17955,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=17956,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18018,slot_type=declarationSpecifiers}
        |       |___Token:int {id=18022,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=18009,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18017,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18011,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18013,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18014,slot_type=LeftParen}
        |           |___Token:) {id=18016,slot_type=RightParen}
        |___compoundStatement {id=17958,slot_type=compoundStatement}
            |___Token:{ {id=17959,slot_type=LeftBrace}
            |___(?) {id=17960,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=17963,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=17966,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=17969,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=17970,slot_type=Return}
            |           |   |___(?) {id=17971,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=17983,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=17997,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_9 {id=18000,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_9]}
            |           |           |   |   |___Token:sizeof {id=18001,slot_type=Sizeof}
            |           |           |   |   |___Token:( {id=18002,slot_type=LeftParen}
            |           |           |   |   |___Token:void {id=18008,slot_type=[typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Void]}
            |           |           |   |___Token:) {id=17999,slot_type=RightParen}
            |           |           |___(*) {id=17985,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=17986,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=17994,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=17993,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=17968,slot_type=Semi}
            |___Token:} {id=17961,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 17953, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17953
------------------------------------------------------------


================Reducing node 17955, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17955
------------------------------------------------------------


================Reducing node 17958, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17958
------------------------------------------------------------


================Reducing node 17960, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17960
------------------------------------------------------------


================Reducing node 17963, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17963
------------------------------------------------------------


================Reducing node 17966, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                               ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17966
------------------------------------------------------------


================Reducing node 17969, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                 ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17969
------------------------------------------------------------


================Reducing node 17971, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                 ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17971
------------------------------------------------------------


================Reducing node 17983, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                 ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return sizeof(void)    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17983
------------------------------------------------------------


================Reducing node 17997, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17997
------------------------------------------------------------


================Reducing node 18009, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18009
------------------------------------------------------------


================Reducing node 18000, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18000
------------------------------------------------------------


================Reducing node 18011, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18011
------------------------------------------------------------


================Reducing node 18013, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18013
------------------------------------------------------------


================Reducing node 17985, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    int    main(){
        return sizeof(void)    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17985
------------------------------------------------------------


================Reducing node 17986, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return sizeof(void)    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17986
------------------------------------------------------------


================Reducing node 18017, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18017
------------------------------------------------------------


================Reducing node 18016, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18016
------------------------------------------------------------


================Reducing node 18014, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18014
------------------------------------------------------------


================Reducing node 18008, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18008
------------------------------------------------------------


================Reducing node 18002, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18002
------------------------------------------------------------


================Reducing node 18001, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18001
------------------------------------------------------------


================Reducing node 17999, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17999
------------------------------------------------------------


================Reducing node 17994, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17994
------------------------------------------------------------


================Reducing node 17993, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17993
------------------------------------------------------------


================Reducing node 17970, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17970
------------------------------------------------------------


================Reducing node 17968, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17968
------------------------------------------------------------


================Reducing node 17961, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17961
------------------------------------------------------------


================Reducing node 17959, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17959
------------------------------------------------------------


================Reducing node 17956, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17956
------------------------------------------------------------


================Reducing node 18018, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18018
------------------------------------------------------------


================Reducing node 18022, size=14================

The current best program is the following

    int    main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18022
------------------------------------------------------------


======Fixpoint iteration 8. Reducer: subtree_replacer=======

The spar-tree is the following.
translationUnit {id=17952}
|___(+) {id=17953,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=17955,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=17956,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18018,slot_type=declarationSpecifiers}
        |       |___Token:int {id=18022,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=18009,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18017,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18011,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18013,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18014,slot_type=LeftParen}
        |           |___Token:) {id=18016,slot_type=RightParen}
        |___compoundStatement {id=17958,slot_type=compoundStatement}
            |___Token:{ {id=17959,slot_type=LeftBrace}
            |___(?) {id=17960,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=17963,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=17966,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=17969,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=17970,slot_type=Return}
            |           |   |___(?) {id=17971,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=17983,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=17997,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_9 {id=18000,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_9]}
            |           |           |   |   |___Token:sizeof {id=18001,slot_type=Sizeof}
            |           |           |   |   |___Token:( {id=18002,slot_type=LeftParen}
            |           |           |   |   |___Token:void {id=18008,slot_type=[typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Void]}
            |           |           |   |___Token:) {id=17999,slot_type=RightParen}
            |           |           |___(*) {id=17985,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=17986,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=17994,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=17993,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=17968,slot_type=Semi}
            |___Token:} {id=17961,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main[]{
        return sizeof(void) + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
    typedef;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
    {}
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
    continue;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
    asm();
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
    break                      ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
    return                     ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 9. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=18100}
|___(+) {id=18101,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18103,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18104,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18168,slot_type=declarationSpecifiers}
        |       |___Token:int {id=18172,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=18159,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18167,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18161,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18163,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18164,slot_type=LeftParen}
        |           |___Token:) {id=18166,slot_type=RightParen}
        |___compoundStatement {id=18106,slot_type=compoundStatement}
            |___Token:{ {id=18107,slot_type=LeftBrace}
            |___(?) {id=18108,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18111,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18114,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18117,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18118,slot_type=Return}
            |           |   |___(?) {id=18119,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18131,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18145,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18148,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:_Alignof {id=18158,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |   |___Token:( {id=18150,slot_type=LeftParen}
            |           |           |   |   |___Token:void {id=18157,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Void]}
            |           |           |   |___Token:) {id=18147,slot_type=RightParen}
            |           |           |___(*) {id=18133,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18134,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18142,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18141,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18116,slot_type=Semi}
            |___Token:} {id=18109,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 18101, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18101
------------------------------------------------------------


================Reducing node 18103, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18103
------------------------------------------------------------


================Reducing node 18106, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18106
------------------------------------------------------------


================Reducing node 18108, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18108
------------------------------------------------------------


================Reducing node 18111, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18111
------------------------------------------------------------


================Reducing node 18114, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                               ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18114
------------------------------------------------------------


================Reducing node 18117, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                 ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18117
------------------------------------------------------------


================Reducing node 18119, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                 ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18119
------------------------------------------------------------


================Reducing node 18131, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                 ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return _Alignof(void)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18131
------------------------------------------------------------


================Reducing node 18145, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18145
------------------------------------------------------------


================Reducing node 18159, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18159
------------------------------------------------------------


================Reducing node 18148, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18148
------------------------------------------------------------


================Reducing node 18161, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18161
------------------------------------------------------------


================Reducing node 18163, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18163
------------------------------------------------------------


================Reducing node 18133, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    int    main(){
        return _Alignof(void)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18133
------------------------------------------------------------


================Reducing node 18134, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return _Alignof(void)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18134
------------------------------------------------------------


================Reducing node 18167, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18167
------------------------------------------------------------


================Reducing node 18166, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18166
------------------------------------------------------------


================Reducing node 18164, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18164
------------------------------------------------------------


================Reducing node 18158, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18158
------------------------------------------------------------


================Reducing node 18157, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18157
------------------------------------------------------------


================Reducing node 18150, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18150
------------------------------------------------------------


================Reducing node 18147, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18147
------------------------------------------------------------


================Reducing node 18142, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18142
------------------------------------------------------------


================Reducing node 18141, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18141
------------------------------------------------------------


================Reducing node 18118, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18118
------------------------------------------------------------


================Reducing node 18116, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18116
------------------------------------------------------------


================Reducing node 18109, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18109
------------------------------------------------------------


================Reducing node 18107, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18107
------------------------------------------------------------


================Reducing node 18104, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18104
------------------------------------------------------------


================Reducing node 18168, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18168
------------------------------------------------------------


================Reducing node 18172, size=14================

The current best program is the following

    int    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18172
------------------------------------------------------------


======Fixpoint iteration 10. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=18100}
|___(+) {id=18101,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18103,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18104,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18168,slot_type=declarationSpecifiers}
        |       |___Token:int {id=18172,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=18159,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18167,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18161,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18163,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18164,slot_type=LeftParen}
        |           |___Token:) {id=18166,slot_type=RightParen}
        |___compoundStatement {id=18106,slot_type=compoundStatement}
            |___Token:{ {id=18107,slot_type=LeftBrace}
            |___(?) {id=18108,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18111,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18114,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18117,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18118,slot_type=Return}
            |           |   |___(?) {id=18119,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18131,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18145,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18148,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:_Alignof {id=18158,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |   |___Token:( {id=18150,slot_type=LeftParen}
            |           |           |   |   |___Token:void {id=18157,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Void]}
            |           |           |   |___Token:) {id=18147,slot_type=RightParen}
            |           |           |___(*) {id=18133,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18134,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18142,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18141,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18116,slot_type=Semi}
            |___Token:} {id=18109,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 11. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=18200}
|___(+) {id=18201,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18203,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18204,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18268,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=18272,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=18259,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18267,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18261,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18263,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18264,slot_type=LeftParen}
        |           |___Token:) {id=18266,slot_type=RightParen}
        |___compoundStatement {id=18206,slot_type=compoundStatement}
            |___Token:{ {id=18207,slot_type=LeftBrace}
            |___(?) {id=18208,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18211,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18214,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18217,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18218,slot_type=Return}
            |           |   |___(?) {id=18219,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18231,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18245,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18248,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:_Alignof {id=18258,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |   |___Token:( {id=18250,slot_type=LeftParen}
            |           |           |   |   |___Token:void {id=18257,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Void]}
            |           |           |   |___Token:) {id=18247,slot_type=RightParen}
            |           |           |___(*) {id=18233,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18234,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18242,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18241,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18216,slot_type=Semi}
            |___Token:} {id=18209,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 18201, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18201
------------------------------------------------------------


================Reducing node 18203, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18203
------------------------------------------------------------


================Reducing node 18206, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18206
------------------------------------------------------------


================Reducing node 18208, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18208
------------------------------------------------------------


================Reducing node 18211, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18211
------------------------------------------------------------


================Reducing node 18214, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                               ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18214
------------------------------------------------------------


================Reducing node 18217, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                 ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18217
------------------------------------------------------------


================Reducing node 18219, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                 ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18219
------------------------------------------------------------


================Reducing node 18231, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                 ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return _Alignof(void)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18231
------------------------------------------------------------


================Reducing node 18245, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18245
------------------------------------------------------------


================Reducing node 18259, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18259
------------------------------------------------------------


================Reducing node 18248, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18248
------------------------------------------------------------


================Reducing node 18261, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18261
------------------------------------------------------------


================Reducing node 18263, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18263
------------------------------------------------------------


================Reducing node 18233, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    signed main(){
        return _Alignof(void)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18233
------------------------------------------------------------


================Reducing node 18234, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return _Alignof(void)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18234
------------------------------------------------------------


================Reducing node 18267, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18267
------------------------------------------------------------


================Reducing node 18266, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18266
------------------------------------------------------------


================Reducing node 18264, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18264
------------------------------------------------------------


================Reducing node 18258, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18258
------------------------------------------------------------


================Reducing node 18257, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18257
------------------------------------------------------------


================Reducing node 18250, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18250
------------------------------------------------------------


================Reducing node 18247, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18247
------------------------------------------------------------


================Reducing node 18242, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18242
------------------------------------------------------------


================Reducing node 18241, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18241
------------------------------------------------------------


================Reducing node 18218, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18218
------------------------------------------------------------


================Reducing node 18216, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18216
------------------------------------------------------------


================Reducing node 18209, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18209
------------------------------------------------------------


================Reducing node 18207, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18207
------------------------------------------------------------


================Reducing node 18204, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18204
------------------------------------------------------------


================Reducing node 18268, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18268
------------------------------------------------------------


================Reducing node 18272, size=14================

The current best program is the following

    signed main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18272
------------------------------------------------------------


======Fixpoint iteration 12. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=18200}
|___(+) {id=18201,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18203,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18204,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18268,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=18272,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=18259,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18267,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18261,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18263,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18264,slot_type=LeftParen}
        |           |___Token:) {id=18266,slot_type=RightParen}
        |___compoundStatement {id=18206,slot_type=compoundStatement}
            |___Token:{ {id=18207,slot_type=LeftBrace}
            |___(?) {id=18208,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18211,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18214,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18217,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18218,slot_type=Return}
            |           |   |___(?) {id=18219,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18231,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18245,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18248,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:_Alignof {id=18258,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |   |___Token:( {id=18250,slot_type=LeftParen}
            |           |           |   |   |___Token:void {id=18257,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Void]}
            |           |           |   |___Token:) {id=18247,slot_type=RightParen}
            |           |           |___(*) {id=18233,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18234,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18242,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18241,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18216,slot_type=Semi}
            |___Token:} {id=18209,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main[]{
        return _Alignof(void)+1;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 13. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=18352}
|___(+) {id=18353,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18355,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18356,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18420,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=18424,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=18411,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18419,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18413,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18415,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18416,slot_type=LeftParen}
        |           |___Token:) {id=18418,slot_type=RightParen}
        |___compoundStatement {id=18358,slot_type=compoundStatement}
            |___Token:{ {id=18359,slot_type=LeftBrace}
            |___(?) {id=18360,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18363,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18366,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18369,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18370,slot_type=Return}
            |           |   |___(?) {id=18371,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18383,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18397,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18400,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:__alignof__ {id=18410,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |   |___Token:( {id=18402,slot_type=LeftParen}
            |           |           |   |   |___Token:void {id=18409,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Void]}
            |           |           |   |___Token:) {id=18399,slot_type=RightParen}
            |           |           |___(*) {id=18385,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18386,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18394,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18393,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18368,slot_type=Semi}
            |___Token:} {id=18361,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 18353, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18353
------------------------------------------------------------


================Reducing node 18355, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18355
------------------------------------------------------------


================Reducing node 18358, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18358
------------------------------------------------------------


================Reducing node 18360, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18360
------------------------------------------------------------


================Reducing node 18363, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18363
------------------------------------------------------------


================Reducing node 18366, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                                  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18366
------------------------------------------------------------


================Reducing node 18369, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18369
------------------------------------------------------------


================Reducing node 18371, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18371
------------------------------------------------------------


================Reducing node 18383, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                   1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return __alignof__(void)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18383
------------------------------------------------------------


================Reducing node 18397, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18397
------------------------------------------------------------


================Reducing node 18411, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18411
------------------------------------------------------------


================Reducing node 18400, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18400
------------------------------------------------------------


================Reducing node 18413, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18413
------------------------------------------------------------


================Reducing node 18415, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18415
------------------------------------------------------------


================Reducing node 18385, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    signed main(){
        return __alignof__(void)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18385
------------------------------------------------------------


================Reducing node 18386, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return __alignof__(void)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18386
------------------------------------------------------------


================Reducing node 18419, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18419
------------------------------------------------------------


================Reducing node 18418, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18418
------------------------------------------------------------


================Reducing node 18416, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18416
------------------------------------------------------------


================Reducing node 18410, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18410
------------------------------------------------------------


================Reducing node 18409, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18409
------------------------------------------------------------


================Reducing node 18402, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18402
------------------------------------------------------------


================Reducing node 18399, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18399
------------------------------------------------------------


================Reducing node 18394, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18394
------------------------------------------------------------


================Reducing node 18393, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18393
------------------------------------------------------------


================Reducing node 18370, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18370
------------------------------------------------------------


================Reducing node 18368, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18368
------------------------------------------------------------


================Reducing node 18361, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18361
------------------------------------------------------------


================Reducing node 18359, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18359
------------------------------------------------------------


================Reducing node 18356, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18356
------------------------------------------------------------


================Reducing node 18420, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18420
------------------------------------------------------------


================Reducing node 18424, size=14================

The current best program is the following

    signed main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18424
------------------------------------------------------------


======Fixpoint iteration 14. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=18352}
|___(+) {id=18353,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18355,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18356,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18420,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=18424,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=18411,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18419,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18413,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18415,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18416,slot_type=LeftParen}
        |           |___Token:) {id=18418,slot_type=RightParen}
        |___compoundStatement {id=18358,slot_type=compoundStatement}
            |___Token:{ {id=18359,slot_type=LeftBrace}
            |___(?) {id=18360,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18363,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18366,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18369,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18370,slot_type=Return}
            |           |   |___(?) {id=18371,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18383,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18397,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18400,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:__alignof__ {id=18410,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |   |___Token:( {id=18402,slot_type=LeftParen}
            |           |           |   |   |___Token:void {id=18409,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Void]}
            |           |           |   |___Token:) {id=18399,slot_type=RightParen}
            |           |           |___(*) {id=18385,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18386,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18394,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18393,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18368,slot_type=Semi}
            |___Token:} {id=18361,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 15. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=18448}
|___(+) {id=18449,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18451,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18452,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18516,slot_type=declarationSpecifiers}
        |       |___Token:int {id=18520,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=18507,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18515,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18509,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18511,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18512,slot_type=LeftParen}
        |           |___Token:) {id=18514,slot_type=RightParen}
        |___compoundStatement {id=18454,slot_type=compoundStatement}
            |___Token:{ {id=18455,slot_type=LeftBrace}
            |___(?) {id=18456,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18459,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18462,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18465,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18466,slot_type=Return}
            |           |   |___(?) {id=18467,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18479,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18493,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18496,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:__alignof__ {id=18506,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |   |___Token:( {id=18498,slot_type=LeftParen}
            |           |           |   |   |___Token:void {id=18505,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Void]}
            |           |           |   |___Token:) {id=18495,slot_type=RightParen}
            |           |           |___(*) {id=18481,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18482,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18490,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18489,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18464,slot_type=Semi}
            |___Token:} {id=18457,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 18449, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18449
------------------------------------------------------------


================Reducing node 18451, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18451
------------------------------------------------------------


================Reducing node 18454, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18454
------------------------------------------------------------


================Reducing node 18456, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18456
------------------------------------------------------------


================Reducing node 18459, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18459
------------------------------------------------------------


================Reducing node 18462, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                                  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18462
------------------------------------------------------------


================Reducing node 18465, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18465
------------------------------------------------------------


================Reducing node 18467, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18467
------------------------------------------------------------


================Reducing node 18479, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                   1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return __alignof__(void)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18479
------------------------------------------------------------


================Reducing node 18493, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18493
------------------------------------------------------------


================Reducing node 18507, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18507
------------------------------------------------------------


================Reducing node 18496, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18496
------------------------------------------------------------


================Reducing node 18509, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18509
------------------------------------------------------------


================Reducing node 18511, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18511
------------------------------------------------------------


================Reducing node 18481, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    int    main(){
        return __alignof__(void)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18481
------------------------------------------------------------


================Reducing node 18482, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return __alignof__(void)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18482
------------------------------------------------------------


================Reducing node 18515, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18515
------------------------------------------------------------


================Reducing node 18514, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18514
------------------------------------------------------------


================Reducing node 18512, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18512
------------------------------------------------------------


================Reducing node 18506, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18506
------------------------------------------------------------


================Reducing node 18505, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18505
------------------------------------------------------------


================Reducing node 18498, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18498
------------------------------------------------------------


================Reducing node 18495, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18495
------------------------------------------------------------


================Reducing node 18490, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18490
------------------------------------------------------------


================Reducing node 18489, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18489
------------------------------------------------------------


================Reducing node 18466, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18466
------------------------------------------------------------


================Reducing node 18464, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18464
------------------------------------------------------------


================Reducing node 18457, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18457
------------------------------------------------------------


================Reducing node 18455, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18455
------------------------------------------------------------


================Reducing node 18452, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18452
------------------------------------------------------------


================Reducing node 18516, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18516
------------------------------------------------------------


================Reducing node 18520, size=14================

The current best program is the following

    int    main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18520
------------------------------------------------------------


======Fixpoint iteration 16. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=18448}
|___(+) {id=18449,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18451,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18452,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18516,slot_type=declarationSpecifiers}
        |       |___Token:int {id=18520,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=18507,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18515,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18509,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18511,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18512,slot_type=LeftParen}
        |           |___Token:) {id=18514,slot_type=RightParen}
        |___compoundStatement {id=18454,slot_type=compoundStatement}
            |___Token:{ {id=18455,slot_type=LeftBrace}
            |___(?) {id=18456,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18459,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18462,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18465,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18466,slot_type=Return}
            |           |   |___(?) {id=18467,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18479,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18493,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18496,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:__alignof__ {id=18506,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |   |___Token:( {id=18498,slot_type=LeftParen}
            |           |           |   |   |___Token:void {id=18505,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Void]}
            |           |           |   |___Token:) {id=18495,slot_type=RightParen}
            |           |           |___(*) {id=18481,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18482,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18490,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18489,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18464,slot_type=Semi}
            |___Token:} {id=18457,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main[]{
        return __alignof__(void)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return __alignof__(const)+1;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 17. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=18605}
|___(+) {id=18606,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18608,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18609,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18673,slot_type=declarationSpecifiers}
        |       |___Token:int {id=18677,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=18664,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18672,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18666,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18668,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18669,slot_type=LeftParen}
        |           |___Token:) {id=18671,slot_type=RightParen}
        |___compoundStatement {id=18611,slot_type=compoundStatement}
            |___Token:{ {id=18612,slot_type=LeftBrace}
            |___(?) {id=18613,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18616,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18619,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18622,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18623,slot_type=Return}
            |           |   |___(?) {id=18624,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18636,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18650,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18653,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:__alignof__ {id=18663,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |   |___Token:( {id=18655,slot_type=LeftParen}
            |           |           |   |   |___Token:char {id=18662,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Char]}
            |           |           |   |___Token:) {id=18652,slot_type=RightParen}
            |           |           |___(*) {id=18638,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18639,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18647,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18646,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18621,slot_type=Semi}
            |___Token:} {id=18614,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 18606, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18606
------------------------------------------------------------


================Reducing node 18608, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18608
------------------------------------------------------------


================Reducing node 18611, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18611
------------------------------------------------------------


================Reducing node 18613, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18613
------------------------------------------------------------


================Reducing node 18616, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18616
------------------------------------------------------------


================Reducing node 18619, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                                  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18619
------------------------------------------------------------


================Reducing node 18622, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18622
------------------------------------------------------------


================Reducing node 18624, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18624
------------------------------------------------------------


================Reducing node 18636, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                   1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return __alignof__(char)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18636
------------------------------------------------------------


================Reducing node 18650, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18650
------------------------------------------------------------


================Reducing node 18664, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18664
------------------------------------------------------------


================Reducing node 18653, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18653
------------------------------------------------------------


================Reducing node 18666, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18666
------------------------------------------------------------


================Reducing node 18668, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18668
------------------------------------------------------------


================Reducing node 18638, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    int    main(){
        return __alignof__(char)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18638
------------------------------------------------------------


================Reducing node 18639, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return __alignof__(char)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18639
------------------------------------------------------------


================Reducing node 18672, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18672
------------------------------------------------------------


================Reducing node 18671, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18671
------------------------------------------------------------


================Reducing node 18669, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18669
------------------------------------------------------------


================Reducing node 18663, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18663
------------------------------------------------------------


================Reducing node 18662, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18662
------------------------------------------------------------


================Reducing node 18655, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18655
------------------------------------------------------------


================Reducing node 18652, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18652
------------------------------------------------------------


================Reducing node 18647, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18647
------------------------------------------------------------


================Reducing node 18646, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18646
------------------------------------------------------------


================Reducing node 18623, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18623
------------------------------------------------------------


================Reducing node 18621, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18621
------------------------------------------------------------


================Reducing node 18614, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18614
------------------------------------------------------------


================Reducing node 18612, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18612
------------------------------------------------------------


================Reducing node 18609, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18609
------------------------------------------------------------


================Reducing node 18673, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18673
------------------------------------------------------------


================Reducing node 18677, size=14================

The current best program is the following

    int    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18677
------------------------------------------------------------


======Fixpoint iteration 18. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=18605}
|___(+) {id=18606,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18608,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18609,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18673,slot_type=declarationSpecifiers}
        |       |___Token:int {id=18677,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=18664,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18672,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18666,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18668,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18669,slot_type=LeftParen}
        |           |___Token:) {id=18671,slot_type=RightParen}
        |___compoundStatement {id=18611,slot_type=compoundStatement}
            |___Token:{ {id=18612,slot_type=LeftBrace}
            |___(?) {id=18613,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18616,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18619,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18622,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18623,slot_type=Return}
            |           |   |___(?) {id=18624,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18636,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18650,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18653,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:__alignof__ {id=18663,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |   |___Token:( {id=18655,slot_type=LeftParen}
            |           |           |   |   |___Token:char {id=18662,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Char]}
            |           |           |   |___Token:) {id=18652,slot_type=RightParen}
            |           |           |___(*) {id=18638,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18639,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18647,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18646,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18621,slot_type=Semi}
            |___Token:} {id=18614,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 19. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=18705}
|___(+) {id=18706,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18708,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18709,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18773,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=18777,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=18764,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18772,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18766,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18768,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18769,slot_type=LeftParen}
        |           |___Token:) {id=18771,slot_type=RightParen}
        |___compoundStatement {id=18711,slot_type=compoundStatement}
            |___Token:{ {id=18712,slot_type=LeftBrace}
            |___(?) {id=18713,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18716,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18719,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18722,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18723,slot_type=Return}
            |           |   |___(?) {id=18724,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18736,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18750,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18753,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:__alignof__ {id=18763,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |   |___Token:( {id=18755,slot_type=LeftParen}
            |           |           |   |   |___Token:char {id=18762,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Char]}
            |           |           |   |___Token:) {id=18752,slot_type=RightParen}
            |           |           |___(*) {id=18738,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18739,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18747,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18746,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18721,slot_type=Semi}
            |___Token:} {id=18714,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 18706, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18706
------------------------------------------------------------


================Reducing node 18708, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18708
------------------------------------------------------------


================Reducing node 18711, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18711
------------------------------------------------------------


================Reducing node 18713, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18713
------------------------------------------------------------


================Reducing node 18716, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18716
------------------------------------------------------------


================Reducing node 18719, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                                  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18719
------------------------------------------------------------


================Reducing node 18722, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18722
------------------------------------------------------------


================Reducing node 18724, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18724
------------------------------------------------------------


================Reducing node 18736, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                   1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return __alignof__(char)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18736
------------------------------------------------------------


================Reducing node 18750, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18750
------------------------------------------------------------


================Reducing node 18764, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18764
------------------------------------------------------------


================Reducing node 18753, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18753
------------------------------------------------------------


================Reducing node 18766, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18766
------------------------------------------------------------


================Reducing node 18768, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18768
------------------------------------------------------------


================Reducing node 18738, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    signed main(){
        return __alignof__(char)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18738
------------------------------------------------------------


================Reducing node 18739, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return __alignof__(char)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18739
------------------------------------------------------------


================Reducing node 18772, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18772
------------------------------------------------------------


================Reducing node 18771, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18771
------------------------------------------------------------


================Reducing node 18769, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18769
------------------------------------------------------------


================Reducing node 18763, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18763
------------------------------------------------------------


================Reducing node 18762, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18762
------------------------------------------------------------


================Reducing node 18755, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18755
------------------------------------------------------------


================Reducing node 18752, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18752
------------------------------------------------------------


================Reducing node 18747, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18747
------------------------------------------------------------


================Reducing node 18746, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18746
------------------------------------------------------------


================Reducing node 18723, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18723
------------------------------------------------------------


================Reducing node 18721, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18721
------------------------------------------------------------


================Reducing node 18714, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18714
------------------------------------------------------------


================Reducing node 18712, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18712
------------------------------------------------------------


================Reducing node 18709, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18709
------------------------------------------------------------


================Reducing node 18773, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18773
------------------------------------------------------------


================Reducing node 18777, size=14================

The current best program is the following

    signed main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18777
------------------------------------------------------------


======Fixpoint iteration 20. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=18705}
|___(+) {id=18706,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18708,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18709,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18773,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=18777,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=18764,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18772,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18766,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18768,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18769,slot_type=LeftParen}
        |           |___Token:) {id=18771,slot_type=RightParen}
        |___compoundStatement {id=18711,slot_type=compoundStatement}
            |___Token:{ {id=18712,slot_type=LeftBrace}
            |___(?) {id=18713,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18716,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18719,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18722,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18723,slot_type=Return}
            |           |   |___(?) {id=18724,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18736,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18750,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18753,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:__alignof__ {id=18763,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |   |___Token:( {id=18755,slot_type=LeftParen}
            |           |           |   |   |___Token:char {id=18762,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Char]}
            |           |           |   |___Token:) {id=18752,slot_type=RightParen}
            |           |           |___(*) {id=18738,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18739,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18747,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18746,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18721,slot_type=Semi}
            |___Token:} {id=18714,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main[]{
        return __alignof__(char)+1;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 21. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=18856}
|___(+) {id=18857,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18859,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18860,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18924,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=18928,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=18915,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18923,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18917,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18919,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18920,slot_type=LeftParen}
        |           |___Token:) {id=18922,slot_type=RightParen}
        |___compoundStatement {id=18862,slot_type=compoundStatement}
            |___Token:{ {id=18863,slot_type=LeftBrace}
            |___(?) {id=18864,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18867,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18870,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18873,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18874,slot_type=Return}
            |           |   |___(?) {id=18875,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18887,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18901,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18904,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:_Alignof {id=18914,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |   |___Token:( {id=18906,slot_type=LeftParen}
            |           |           |   |   |___Token:char {id=18913,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Char]}
            |           |           |   |___Token:) {id=18903,slot_type=RightParen}
            |           |           |___(*) {id=18889,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18890,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18898,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18897,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18872,slot_type=Semi}
            |___Token:} {id=18865,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 18857, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18857
------------------------------------------------------------


================Reducing node 18859, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18859
------------------------------------------------------------


================Reducing node 18862, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18862
------------------------------------------------------------


================Reducing node 18864, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18864
------------------------------------------------------------


================Reducing node 18867, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18867
------------------------------------------------------------


================Reducing node 18870, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                                  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18870
------------------------------------------------------------


================Reducing node 18873, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18873
------------------------------------------------------------


================Reducing node 18875, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18875
------------------------------------------------------------


================Reducing node 18887, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                   1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return _Alignof   (char)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18887
------------------------------------------------------------


================Reducing node 18901, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18901
------------------------------------------------------------


================Reducing node 18915, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18915
------------------------------------------------------------


================Reducing node 18904, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18904
------------------------------------------------------------


================Reducing node 18917, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18917
------------------------------------------------------------


================Reducing node 18919, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18919
------------------------------------------------------------


================Reducing node 18889, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    signed main(){
        return _Alignof   (char)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18889
------------------------------------------------------------


================Reducing node 18890, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return _Alignof   (char)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18890
------------------------------------------------------------


================Reducing node 18923, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18923
------------------------------------------------------------


================Reducing node 18922, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18922
------------------------------------------------------------


================Reducing node 18920, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18920
------------------------------------------------------------


================Reducing node 18914, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18914
------------------------------------------------------------


================Reducing node 18913, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18913
------------------------------------------------------------


================Reducing node 18906, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18906
------------------------------------------------------------


================Reducing node 18903, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18903
------------------------------------------------------------


================Reducing node 18898, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18898
------------------------------------------------------------


================Reducing node 18897, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18897
------------------------------------------------------------


================Reducing node 18874, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18874
------------------------------------------------------------


================Reducing node 18872, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18872
------------------------------------------------------------


================Reducing node 18865, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18865
------------------------------------------------------------


================Reducing node 18863, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18863
------------------------------------------------------------


================Reducing node 18860, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18860
------------------------------------------------------------


================Reducing node 18924, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18924
------------------------------------------------------------


================Reducing node 18928, size=14================

The current best program is the following

    signed main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18928
------------------------------------------------------------


======Fixpoint iteration 22. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=18856}
|___(+) {id=18857,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18859,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18860,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=18924,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=18928,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=18915,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=18923,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=18917,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=18919,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=18920,slot_type=LeftParen}
        |           |___Token:) {id=18922,slot_type=RightParen}
        |___compoundStatement {id=18862,slot_type=compoundStatement}
            |___Token:{ {id=18863,slot_type=LeftBrace}
            |___(?) {id=18864,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18867,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18870,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18873,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18874,slot_type=Return}
            |           |   |___(?) {id=18875,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18887,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18901,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=18904,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:_Alignof {id=18914,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |   |___Token:( {id=18906,slot_type=LeftParen}
            |           |           |   |   |___Token:char {id=18913,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Char]}
            |           |           |   |___Token:) {id=18903,slot_type=RightParen}
            |           |           |___(*) {id=18889,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18890,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18898,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18897,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18872,slot_type=Semi}
            |___Token:} {id=18865,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 23. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=18952}
|___(+) {id=18953,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18955,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18956,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19020,slot_type=declarationSpecifiers}
        |       |___Token:int {id=19024,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=19011,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19019,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19013,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19015,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19016,slot_type=LeftParen}
        |           |___Token:) {id=19018,slot_type=RightParen}
        |___compoundStatement {id=18958,slot_type=compoundStatement}
            |___Token:{ {id=18959,slot_type=LeftBrace}
            |___(?) {id=18960,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18963,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18966,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18969,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18970,slot_type=Return}
            |           |   |___(?) {id=18971,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18983,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18997,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=19000,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:_Alignof {id=19010,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |   |___Token:( {id=19002,slot_type=LeftParen}
            |           |           |   |   |___Token:char {id=19009,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Char]}
            |           |           |   |___Token:) {id=18999,slot_type=RightParen}
            |           |           |___(*) {id=18985,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18986,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18994,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18993,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18968,slot_type=Semi}
            |___Token:} {id=18961,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 18953, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18953
------------------------------------------------------------


================Reducing node 18955, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18955
------------------------------------------------------------


================Reducing node 18958, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18958
------------------------------------------------------------


================Reducing node 18960, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18960
------------------------------------------------------------


================Reducing node 18963, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18963
------------------------------------------------------------


================Reducing node 18966, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                                  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18966
------------------------------------------------------------


================Reducing node 18969, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18969
------------------------------------------------------------


================Reducing node 18971, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18971
------------------------------------------------------------


================Reducing node 18983, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                   1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return _Alignof   (char)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18983
------------------------------------------------------------


================Reducing node 18997, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18997
------------------------------------------------------------


================Reducing node 19011, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19011
------------------------------------------------------------


================Reducing node 19000, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19000
------------------------------------------------------------


================Reducing node 19013, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19013
------------------------------------------------------------


================Reducing node 19015, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19015
------------------------------------------------------------


================Reducing node 18985, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    int    main(){
        return _Alignof   (char)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18985
------------------------------------------------------------


================Reducing node 18986, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return _Alignof   (char)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18986
------------------------------------------------------------


================Reducing node 19019, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19019
------------------------------------------------------------


================Reducing node 19018, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19018
------------------------------------------------------------


================Reducing node 19016, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19016
------------------------------------------------------------


================Reducing node 19010, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19010
------------------------------------------------------------


================Reducing node 19009, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19009
------------------------------------------------------------


================Reducing node 19002, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19002
------------------------------------------------------------


================Reducing node 18999, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18999
------------------------------------------------------------


================Reducing node 18994, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18994
------------------------------------------------------------


================Reducing node 18993, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18993
------------------------------------------------------------


================Reducing node 18970, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18970
------------------------------------------------------------


================Reducing node 18968, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18968
------------------------------------------------------------


================Reducing node 18961, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18961
------------------------------------------------------------


================Reducing node 18959, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18959
------------------------------------------------------------


================Reducing node 18956, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18956
------------------------------------------------------------


================Reducing node 19020, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19020
------------------------------------------------------------


================Reducing node 19024, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19024
------------------------------------------------------------


======Fixpoint iteration 24. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=18952}
|___(+) {id=18953,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=18955,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=18956,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19020,slot_type=declarationSpecifiers}
        |       |___Token:int {id=19024,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=19011,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19019,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19013,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19015,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19016,slot_type=LeftParen}
        |           |___Token:) {id=19018,slot_type=RightParen}
        |___compoundStatement {id=18958,slot_type=compoundStatement}
            |___Token:{ {id=18959,slot_type=LeftBrace}
            |___(?) {id=18960,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=18963,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=18966,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=18969,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=18970,slot_type=Return}
            |           |   |___(?) {id=18971,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=18983,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=18997,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=19000,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:_Alignof {id=19010,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |   |___Token:( {id=19002,slot_type=LeftParen}
            |           |           |   |   |___Token:char {id=19009,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Char]}
            |           |           |   |___Token:) {id=18999,slot_type=RightParen}
            |           |           |___(*) {id=18985,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=18986,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=18994,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=18993,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=18968,slot_type=Semi}
            |___Token:} {id=18961,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main[]{
        return _Alignof   (char)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return _Alignof   (const)+1;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return _Alignof   (short)+1;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 25. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=19110}
|___(+) {id=19111,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19113,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19114,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19178,slot_type=declarationSpecifiers}
        |       |___Token:int {id=19182,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=19169,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19177,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19171,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19173,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19174,slot_type=LeftParen}
        |           |___Token:) {id=19176,slot_type=RightParen}
        |___compoundStatement {id=19116,slot_type=compoundStatement}
            |___Token:{ {id=19117,slot_type=LeftBrace}
            |___(?) {id=19118,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19121,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19124,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19127,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19128,slot_type=Return}
            |           |   |___(?) {id=19129,slot_type=optional__postfixExpression_1}
            |           |       |___additiveExpression {id=19141,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |           |           |___aux_rule__unaryExpression_8 {id=19155,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |   |___aux_rule__unaryExpression_10 {id=19158,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |   |___Token:_Alignof {id=19168,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |   |___Token:( {id=19160,slot_type=LeftParen}
            |           |           |   |   |___Token:short {id=19167,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Short]}
            |           |           |   |___Token:) {id=19157,slot_type=RightParen}
            |           |           |___(*) {id=19143,slot_type=kleene_star__additiveExpression_1}
            |           |               |___aux_rule__additiveExpression_2 {id=19144,slot_type=aux_rule__additiveExpression_2}
            |           |                   |___Token:+ {id=19152,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |           |                   |___Token:1 {id=19151,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=19126,slot_type=Semi}
            |___Token:} {id=19119,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 19111, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (short)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19111
------------------------------------------------------------


================Reducing node 19113, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (short)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19113
------------------------------------------------------------


================Reducing node 19116, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (short)+1;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19116
------------------------------------------------------------


================Reducing node 19118, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (short)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19118
------------------------------------------------------------


================Reducing node 19121, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (short)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19121
------------------------------------------------------------


================Reducing node 19124, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (short)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19124
------------------------------------------------------------


================Reducing node 19127, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (short)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19127
------------------------------------------------------------


================Reducing node 19129, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (short)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19129
------------------------------------------------------------


================Reducing node 19141, size=14================

The current best program is the following

    int    main(){
        return _Alignof   (short)+1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                     ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                    1;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 19141 from 14 to 12
------------------------------------------------------------


================Reducing node 19155, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19155
------------------------------------------------------------


================Reducing node 19169, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19169
------------------------------------------------------------


================Reducing node 19158, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19158
------------------------------------------------------------


================Reducing node 19171, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19171
------------------------------------------------------------


================Reducing node 19173, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19173
------------------------------------------------------------


================Reducing node 19177, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19177
------------------------------------------------------------


================Reducing node 19176, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19176
------------------------------------------------------------


================Reducing node 19174, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19174
------------------------------------------------------------


================Reducing node 19168, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19168
------------------------------------------------------------


================Reducing node 19167, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19167
------------------------------------------------------------


================Reducing node 19160, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19160
------------------------------------------------------------


================Reducing node 19157, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19157
------------------------------------------------------------


================Reducing node 19128, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19128
------------------------------------------------------------


================Reducing node 19126, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19126
------------------------------------------------------------


================Reducing node 19119, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19119
------------------------------------------------------------


================Reducing node 19117, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19117
------------------------------------------------------------


================Reducing node 19114, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19114
------------------------------------------------------------


================Reducing node 19178, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19178
------------------------------------------------------------


================Reducing node 19182, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19182
------------------------------------------------------------


======Fixpoint iteration 26. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=19110}
|___(+) {id=19111,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19113,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19114,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19178,slot_type=declarationSpecifiers}
        |       |___Token:int {id=19182,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=19169,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19177,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19171,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19173,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19174,slot_type=LeftParen}
        |           |___Token:) {id=19176,slot_type=RightParen}
        |___compoundStatement {id=19116,slot_type=compoundStatement}
            |___Token:{ {id=19117,slot_type=LeftBrace}
            |___(?) {id=19118,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19121,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19124,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19127,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19128,slot_type=Return}
            |           |   |___(?) {id=19129,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19155,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19158,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=19168,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=19160,slot_type=LeftParen}
            |           |           |   |___Token:short {id=19167,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Short]}
            |           |           |___Token:) {id=19157,slot_type=RightParen}
            |           |___Token:; {id=19126,slot_type=Semi}
            |___Token:} {id=19119,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 27. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=19210}
|___(+) {id=19211,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19213,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19214,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19268,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=19272,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=19259,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19267,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19261,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19263,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19264,slot_type=LeftParen}
        |           |___Token:) {id=19266,slot_type=RightParen}
        |___compoundStatement {id=19216,slot_type=compoundStatement}
            |___Token:{ {id=19217,slot_type=LeftBrace}
            |___(?) {id=19218,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19221,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19224,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19227,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19228,slot_type=Return}
            |           |   |___(?) {id=19229,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19245,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19248,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=19258,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=19250,slot_type=LeftParen}
            |           |           |   |___Token:short {id=19257,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Short]}
            |           |           |___Token:) {id=19247,slot_type=RightParen}
            |           |___Token:; {id=19226,slot_type=Semi}
            |___Token:} {id=19219,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 19211, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19211
------------------------------------------------------------


================Reducing node 19213, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19213
------------------------------------------------------------


================Reducing node 19216, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19216
------------------------------------------------------------


================Reducing node 19218, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19218
------------------------------------------------------------


================Reducing node 19221, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19221
------------------------------------------------------------


================Reducing node 19224, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19224
------------------------------------------------------------


================Reducing node 19227, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19227
------------------------------------------------------------


================Reducing node 19229, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19229
------------------------------------------------------------


================Reducing node 19245, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19245
------------------------------------------------------------


================Reducing node 19259, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19259
------------------------------------------------------------


================Reducing node 19248, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19248
------------------------------------------------------------


================Reducing node 19261, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19261
------------------------------------------------------------


================Reducing node 19263, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19263
------------------------------------------------------------


================Reducing node 19267, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19267
------------------------------------------------------------


================Reducing node 19266, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19266
------------------------------------------------------------


================Reducing node 19264, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19264
------------------------------------------------------------


================Reducing node 19258, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19258
------------------------------------------------------------


================Reducing node 19257, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19257
------------------------------------------------------------


================Reducing node 19250, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19250
------------------------------------------------------------


================Reducing node 19247, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19247
------------------------------------------------------------


================Reducing node 19228, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19228
------------------------------------------------------------


================Reducing node 19226, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19226
------------------------------------------------------------


================Reducing node 19219, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19219
------------------------------------------------------------


================Reducing node 19217, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19217
------------------------------------------------------------


================Reducing node 19214, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19214
------------------------------------------------------------


================Reducing node 19268, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19268
------------------------------------------------------------


================Reducing node 19272, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19272
------------------------------------------------------------


======Fixpoint iteration 28. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=19210}
|___(+) {id=19211,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19213,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19214,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19268,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=19272,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=19259,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19267,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19261,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19263,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19264,slot_type=LeftParen}
        |           |___Token:) {id=19266,slot_type=RightParen}
        |___compoundStatement {id=19216,slot_type=compoundStatement}
            |___Token:{ {id=19217,slot_type=LeftBrace}
            |___(?) {id=19218,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19221,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19224,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19227,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19228,slot_type=Return}
            |           |   |___(?) {id=19229,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19245,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19248,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=19258,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=19250,slot_type=LeftParen}
            |           |           |   |___Token:short {id=19257,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Short]}
            |           |           |___Token:) {id=19247,slot_type=RightParen}
            |           |___Token:; {id=19226,slot_type=Semi}
            |___Token:} {id=19219,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main[]{
        return _Alignof   (short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return sizeof(void)        ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return _Alignof(void    )  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 29. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=19348}
|___(+) {id=19349,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19351,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19352,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19406,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=19410,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=19397,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19405,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19399,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19401,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19402,slot_type=LeftParen}
        |           |___Token:) {id=19404,slot_type=RightParen}
        |___compoundStatement {id=19354,slot_type=compoundStatement}
            |___Token:{ {id=19355,slot_type=LeftBrace}
            |___(?) {id=19356,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19359,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19362,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19365,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19366,slot_type=Return}
            |           |   |___(?) {id=19367,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19383,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19386,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=19396,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=19388,slot_type=LeftParen}
            |           |           |   |___Token:short {id=19395,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Short]}
            |           |           |___Token:) {id=19385,slot_type=RightParen}
            |           |___Token:; {id=19364,slot_type=Semi}
            |___Token:} {id=19357,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 19349, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19349
------------------------------------------------------------


================Reducing node 19351, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19351
------------------------------------------------------------


================Reducing node 19354, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19354
------------------------------------------------------------


================Reducing node 19356, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19356
------------------------------------------------------------


================Reducing node 19359, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19359
------------------------------------------------------------


================Reducing node 19362, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19362
------------------------------------------------------------


================Reducing node 19365, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19365
------------------------------------------------------------


================Reducing node 19367, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19367
------------------------------------------------------------


================Reducing node 19383, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19383
------------------------------------------------------------


================Reducing node 19397, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19397
------------------------------------------------------------


================Reducing node 19386, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19386
------------------------------------------------------------


================Reducing node 19399, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19399
------------------------------------------------------------


================Reducing node 19401, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19401
------------------------------------------------------------


================Reducing node 19405, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19405
------------------------------------------------------------


================Reducing node 19404, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19404
------------------------------------------------------------


================Reducing node 19402, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19402
------------------------------------------------------------


================Reducing node 19396, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19396
------------------------------------------------------------


================Reducing node 19395, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19395
------------------------------------------------------------


================Reducing node 19388, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19388
------------------------------------------------------------


================Reducing node 19385, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19385
------------------------------------------------------------


================Reducing node 19366, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19366
------------------------------------------------------------


================Reducing node 19364, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19364
------------------------------------------------------------


================Reducing node 19357, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19357
------------------------------------------------------------


================Reducing node 19355, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19355
------------------------------------------------------------


================Reducing node 19352, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19352
------------------------------------------------------------


================Reducing node 19406, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19406
------------------------------------------------------------


================Reducing node 19410, size=12================

The current best program is the following

    signed main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19410
------------------------------------------------------------


======Fixpoint iteration 30. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=19348}
|___(+) {id=19349,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19351,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19352,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19406,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=19410,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=19397,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19405,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19399,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19401,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19402,slot_type=LeftParen}
        |           |___Token:) {id=19404,slot_type=RightParen}
        |___compoundStatement {id=19354,slot_type=compoundStatement}
            |___Token:{ {id=19355,slot_type=LeftBrace}
            |___(?) {id=19356,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19359,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19362,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19365,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19366,slot_type=Return}
            |           |   |___(?) {id=19367,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19383,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19386,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=19396,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=19388,slot_type=LeftParen}
            |           |           |   |___Token:short {id=19395,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Short]}
            |           |           |___Token:) {id=19385,slot_type=RightParen}
            |           |___Token:; {id=19364,slot_type=Semi}
            |___Token:} {id=19357,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 31. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=19434}
|___(+) {id=19435,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19437,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19438,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19492,slot_type=declarationSpecifiers}
        |       |___Token:int {id=19496,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=19483,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19491,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19485,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19487,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19488,slot_type=LeftParen}
        |           |___Token:) {id=19490,slot_type=RightParen}
        |___compoundStatement {id=19440,slot_type=compoundStatement}
            |___Token:{ {id=19441,slot_type=LeftBrace}
            |___(?) {id=19442,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19445,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19448,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19451,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19452,slot_type=Return}
            |           |   |___(?) {id=19453,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19469,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19472,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=19482,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=19474,slot_type=LeftParen}
            |           |           |   |___Token:short {id=19481,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Short]}
            |           |           |___Token:) {id=19471,slot_type=RightParen}
            |           |___Token:; {id=19450,slot_type=Semi}
            |___Token:} {id=19443,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 19435, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19435
------------------------------------------------------------


================Reducing node 19437, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19437
------------------------------------------------------------


================Reducing node 19440, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19440
------------------------------------------------------------


================Reducing node 19442, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19442
------------------------------------------------------------


================Reducing node 19445, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19445
------------------------------------------------------------


================Reducing node 19448, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19448
------------------------------------------------------------


================Reducing node 19451, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19451
------------------------------------------------------------


================Reducing node 19453, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19453
------------------------------------------------------------


================Reducing node 19469, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19469
------------------------------------------------------------


================Reducing node 19483, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19483
------------------------------------------------------------


================Reducing node 19472, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19472
------------------------------------------------------------


================Reducing node 19485, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19485
------------------------------------------------------------


================Reducing node 19487, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19487
------------------------------------------------------------


================Reducing node 19491, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19491
------------------------------------------------------------


================Reducing node 19490, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19490
------------------------------------------------------------


================Reducing node 19488, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19488
------------------------------------------------------------


================Reducing node 19482, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19482
------------------------------------------------------------


================Reducing node 19481, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19481
------------------------------------------------------------


================Reducing node 19474, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19474
------------------------------------------------------------


================Reducing node 19471, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19471
------------------------------------------------------------


================Reducing node 19452, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19452
------------------------------------------------------------


================Reducing node 19450, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19450
------------------------------------------------------------


================Reducing node 19443, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19443
------------------------------------------------------------


================Reducing node 19441, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19441
------------------------------------------------------------


================Reducing node 19438, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19438
------------------------------------------------------------


================Reducing node 19492, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19492
------------------------------------------------------------


================Reducing node 19496, size=12================

The current best program is the following

    int    main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19496
------------------------------------------------------------


======Fixpoint iteration 32. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=19434}
|___(+) {id=19435,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19437,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19438,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19492,slot_type=declarationSpecifiers}
        |       |___Token:int {id=19496,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=19483,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19491,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19485,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19487,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19488,slot_type=LeftParen}
        |           |___Token:) {id=19490,slot_type=RightParen}
        |___compoundStatement {id=19440,slot_type=compoundStatement}
            |___Token:{ {id=19441,slot_type=LeftBrace}
            |___(?) {id=19442,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19445,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19448,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19451,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19452,slot_type=Return}
            |           |   |___(?) {id=19453,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19469,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19472,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=19482,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=19474,slot_type=LeftParen}
            |           |           |   |___Token:short {id=19481,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Short]}
            |           |           |___Token:) {id=19471,slot_type=RightParen}
            |           |___Token:; {id=19450,slot_type=Semi}
            |___Token:} {id=19443,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main[]{
        return __alignof__(short)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return sizeof(void)        ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return _Alignof(void    )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return __alignof__(void )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return __alignof__(const)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return __alignof__(char )  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 33. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=19579}
|___(+) {id=19580,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19582,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19583,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19637,slot_type=declarationSpecifiers}
        |       |___Token:int {id=19641,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=19628,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19636,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19630,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19632,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19633,slot_type=LeftParen}
        |           |___Token:) {id=19635,slot_type=RightParen}
        |___compoundStatement {id=19585,slot_type=compoundStatement}
            |___Token:{ {id=19586,slot_type=LeftBrace}
            |___(?) {id=19587,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19590,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19593,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19596,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19597,slot_type=Return}
            |           |   |___(?) {id=19598,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19614,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19617,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=19627,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=19619,slot_type=LeftParen}
            |           |           |   |___Token:int {id=19626,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |           |           |___Token:) {id=19616,slot_type=RightParen}
            |           |___Token:; {id=19595,slot_type=Semi}
            |___Token:} {id=19588,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 19580, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19580
------------------------------------------------------------


================Reducing node 19582, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19582
------------------------------------------------------------


================Reducing node 19585, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19585
------------------------------------------------------------


================Reducing node 19587, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19587
------------------------------------------------------------


================Reducing node 19590, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19590
------------------------------------------------------------


================Reducing node 19593, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19593
------------------------------------------------------------


================Reducing node 19596, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19596
------------------------------------------------------------


================Reducing node 19598, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19598
------------------------------------------------------------


================Reducing node 19614, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19614
------------------------------------------------------------


================Reducing node 19628, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19628
------------------------------------------------------------


================Reducing node 19617, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19617
------------------------------------------------------------


================Reducing node 19630, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19630
------------------------------------------------------------


================Reducing node 19632, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19632
------------------------------------------------------------


================Reducing node 19636, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19636
------------------------------------------------------------


================Reducing node 19635, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19635
------------------------------------------------------------


================Reducing node 19633, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19633
------------------------------------------------------------


================Reducing node 19627, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19627
------------------------------------------------------------


================Reducing node 19626, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19626
------------------------------------------------------------


================Reducing node 19619, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19619
------------------------------------------------------------


================Reducing node 19616, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19616
------------------------------------------------------------


================Reducing node 19597, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19597
------------------------------------------------------------


================Reducing node 19595, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19595
------------------------------------------------------------


================Reducing node 19588, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19588
------------------------------------------------------------


================Reducing node 19586, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19586
------------------------------------------------------------


================Reducing node 19583, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19583
------------------------------------------------------------


================Reducing node 19637, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19637
------------------------------------------------------------


================Reducing node 19641, size=12================

The current best program is the following

    int    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19641
------------------------------------------------------------


======Fixpoint iteration 34. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=19579}
|___(+) {id=19580,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19582,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19583,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19637,slot_type=declarationSpecifiers}
        |       |___Token:int {id=19641,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=19628,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19636,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19630,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19632,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19633,slot_type=LeftParen}
        |           |___Token:) {id=19635,slot_type=RightParen}
        |___compoundStatement {id=19585,slot_type=compoundStatement}
            |___Token:{ {id=19586,slot_type=LeftBrace}
            |___(?) {id=19587,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19590,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19593,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19596,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19597,slot_type=Return}
            |           |   |___(?) {id=19598,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19614,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19617,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=19627,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=19619,slot_type=LeftParen}
            |           |           |   |___Token:int {id=19626,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |           |           |___Token:) {id=19616,slot_type=RightParen}
            |           |___Token:; {id=19595,slot_type=Semi}
            |___Token:} {id=19588,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 35. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=19669}
|___(+) {id=19670,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19672,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19673,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19727,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=19731,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=19718,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19726,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19720,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19722,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19723,slot_type=LeftParen}
        |           |___Token:) {id=19725,slot_type=RightParen}
        |___compoundStatement {id=19675,slot_type=compoundStatement}
            |___Token:{ {id=19676,slot_type=LeftBrace}
            |___(?) {id=19677,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19680,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19683,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19686,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19687,slot_type=Return}
            |           |   |___(?) {id=19688,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19704,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19707,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=19717,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=19709,slot_type=LeftParen}
            |           |           |   |___Token:int {id=19716,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |           |           |___Token:) {id=19706,slot_type=RightParen}
            |           |___Token:; {id=19685,slot_type=Semi}
            |___Token:} {id=19678,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 19670, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19670
------------------------------------------------------------


================Reducing node 19672, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19672
------------------------------------------------------------


================Reducing node 19675, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19675
------------------------------------------------------------


================Reducing node 19677, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19677
------------------------------------------------------------


================Reducing node 19680, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19680
------------------------------------------------------------


================Reducing node 19683, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19683
------------------------------------------------------------


================Reducing node 19686, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19686
------------------------------------------------------------


================Reducing node 19688, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19688
------------------------------------------------------------


================Reducing node 19704, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19704
------------------------------------------------------------


================Reducing node 19718, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19718
------------------------------------------------------------


================Reducing node 19707, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19707
------------------------------------------------------------


================Reducing node 19720, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19720
------------------------------------------------------------


================Reducing node 19722, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19722
------------------------------------------------------------


================Reducing node 19726, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19726
------------------------------------------------------------


================Reducing node 19725, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19725
------------------------------------------------------------


================Reducing node 19723, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19723
------------------------------------------------------------


================Reducing node 19717, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19717
------------------------------------------------------------


================Reducing node 19716, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19716
------------------------------------------------------------


================Reducing node 19709, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19709
------------------------------------------------------------


================Reducing node 19706, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19706
------------------------------------------------------------


================Reducing node 19687, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19687
------------------------------------------------------------


================Reducing node 19685, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19685
------------------------------------------------------------


================Reducing node 19678, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19678
------------------------------------------------------------


================Reducing node 19676, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19676
------------------------------------------------------------


================Reducing node 19673, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19673
------------------------------------------------------------


================Reducing node 19727, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19727
------------------------------------------------------------


================Reducing node 19731, size=12================

The current best program is the following

    signed main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19731
------------------------------------------------------------


======Fixpoint iteration 36. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=19669}
|___(+) {id=19670,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19672,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19673,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19727,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=19731,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=19718,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19726,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19720,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19722,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19723,slot_type=LeftParen}
        |           |___Token:) {id=19725,slot_type=RightParen}
        |___compoundStatement {id=19675,slot_type=compoundStatement}
            |___Token:{ {id=19676,slot_type=LeftBrace}
            |___(?) {id=19677,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19680,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19683,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19686,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19687,slot_type=Return}
            |           |   |___(?) {id=19688,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19704,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19707,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=19717,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=19709,slot_type=LeftParen}
            |           |           |   |___Token:int {id=19716,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |           |           |___Token:) {id=19706,slot_type=RightParen}
            |           |___Token:; {id=19685,slot_type=Semi}
            |___Token:} {id=19678,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main[]{
        return __alignof__(int  )  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 37. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=19806}
|___(+) {id=19807,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19809,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19810,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19864,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=19868,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=19855,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19863,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19857,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19859,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19860,slot_type=LeftParen}
        |           |___Token:) {id=19862,slot_type=RightParen}
        |___compoundStatement {id=19812,slot_type=compoundStatement}
            |___Token:{ {id=19813,slot_type=LeftBrace}
            |___(?) {id=19814,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19817,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19820,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19823,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19824,slot_type=Return}
            |           |   |___(?) {id=19825,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19841,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19844,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=19854,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=19846,slot_type=LeftParen}
            |           |           |   |___Token:int {id=19853,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |           |           |___Token:) {id=19843,slot_type=RightParen}
            |           |___Token:; {id=19822,slot_type=Semi}
            |___Token:} {id=19815,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 19807, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19807
------------------------------------------------------------


================Reducing node 19809, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19809
------------------------------------------------------------


================Reducing node 19812, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19812
------------------------------------------------------------


================Reducing node 19814, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19814
------------------------------------------------------------


================Reducing node 19817, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19817
------------------------------------------------------------


================Reducing node 19820, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19820
------------------------------------------------------------


================Reducing node 19823, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19823
------------------------------------------------------------


================Reducing node 19825, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19825
------------------------------------------------------------


================Reducing node 19841, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19841
------------------------------------------------------------


================Reducing node 19855, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19855
------------------------------------------------------------


================Reducing node 19844, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19844
------------------------------------------------------------


================Reducing node 19857, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19857
------------------------------------------------------------


================Reducing node 19859, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19859
------------------------------------------------------------


================Reducing node 19863, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19863
------------------------------------------------------------


================Reducing node 19862, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19862
------------------------------------------------------------


================Reducing node 19860, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19860
------------------------------------------------------------


================Reducing node 19854, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19854
------------------------------------------------------------


================Reducing node 19853, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19853
------------------------------------------------------------


================Reducing node 19846, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19846
------------------------------------------------------------


================Reducing node 19843, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19843
------------------------------------------------------------


================Reducing node 19824, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19824
------------------------------------------------------------


================Reducing node 19822, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19822
------------------------------------------------------------


================Reducing node 19815, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19815
------------------------------------------------------------


================Reducing node 19813, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19813
------------------------------------------------------------


================Reducing node 19810, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19810
------------------------------------------------------------


================Reducing node 19864, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19864
------------------------------------------------------------


================Reducing node 19868, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19868
------------------------------------------------------------


======Fixpoint iteration 38. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=19806}
|___(+) {id=19807,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19809,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19810,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19864,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=19868,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=19855,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19863,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19857,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19859,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19860,slot_type=LeftParen}
        |           |___Token:) {id=19862,slot_type=RightParen}
        |___compoundStatement {id=19812,slot_type=compoundStatement}
            |___Token:{ {id=19813,slot_type=LeftBrace}
            |___(?) {id=19814,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19817,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19820,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19823,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19824,slot_type=Return}
            |           |   |___(?) {id=19825,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19841,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19844,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=19854,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=19846,slot_type=LeftParen}
            |           |           |   |___Token:int {id=19853,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |           |           |___Token:) {id=19843,slot_type=RightParen}
            |           |___Token:; {id=19822,slot_type=Semi}
            |___Token:} {id=19815,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 39. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=19892}
|___(+) {id=19893,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19895,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19896,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19950,slot_type=declarationSpecifiers}
        |       |___Token:int {id=19954,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=19941,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19949,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19943,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19945,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19946,slot_type=LeftParen}
        |           |___Token:) {id=19948,slot_type=RightParen}
        |___compoundStatement {id=19898,slot_type=compoundStatement}
            |___Token:{ {id=19899,slot_type=LeftBrace}
            |___(?) {id=19900,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19903,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19906,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19909,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19910,slot_type=Return}
            |           |   |___(?) {id=19911,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19927,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19930,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=19940,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=19932,slot_type=LeftParen}
            |           |           |   |___Token:int {id=19939,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |           |           |___Token:) {id=19929,slot_type=RightParen}
            |           |___Token:; {id=19908,slot_type=Semi}
            |___Token:} {id=19901,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 19893, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19893
------------------------------------------------------------


================Reducing node 19895, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19895
------------------------------------------------------------


================Reducing node 19898, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19898
------------------------------------------------------------


================Reducing node 19900, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19900
------------------------------------------------------------


================Reducing node 19903, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19903
------------------------------------------------------------


================Reducing node 19906, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19906
------------------------------------------------------------


================Reducing node 19909, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19909
------------------------------------------------------------


================Reducing node 19911, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19911
------------------------------------------------------------


================Reducing node 19927, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19927
------------------------------------------------------------


================Reducing node 19941, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19941
------------------------------------------------------------


================Reducing node 19930, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19930
------------------------------------------------------------


================Reducing node 19943, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19943
------------------------------------------------------------


================Reducing node 19945, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19945
------------------------------------------------------------


================Reducing node 19949, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19949
------------------------------------------------------------


================Reducing node 19948, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19948
------------------------------------------------------------


================Reducing node 19946, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19946
------------------------------------------------------------


================Reducing node 19940, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19940
------------------------------------------------------------


================Reducing node 19939, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19939
------------------------------------------------------------


================Reducing node 19932, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19932
------------------------------------------------------------


================Reducing node 19929, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19929
------------------------------------------------------------


================Reducing node 19910, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19910
------------------------------------------------------------


================Reducing node 19908, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19908
------------------------------------------------------------


================Reducing node 19901, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19901
------------------------------------------------------------


================Reducing node 19899, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19899
------------------------------------------------------------


================Reducing node 19896, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19896
------------------------------------------------------------


================Reducing node 19950, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19950
------------------------------------------------------------


================Reducing node 19954, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19954
------------------------------------------------------------


======Fixpoint iteration 40. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=19892}
|___(+) {id=19893,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=19895,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=19896,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=19950,slot_type=declarationSpecifiers}
        |       |___Token:int {id=19954,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=19941,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=19949,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=19943,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=19945,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=19946,slot_type=LeftParen}
        |           |___Token:) {id=19948,slot_type=RightParen}
        |___compoundStatement {id=19898,slot_type=compoundStatement}
            |___Token:{ {id=19899,slot_type=LeftBrace}
            |___(?) {id=19900,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=19903,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=19906,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=19909,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=19910,slot_type=Return}
            |           |   |___(?) {id=19911,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=19927,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=19930,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=19940,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=19932,slot_type=LeftParen}
            |           |           |   |___Token:int {id=19939,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |           |           |___Token:) {id=19929,slot_type=RightParen}
            |           |___Token:; {id=19908,slot_type=Semi}
            |___Token:} {id=19901,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main[]{
        return _Alignof   (int  )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return _Alignof   (const)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return _Alignof   (char )  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 41. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=20038}
|___(+) {id=20039,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20041,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20042,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20096,slot_type=declarationSpecifiers}
        |       |___Token:int {id=20100,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=20087,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20095,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20089,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20091,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20092,slot_type=LeftParen}
        |           |___Token:) {id=20094,slot_type=RightParen}
        |___compoundStatement {id=20044,slot_type=compoundStatement}
            |___Token:{ {id=20045,slot_type=LeftBrace}
            |___(?) {id=20046,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20049,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20052,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20055,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20056,slot_type=Return}
            |           |   |___(?) {id=20057,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20073,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20076,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=20086,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=20078,slot_type=LeftParen}
            |           |           |   |___Token:long {id=20085,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Long]}
            |           |           |___Token:) {id=20075,slot_type=RightParen}
            |           |___Token:; {id=20054,slot_type=Semi}
            |___Token:} {id=20047,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 20039, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20039
------------------------------------------------------------


================Reducing node 20041, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20041
------------------------------------------------------------


================Reducing node 20044, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20044
------------------------------------------------------------


================Reducing node 20046, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20046
------------------------------------------------------------


================Reducing node 20049, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20049
------------------------------------------------------------


================Reducing node 20052, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20052
------------------------------------------------------------


================Reducing node 20055, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20055
------------------------------------------------------------


================Reducing node 20057, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20057
------------------------------------------------------------


================Reducing node 20073, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20073
------------------------------------------------------------


================Reducing node 20087, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20087
------------------------------------------------------------


================Reducing node 20076, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20076
------------------------------------------------------------


================Reducing node 20089, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20089
------------------------------------------------------------


================Reducing node 20091, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20091
------------------------------------------------------------


================Reducing node 20095, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20095
------------------------------------------------------------


================Reducing node 20094, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20094
------------------------------------------------------------


================Reducing node 20092, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20092
------------------------------------------------------------


================Reducing node 20086, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20086
------------------------------------------------------------


================Reducing node 20085, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20085
------------------------------------------------------------


================Reducing node 20078, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20078
------------------------------------------------------------


================Reducing node 20075, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20075
------------------------------------------------------------


================Reducing node 20056, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20056
------------------------------------------------------------


================Reducing node 20054, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20054
------------------------------------------------------------


================Reducing node 20047, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20047
------------------------------------------------------------


================Reducing node 20045, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20045
------------------------------------------------------------


================Reducing node 20042, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20042
------------------------------------------------------------


================Reducing node 20096, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20096
------------------------------------------------------------


================Reducing node 20100, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20100
------------------------------------------------------------


======Fixpoint iteration 42. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=20038}
|___(+) {id=20039,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20041,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20042,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20096,slot_type=declarationSpecifiers}
        |       |___Token:int {id=20100,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=20087,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20095,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20089,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20091,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20092,slot_type=LeftParen}
        |           |___Token:) {id=20094,slot_type=RightParen}
        |___compoundStatement {id=20044,slot_type=compoundStatement}
            |___Token:{ {id=20045,slot_type=LeftBrace}
            |___(?) {id=20046,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20049,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20052,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20055,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20056,slot_type=Return}
            |           |   |___(?) {id=20057,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20073,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20076,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=20086,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=20078,slot_type=LeftParen}
            |           |           |   |___Token:long {id=20085,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Long]}
            |           |           |___Token:) {id=20075,slot_type=RightParen}
            |           |___Token:; {id=20054,slot_type=Semi}
            |___Token:} {id=20047,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 43. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=20128}
|___(+) {id=20129,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20131,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20132,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20186,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=20190,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=20177,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20185,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20179,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20181,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20182,slot_type=LeftParen}
        |           |___Token:) {id=20184,slot_type=RightParen}
        |___compoundStatement {id=20134,slot_type=compoundStatement}
            |___Token:{ {id=20135,slot_type=LeftBrace}
            |___(?) {id=20136,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20139,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20142,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20145,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20146,slot_type=Return}
            |           |   |___(?) {id=20147,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20163,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20166,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=20176,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=20168,slot_type=LeftParen}
            |           |           |   |___Token:long {id=20175,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Long]}
            |           |           |___Token:) {id=20165,slot_type=RightParen}
            |           |___Token:; {id=20144,slot_type=Semi}
            |___Token:} {id=20137,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 20129, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20129
------------------------------------------------------------


================Reducing node 20131, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20131
------------------------------------------------------------


================Reducing node 20134, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20134
------------------------------------------------------------


================Reducing node 20136, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20136
------------------------------------------------------------


================Reducing node 20139, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20139
------------------------------------------------------------


================Reducing node 20142, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20142
------------------------------------------------------------


================Reducing node 20145, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20145
------------------------------------------------------------


================Reducing node 20147, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20147
------------------------------------------------------------


================Reducing node 20163, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20163
------------------------------------------------------------


================Reducing node 20177, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20177
------------------------------------------------------------


================Reducing node 20166, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20166
------------------------------------------------------------


================Reducing node 20179, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20179
------------------------------------------------------------


================Reducing node 20181, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20181
------------------------------------------------------------


================Reducing node 20185, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20185
------------------------------------------------------------


================Reducing node 20184, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20184
------------------------------------------------------------


================Reducing node 20182, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20182
------------------------------------------------------------


================Reducing node 20176, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20176
------------------------------------------------------------


================Reducing node 20175, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20175
------------------------------------------------------------


================Reducing node 20168, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20168
------------------------------------------------------------


================Reducing node 20165, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20165
------------------------------------------------------------


================Reducing node 20146, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20146
------------------------------------------------------------


================Reducing node 20144, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20144
------------------------------------------------------------


================Reducing node 20137, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20137
------------------------------------------------------------


================Reducing node 20135, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20135
------------------------------------------------------------


================Reducing node 20132, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20132
------------------------------------------------------------


================Reducing node 20186, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20186
------------------------------------------------------------


================Reducing node 20190, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20190
------------------------------------------------------------


======Fixpoint iteration 44. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=20128}
|___(+) {id=20129,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20131,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20132,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20186,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=20190,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=20177,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20185,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20179,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20181,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20182,slot_type=LeftParen}
        |           |___Token:) {id=20184,slot_type=RightParen}
        |___compoundStatement {id=20134,slot_type=compoundStatement}
            |___Token:{ {id=20135,slot_type=LeftBrace}
            |___(?) {id=20136,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20139,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20142,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20145,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20146,slot_type=Return}
            |           |   |___(?) {id=20147,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20163,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20166,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=20176,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=20168,slot_type=LeftParen}
            |           |           |   |___Token:long {id=20175,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Long]}
            |           |           |___Token:) {id=20165,slot_type=RightParen}
            |           |___Token:; {id=20144,slot_type=Semi}
            |___Token:} {id=20137,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main[]{
        return _Alignof   (long )  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 45. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=20266}
|___(+) {id=20267,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20269,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20270,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20324,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=20328,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=20315,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20323,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20317,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20319,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20320,slot_type=LeftParen}
        |           |___Token:) {id=20322,slot_type=RightParen}
        |___compoundStatement {id=20272,slot_type=compoundStatement}
            |___Token:{ {id=20273,slot_type=LeftBrace}
            |___(?) {id=20274,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20277,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20280,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20283,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20284,slot_type=Return}
            |           |   |___(?) {id=20285,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20301,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20304,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=20314,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=20306,slot_type=LeftParen}
            |           |           |   |___Token:long {id=20313,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Long]}
            |           |           |___Token:) {id=20303,slot_type=RightParen}
            |           |___Token:; {id=20282,slot_type=Semi}
            |___Token:} {id=20275,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 20267, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20267
------------------------------------------------------------


================Reducing node 20269, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20269
------------------------------------------------------------


================Reducing node 20272, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20272
------------------------------------------------------------


================Reducing node 20274, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20274
------------------------------------------------------------


================Reducing node 20277, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20277
------------------------------------------------------------


================Reducing node 20280, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20280
------------------------------------------------------------


================Reducing node 20283, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20283
------------------------------------------------------------


================Reducing node 20285, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20285
------------------------------------------------------------


================Reducing node 20301, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20301
------------------------------------------------------------


================Reducing node 20315, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20315
------------------------------------------------------------


================Reducing node 20304, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20304
------------------------------------------------------------


================Reducing node 20317, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20317
------------------------------------------------------------


================Reducing node 20319, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20319
------------------------------------------------------------


================Reducing node 20323, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20323
------------------------------------------------------------


================Reducing node 20322, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20322
------------------------------------------------------------


================Reducing node 20320, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20320
------------------------------------------------------------


================Reducing node 20314, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20314
------------------------------------------------------------


================Reducing node 20313, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20313
------------------------------------------------------------


================Reducing node 20306, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20306
------------------------------------------------------------


================Reducing node 20303, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20303
------------------------------------------------------------


================Reducing node 20284, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20284
------------------------------------------------------------


================Reducing node 20282, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20282
------------------------------------------------------------


================Reducing node 20275, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20275
------------------------------------------------------------


================Reducing node 20273, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20273
------------------------------------------------------------


================Reducing node 20270, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20270
------------------------------------------------------------


================Reducing node 20324, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20324
------------------------------------------------------------


================Reducing node 20328, size=12================

The current best program is the following

    signed main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20328
------------------------------------------------------------


======Fixpoint iteration 46. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=20266}
|___(+) {id=20267,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20269,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20270,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20324,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=20328,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=20315,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20323,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20317,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20319,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20320,slot_type=LeftParen}
        |           |___Token:) {id=20322,slot_type=RightParen}
        |___compoundStatement {id=20272,slot_type=compoundStatement}
            |___Token:{ {id=20273,slot_type=LeftBrace}
            |___(?) {id=20274,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20277,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20280,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20283,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20284,slot_type=Return}
            |           |   |___(?) {id=20285,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20301,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20304,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=20314,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=20306,slot_type=LeftParen}
            |           |           |   |___Token:long {id=20313,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Long]}
            |           |           |___Token:) {id=20303,slot_type=RightParen}
            |           |___Token:; {id=20282,slot_type=Semi}
            |___Token:} {id=20275,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 47. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=20352}
|___(+) {id=20353,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20355,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20356,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20410,slot_type=declarationSpecifiers}
        |       |___Token:int {id=20414,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=20401,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20409,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20403,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20405,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20406,slot_type=LeftParen}
        |           |___Token:) {id=20408,slot_type=RightParen}
        |___compoundStatement {id=20358,slot_type=compoundStatement}
            |___Token:{ {id=20359,slot_type=LeftBrace}
            |___(?) {id=20360,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20363,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20366,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20369,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20370,slot_type=Return}
            |           |   |___(?) {id=20371,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20387,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20390,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=20400,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=20392,slot_type=LeftParen}
            |           |           |   |___Token:long {id=20399,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Long]}
            |           |           |___Token:) {id=20389,slot_type=RightParen}
            |           |___Token:; {id=20368,slot_type=Semi}
            |___Token:} {id=20361,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 20353, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20353
------------------------------------------------------------


================Reducing node 20355, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20355
------------------------------------------------------------


================Reducing node 20358, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20358
------------------------------------------------------------


================Reducing node 20360, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20360
------------------------------------------------------------


================Reducing node 20363, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20363
------------------------------------------------------------


================Reducing node 20366, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20366
------------------------------------------------------------


================Reducing node 20369, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20369
------------------------------------------------------------


================Reducing node 20371, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20371
------------------------------------------------------------


================Reducing node 20387, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20387
------------------------------------------------------------


================Reducing node 20401, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20401
------------------------------------------------------------


================Reducing node 20390, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20390
------------------------------------------------------------


================Reducing node 20403, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20403
------------------------------------------------------------


================Reducing node 20405, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20405
------------------------------------------------------------


================Reducing node 20409, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20409
------------------------------------------------------------


================Reducing node 20408, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20408
------------------------------------------------------------


================Reducing node 20406, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20406
------------------------------------------------------------


================Reducing node 20400, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20400
------------------------------------------------------------


================Reducing node 20399, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20399
------------------------------------------------------------


================Reducing node 20392, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20392
------------------------------------------------------------


================Reducing node 20389, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20389
------------------------------------------------------------


================Reducing node 20370, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20370
------------------------------------------------------------


================Reducing node 20368, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20368
------------------------------------------------------------


================Reducing node 20361, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20361
------------------------------------------------------------


================Reducing node 20359, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20359
------------------------------------------------------------


================Reducing node 20356, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20356
------------------------------------------------------------


================Reducing node 20410, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20410
------------------------------------------------------------


================Reducing node 20414, size=12================

The current best program is the following

    int    main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20414
------------------------------------------------------------


======Fixpoint iteration 48. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=20352}
|___(+) {id=20353,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20355,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20356,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20410,slot_type=declarationSpecifiers}
        |       |___Token:int {id=20414,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=20401,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20409,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20403,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20405,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20406,slot_type=LeftParen}
        |           |___Token:) {id=20408,slot_type=RightParen}
        |___compoundStatement {id=20358,slot_type=compoundStatement}
            |___Token:{ {id=20359,slot_type=LeftBrace}
            |___(?) {id=20360,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20363,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20366,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20369,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20370,slot_type=Return}
            |           |   |___(?) {id=20371,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20387,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20390,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=20400,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=20392,slot_type=LeftParen}
            |           |           |   |___Token:long {id=20399,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Long]}
            |           |           |___Token:) {id=20389,slot_type=RightParen}
            |           |___Token:; {id=20368,slot_type=Semi}
            |___Token:} {id=20361,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main[]{
        return __alignof__(long )  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 49. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=20499}
|___(+) {id=20500,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20502,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20503,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20557,slot_type=declarationSpecifiers}
        |       |___Token:int {id=20561,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=20548,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20556,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20550,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20552,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20553,slot_type=LeftParen}
        |           |___Token:) {id=20555,slot_type=RightParen}
        |___compoundStatement {id=20505,slot_type=compoundStatement}
            |___Token:{ {id=20506,slot_type=LeftBrace}
            |___(?) {id=20507,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20510,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20513,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20516,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20517,slot_type=Return}
            |           |   |___(?) {id=20518,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20534,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20537,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=20547,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=20539,slot_type=LeftParen}
            |           |           |   |___Token:float {id=20546,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Float]}
            |           |           |___Token:) {id=20536,slot_type=RightParen}
            |           |___Token:; {id=20515,slot_type=Semi}
            |___Token:} {id=20508,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 20500, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20500
------------------------------------------------------------


================Reducing node 20502, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20502
------------------------------------------------------------


================Reducing node 20505, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20505
------------------------------------------------------------


================Reducing node 20507, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20507
------------------------------------------------------------


================Reducing node 20510, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20510
------------------------------------------------------------


================Reducing node 20513, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20513
------------------------------------------------------------


================Reducing node 20516, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20516
------------------------------------------------------------


================Reducing node 20518, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20518
------------------------------------------------------------


================Reducing node 20534, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20534
------------------------------------------------------------


================Reducing node 20548, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20548
------------------------------------------------------------


================Reducing node 20537, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20537
------------------------------------------------------------


================Reducing node 20550, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20550
------------------------------------------------------------


================Reducing node 20552, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20552
------------------------------------------------------------


================Reducing node 20556, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20556
------------------------------------------------------------


================Reducing node 20555, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20555
------------------------------------------------------------


================Reducing node 20553, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20553
------------------------------------------------------------


================Reducing node 20547, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20547
------------------------------------------------------------


================Reducing node 20546, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20546
------------------------------------------------------------


================Reducing node 20539, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20539
------------------------------------------------------------


================Reducing node 20536, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20536
------------------------------------------------------------


================Reducing node 20517, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20517
------------------------------------------------------------


================Reducing node 20515, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20515
------------------------------------------------------------


================Reducing node 20508, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20508
------------------------------------------------------------


================Reducing node 20506, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20506
------------------------------------------------------------


================Reducing node 20503, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20503
------------------------------------------------------------


================Reducing node 20557, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20557
------------------------------------------------------------


================Reducing node 20561, size=12================

The current best program is the following

    int    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20561
------------------------------------------------------------


======Fixpoint iteration 50. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=20499}
|___(+) {id=20500,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20502,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20503,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20557,slot_type=declarationSpecifiers}
        |       |___Token:int {id=20561,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=20548,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20556,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20550,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20552,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20553,slot_type=LeftParen}
        |           |___Token:) {id=20555,slot_type=RightParen}
        |___compoundStatement {id=20505,slot_type=compoundStatement}
            |___Token:{ {id=20506,slot_type=LeftBrace}
            |___(?) {id=20507,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20510,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20513,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20516,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20517,slot_type=Return}
            |           |   |___(?) {id=20518,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20534,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20537,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=20547,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=20539,slot_type=LeftParen}
            |           |           |   |___Token:float {id=20546,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Float]}
            |           |           |___Token:) {id=20536,slot_type=RightParen}
            |           |___Token:; {id=20515,slot_type=Semi}
            |___Token:} {id=20508,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 51. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=20589}
|___(+) {id=20590,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20592,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20593,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20647,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=20651,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=20638,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20646,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20640,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20642,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20643,slot_type=LeftParen}
        |           |___Token:) {id=20645,slot_type=RightParen}
        |___compoundStatement {id=20595,slot_type=compoundStatement}
            |___Token:{ {id=20596,slot_type=LeftBrace}
            |___(?) {id=20597,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20600,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20603,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20606,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20607,slot_type=Return}
            |           |   |___(?) {id=20608,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20624,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20627,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=20637,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=20629,slot_type=LeftParen}
            |           |           |   |___Token:float {id=20636,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Float]}
            |           |           |___Token:) {id=20626,slot_type=RightParen}
            |           |___Token:; {id=20605,slot_type=Semi}
            |___Token:} {id=20598,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 20590, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20590
------------------------------------------------------------


================Reducing node 20592, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20592
------------------------------------------------------------


================Reducing node 20595, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20595
------------------------------------------------------------


================Reducing node 20597, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20597
------------------------------------------------------------


================Reducing node 20600, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20600
------------------------------------------------------------


================Reducing node 20603, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20603
------------------------------------------------------------


================Reducing node 20606, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20606
------------------------------------------------------------


================Reducing node 20608, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20608
------------------------------------------------------------


================Reducing node 20624, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20624
------------------------------------------------------------


================Reducing node 20638, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20638
------------------------------------------------------------


================Reducing node 20627, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20627
------------------------------------------------------------


================Reducing node 20640, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20640
------------------------------------------------------------


================Reducing node 20642, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20642
------------------------------------------------------------


================Reducing node 20646, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20646
------------------------------------------------------------


================Reducing node 20645, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20645
------------------------------------------------------------


================Reducing node 20643, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20643
------------------------------------------------------------


================Reducing node 20637, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20637
------------------------------------------------------------


================Reducing node 20636, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20636
------------------------------------------------------------


================Reducing node 20629, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20629
------------------------------------------------------------


================Reducing node 20626, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20626
------------------------------------------------------------


================Reducing node 20607, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20607
------------------------------------------------------------


================Reducing node 20605, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20605
------------------------------------------------------------


================Reducing node 20598, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20598
------------------------------------------------------------


================Reducing node 20596, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20596
------------------------------------------------------------


================Reducing node 20593, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20593
------------------------------------------------------------


================Reducing node 20647, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20647
------------------------------------------------------------


================Reducing node 20651, size=12================

The current best program is the following

    signed main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20651
------------------------------------------------------------


======Fixpoint iteration 52. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=20589}
|___(+) {id=20590,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20592,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20593,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20647,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=20651,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=20638,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20646,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20640,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20642,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20643,slot_type=LeftParen}
        |           |___Token:) {id=20645,slot_type=RightParen}
        |___compoundStatement {id=20595,slot_type=compoundStatement}
            |___Token:{ {id=20596,slot_type=LeftBrace}
            |___(?) {id=20597,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20600,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20603,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20606,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20607,slot_type=Return}
            |           |   |___(?) {id=20608,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20624,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20627,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=20637,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=20629,slot_type=LeftParen}
            |           |           |   |___Token:float {id=20636,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Float]}
            |           |           |___Token:) {id=20626,slot_type=RightParen}
            |           |___Token:; {id=20605,slot_type=Semi}
            |___Token:} {id=20598,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main[]{
        return __alignof__(float)  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 53. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=20726}
|___(+) {id=20727,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20729,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20730,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20784,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=20788,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=20775,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20783,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20777,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20779,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20780,slot_type=LeftParen}
        |           |___Token:) {id=20782,slot_type=RightParen}
        |___compoundStatement {id=20732,slot_type=compoundStatement}
            |___Token:{ {id=20733,slot_type=LeftBrace}
            |___(?) {id=20734,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20737,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20740,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20743,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20744,slot_type=Return}
            |           |   |___(?) {id=20745,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20761,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20764,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=20774,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=20766,slot_type=LeftParen}
            |           |           |   |___Token:float {id=20773,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Float]}
            |           |           |___Token:) {id=20763,slot_type=RightParen}
            |           |___Token:; {id=20742,slot_type=Semi}
            |___Token:} {id=20735,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 20727, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20727
------------------------------------------------------------


================Reducing node 20729, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20729
------------------------------------------------------------


================Reducing node 20732, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20732
------------------------------------------------------------


================Reducing node 20734, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20734
------------------------------------------------------------


================Reducing node 20737, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20737
------------------------------------------------------------


================Reducing node 20740, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20740
------------------------------------------------------------


================Reducing node 20743, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20743
------------------------------------------------------------


================Reducing node 20745, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20745
------------------------------------------------------------


================Reducing node 20761, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20761
------------------------------------------------------------


================Reducing node 20775, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20775
------------------------------------------------------------


================Reducing node 20764, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20764
------------------------------------------------------------


================Reducing node 20777, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20777
------------------------------------------------------------


================Reducing node 20779, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20779
------------------------------------------------------------


================Reducing node 20783, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20783
------------------------------------------------------------


================Reducing node 20782, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20782
------------------------------------------------------------


================Reducing node 20780, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20780
------------------------------------------------------------


================Reducing node 20774, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20774
------------------------------------------------------------


================Reducing node 20773, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20773
------------------------------------------------------------


================Reducing node 20766, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20766
------------------------------------------------------------


================Reducing node 20763, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20763
------------------------------------------------------------


================Reducing node 20744, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20744
------------------------------------------------------------


================Reducing node 20742, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20742
------------------------------------------------------------


================Reducing node 20735, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20735
------------------------------------------------------------


================Reducing node 20733, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20733
------------------------------------------------------------


================Reducing node 20730, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20730
------------------------------------------------------------


================Reducing node 20784, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20784
------------------------------------------------------------


================Reducing node 20788, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20788
------------------------------------------------------------


======Fixpoint iteration 54. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=20726}
|___(+) {id=20727,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20729,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20730,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20784,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=20788,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=20775,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20783,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20777,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20779,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20780,slot_type=LeftParen}
        |           |___Token:) {id=20782,slot_type=RightParen}
        |___compoundStatement {id=20732,slot_type=compoundStatement}
            |___Token:{ {id=20733,slot_type=LeftBrace}
            |___(?) {id=20734,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20737,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20740,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20743,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20744,slot_type=Return}
            |           |   |___(?) {id=20745,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20761,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20764,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=20774,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=20766,slot_type=LeftParen}
            |           |           |   |___Token:float {id=20773,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Float]}
            |           |           |___Token:) {id=20763,slot_type=RightParen}
            |           |___Token:; {id=20742,slot_type=Semi}
            |___Token:} {id=20735,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 55. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=20812}
|___(+) {id=20813,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20815,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20816,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20870,slot_type=declarationSpecifiers}
        |       |___Token:int {id=20874,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=20861,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20869,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20863,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20865,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20866,slot_type=LeftParen}
        |           |___Token:) {id=20868,slot_type=RightParen}
        |___compoundStatement {id=20818,slot_type=compoundStatement}
            |___Token:{ {id=20819,slot_type=LeftBrace}
            |___(?) {id=20820,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20823,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20826,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20829,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20830,slot_type=Return}
            |           |   |___(?) {id=20831,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20847,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20850,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=20860,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=20852,slot_type=LeftParen}
            |           |           |   |___Token:float {id=20859,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Float]}
            |           |           |___Token:) {id=20849,slot_type=RightParen}
            |           |___Token:; {id=20828,slot_type=Semi}
            |___Token:} {id=20821,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 20813, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20813
------------------------------------------------------------


================Reducing node 20815, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20815
------------------------------------------------------------


================Reducing node 20818, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20818
------------------------------------------------------------


================Reducing node 20820, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20820
------------------------------------------------------------


================Reducing node 20823, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20823
------------------------------------------------------------


================Reducing node 20826, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20826
------------------------------------------------------------


================Reducing node 20829, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20829
------------------------------------------------------------


================Reducing node 20831, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20831
------------------------------------------------------------


================Reducing node 20847, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20847
------------------------------------------------------------


================Reducing node 20861, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20861
------------------------------------------------------------


================Reducing node 20850, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20850
------------------------------------------------------------


================Reducing node 20863, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20863
------------------------------------------------------------


================Reducing node 20865, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20865
------------------------------------------------------------


================Reducing node 20869, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20869
------------------------------------------------------------


================Reducing node 20868, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20868
------------------------------------------------------------


================Reducing node 20866, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20866
------------------------------------------------------------


================Reducing node 20860, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20860
------------------------------------------------------------


================Reducing node 20859, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20859
------------------------------------------------------------


================Reducing node 20852, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20852
------------------------------------------------------------


================Reducing node 20849, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20849
------------------------------------------------------------


================Reducing node 20830, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20830
------------------------------------------------------------


================Reducing node 20828, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20828
------------------------------------------------------------


================Reducing node 20821, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20821
------------------------------------------------------------


================Reducing node 20819, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20819
------------------------------------------------------------


================Reducing node 20816, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20816
------------------------------------------------------------


================Reducing node 20870, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20870
------------------------------------------------------------


================Reducing node 20874, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20874
------------------------------------------------------------


======Fixpoint iteration 56. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=20812}
|___(+) {id=20813,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20815,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20816,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=20870,slot_type=declarationSpecifiers}
        |       |___Token:int {id=20874,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=20861,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=20869,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=20863,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=20865,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=20866,slot_type=LeftParen}
        |           |___Token:) {id=20868,slot_type=RightParen}
        |___compoundStatement {id=20818,slot_type=compoundStatement}
            |___Token:{ {id=20819,slot_type=LeftBrace}
            |___(?) {id=20820,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20823,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20826,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20829,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20830,slot_type=Return}
            |           |   |___(?) {id=20831,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20847,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20850,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=20860,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=20852,slot_type=LeftParen}
            |           |           |   |___Token:float {id=20859,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Float]}
            |           |           |___Token:) {id=20849,slot_type=RightParen}
            |           |___Token:; {id=20828,slot_type=Semi}
            |___Token:} {id=20821,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main[]{
        return _Alignof   (float)  ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 57. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=20960}
|___(+) {id=20961,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20963,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20964,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=21018,slot_type=declarationSpecifiers}
        |       |___Token:int {id=21022,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=21009,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=21017,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=21011,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=21013,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=21014,slot_type=LeftParen}
        |           |___Token:) {id=21016,slot_type=RightParen}
        |___compoundStatement {id=20966,slot_type=compoundStatement}
            |___Token:{ {id=20967,slot_type=LeftBrace}
            |___(?) {id=20968,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20971,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20974,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20977,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20978,slot_type=Return}
            |           |   |___(?) {id=20979,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20995,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20998,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=21008,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=21000,slot_type=LeftParen}
            |           |           |   |___Token:double {id=21007,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Double]}
            |           |           |___Token:) {id=20997,slot_type=RightParen}
            |           |___Token:; {id=20976,slot_type=Semi}
            |___Token:} {id=20969,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 20961, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20961
------------------------------------------------------------


================Reducing node 20963, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20963
------------------------------------------------------------


================Reducing node 20966, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20966
------------------------------------------------------------


================Reducing node 20968, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20968
------------------------------------------------------------


================Reducing node 20971, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20971
------------------------------------------------------------


================Reducing node 20974, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20974
------------------------------------------------------------


================Reducing node 20977, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20977
------------------------------------------------------------


================Reducing node 20979, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20979
------------------------------------------------------------


================Reducing node 20995, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20995
------------------------------------------------------------


================Reducing node 21009, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21009
------------------------------------------------------------


================Reducing node 20998, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20998
------------------------------------------------------------


================Reducing node 21011, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21011
------------------------------------------------------------


================Reducing node 21013, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21013
------------------------------------------------------------


================Reducing node 21017, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21017
------------------------------------------------------------


================Reducing node 21016, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21016
------------------------------------------------------------


================Reducing node 21014, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21014
------------------------------------------------------------


================Reducing node 21008, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21008
------------------------------------------------------------


================Reducing node 21007, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21007
------------------------------------------------------------


================Reducing node 21000, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21000
------------------------------------------------------------


================Reducing node 20997, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20997
------------------------------------------------------------


================Reducing node 20978, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20978
------------------------------------------------------------


================Reducing node 20976, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20976
------------------------------------------------------------


================Reducing node 20969, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20969
------------------------------------------------------------


================Reducing node 20967, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20967
------------------------------------------------------------


================Reducing node 20964, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20964
------------------------------------------------------------


================Reducing node 21018, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21018
------------------------------------------------------------


================Reducing node 21022, size=12================

The current best program is the following

    int    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21022
------------------------------------------------------------


======Fixpoint iteration 58. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=20960}
|___(+) {id=20961,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=20963,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=20964,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=21018,slot_type=declarationSpecifiers}
        |       |___Token:int {id=21022,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=21009,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=21017,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=21011,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=21013,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=21014,slot_type=LeftParen}
        |           |___Token:) {id=21016,slot_type=RightParen}
        |___compoundStatement {id=20966,slot_type=compoundStatement}
            |___Token:{ {id=20967,slot_type=LeftBrace}
            |___(?) {id=20968,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=20971,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=20974,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=20977,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=20978,slot_type=Return}
            |           |   |___(?) {id=20979,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=20995,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=20998,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=21008,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=21000,slot_type=LeftParen}
            |           |           |   |___Token:double {id=21007,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Double]}
            |           |           |___Token:) {id=20997,slot_type=RightParen}
            |           |___Token:; {id=20976,slot_type=Semi}
            |___Token:} {id=20969,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 59. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=21050}
|___(+) {id=21051,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=21053,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=21054,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=21108,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=21112,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=21099,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=21107,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=21101,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=21103,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=21104,slot_type=LeftParen}
        |           |___Token:) {id=21106,slot_type=RightParen}
        |___compoundStatement {id=21056,slot_type=compoundStatement}
            |___Token:{ {id=21057,slot_type=LeftBrace}
            |___(?) {id=21058,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=21061,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=21064,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=21067,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=21068,slot_type=Return}
            |           |   |___(?) {id=21069,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=21085,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=21088,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=21098,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=21090,slot_type=LeftParen}
            |           |           |   |___Token:double {id=21097,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Double]}
            |           |           |___Token:) {id=21087,slot_type=RightParen}
            |           |___Token:; {id=21066,slot_type=Semi}
            |___Token:} {id=21059,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 21051, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21051
------------------------------------------------------------


================Reducing node 21053, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21053
------------------------------------------------------------


================Reducing node 21056, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21056
------------------------------------------------------------


================Reducing node 21058, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21058
------------------------------------------------------------


================Reducing node 21061, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21061
------------------------------------------------------------


================Reducing node 21064, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21064
------------------------------------------------------------


================Reducing node 21067, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21067
------------------------------------------------------------


================Reducing node 21069, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21069
------------------------------------------------------------


================Reducing node 21085, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21085
------------------------------------------------------------


================Reducing node 21099, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21099
------------------------------------------------------------


================Reducing node 21088, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21088
------------------------------------------------------------


================Reducing node 21101, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21101
------------------------------------------------------------


================Reducing node 21103, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21103
------------------------------------------------------------


================Reducing node 21107, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21107
------------------------------------------------------------


================Reducing node 21106, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21106
------------------------------------------------------------


================Reducing node 21104, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21104
------------------------------------------------------------


================Reducing node 21098, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21098
------------------------------------------------------------


================Reducing node 21097, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21097
------------------------------------------------------------


================Reducing node 21090, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21090
------------------------------------------------------------


================Reducing node 21087, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21087
------------------------------------------------------------


================Reducing node 21068, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21068
------------------------------------------------------------


================Reducing node 21066, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21066
------------------------------------------------------------


================Reducing node 21059, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21059
------------------------------------------------------------


================Reducing node 21057, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21057
------------------------------------------------------------


================Reducing node 21054, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21054
------------------------------------------------------------


================Reducing node 21108, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21108
------------------------------------------------------------


================Reducing node 21112, size=12================

The current best program is the following

    signed main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21112
------------------------------------------------------------


======Fixpoint iteration 60. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=21050}
|___(+) {id=21051,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=21053,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=21054,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=21108,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=21112,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=21099,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=21107,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=21101,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=21103,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=21104,slot_type=LeftParen}
        |           |___Token:) {id=21106,slot_type=RightParen}
        |___compoundStatement {id=21056,slot_type=compoundStatement}
            |___Token:{ {id=21057,slot_type=LeftBrace}
            |___(?) {id=21058,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=21061,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=21064,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=21067,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=21068,slot_type=Return}
            |           |   |___(?) {id=21069,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=21085,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=21088,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:_Alignof {id=21098,slot_type=[altnt_block__unaryExpression_3,Alignof]}
            |           |           |   |___Token:( {id=21090,slot_type=LeftParen}
            |           |           |   |___Token:double {id=21097,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Double]}
            |           |           |___Token:) {id=21087,slot_type=RightParen}
            |           |___Token:; {id=21066,slot_type=Semi}
            |___Token:} {id=21059,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main[]{
        return _Alignof   (double) ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 61. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=21188}
|___(+) {id=21189,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=21191,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=21192,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=21246,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=21250,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=21237,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=21245,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=21239,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=21241,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=21242,slot_type=LeftParen}
        |           |___Token:) {id=21244,slot_type=RightParen}
        |___compoundStatement {id=21194,slot_type=compoundStatement}
            |___Token:{ {id=21195,slot_type=LeftBrace}
            |___(?) {id=21196,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=21199,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=21202,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=21205,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=21206,slot_type=Return}
            |           |   |___(?) {id=21207,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=21223,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=21226,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=21236,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=21228,slot_type=LeftParen}
            |           |           |   |___Token:double {id=21235,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Double]}
            |           |           |___Token:) {id=21225,slot_type=RightParen}
            |           |___Token:; {id=21204,slot_type=Semi}
            |___Token:} {id=21197,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 21189, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21189
------------------------------------------------------------


================Reducing node 21191, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21191
------------------------------------------------------------


================Reducing node 21194, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21194
------------------------------------------------------------


================Reducing node 21196, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21196
------------------------------------------------------------


================Reducing node 21199, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    signed main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21199
------------------------------------------------------------


================Reducing node 21202, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21202
------------------------------------------------------------


================Reducing node 21205, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21205
------------------------------------------------------------


================Reducing node 21207, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21207
------------------------------------------------------------


================Reducing node 21223, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21223
------------------------------------------------------------


================Reducing node 21237, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    signed main  {
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21237
------------------------------------------------------------


================Reducing node 21226, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21226
------------------------------------------------------------


================Reducing node 21239, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    signed main  {
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21239
------------------------------------------------------------


================Reducing node 21241, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    signed main  {
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21241
------------------------------------------------------------


================Reducing node 21245, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21245
------------------------------------------------------------


================Reducing node 21244, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21244
------------------------------------------------------------


================Reducing node 21242, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21242
------------------------------------------------------------


================Reducing node 21236, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21236
------------------------------------------------------------


================Reducing node 21235, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21235
------------------------------------------------------------


================Reducing node 21228, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21228
------------------------------------------------------------


================Reducing node 21225, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21225
------------------------------------------------------------


================Reducing node 21206, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21206
------------------------------------------------------------


================Reducing node 21204, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21204
------------------------------------------------------------


================Reducing node 21197, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21197
------------------------------------------------------------


================Reducing node 21195, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21195
------------------------------------------------------------


================Reducing node 21192, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21192
------------------------------------------------------------


================Reducing node 21246, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21246
------------------------------------------------------------


================Reducing node 21250, size=12================

The current best program is the following

    signed main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21250
------------------------------------------------------------


======Fixpoint iteration 62. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=21188}
|___(+) {id=21189,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=21191,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=21192,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=21246,slot_type=declarationSpecifiers}
        |       |___Token:signed {id=21250,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Signed]}
        |___directDeclarator {id=21237,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=21245,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=21239,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=21241,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=21242,slot_type=LeftParen}
        |           |___Token:) {id=21244,slot_type=RightParen}
        |___compoundStatement {id=21194,slot_type=compoundStatement}
            |___Token:{ {id=21195,slot_type=LeftBrace}
            |___(?) {id=21196,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=21199,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=21202,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=21205,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=21206,slot_type=Return}
            |           |   |___(?) {id=21207,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=21223,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=21226,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=21236,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=21228,slot_type=LeftParen}
            |           |           |   |___Token:double {id=21235,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Double]}
            |           |           |___Token:) {id=21225,slot_type=RightParen}
            |           |___Token:; {id=21204,slot_type=Semi}
            |___Token:} {id=21197,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    typedefmain(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    extern main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    static main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Thread_local main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    auto   main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    register main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    void   main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    const  main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    inline main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Noreturn main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __inline__ main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __stdcall main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    char   main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    short  main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 63. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=21274}
|___(+) {id=21275,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=21277,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=21278,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=21332,slot_type=declarationSpecifiers}
        |       |___Token:int {id=21336,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=21323,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=21331,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=21325,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=21327,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=21328,slot_type=LeftParen}
        |           |___Token:) {id=21330,slot_type=RightParen}
        |___compoundStatement {id=21280,slot_type=compoundStatement}
            |___Token:{ {id=21281,slot_type=LeftBrace}
            |___(?) {id=21282,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=21285,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=21288,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=21291,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=21292,slot_type=Return}
            |           |   |___(?) {id=21293,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=21309,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=21312,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=21322,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=21314,slot_type=LeftParen}
            |           |           |   |___Token:double {id=21321,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Double]}
            |           |           |___Token:) {id=21311,slot_type=RightParen}
            |           |___Token:; {id=21290,slot_type=Semi}
            |___Token:} {id=21283,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 21275, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21275
------------------------------------------------------------


================Reducing node 21277, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21277
------------------------------------------------------------


================Reducing node 21280, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21280
------------------------------------------------------------


================Reducing node 21282, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21282
------------------------------------------------------------


================Reducing node 21285, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    int    main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21285
------------------------------------------------------------


================Reducing node 21288, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
                                   ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21288
------------------------------------------------------------


================Reducing node 21291, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21291
------------------------------------------------------------


================Reducing node 21293, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21293
------------------------------------------------------------


================Reducing node 21309, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main(){
        return                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21309
------------------------------------------------------------


================Reducing node 21323, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int    main  {
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21323
------------------------------------------------------------


================Reducing node 21312, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21312
------------------------------------------------------------


================Reducing node 21325, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int    main  {
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21325
------------------------------------------------------------


================Reducing node 21327, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int    main  {
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21327
------------------------------------------------------------


================Reducing node 21331, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21331
------------------------------------------------------------


================Reducing node 21330, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21330
------------------------------------------------------------


================Reducing node 21328, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21328
------------------------------------------------------------


================Reducing node 21322, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21322
------------------------------------------------------------


================Reducing node 21321, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21321
------------------------------------------------------------


================Reducing node 21314, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21314
------------------------------------------------------------


================Reducing node 21311, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21311
------------------------------------------------------------


================Reducing node 21292, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21292
------------------------------------------------------------


================Reducing node 21290, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21290
------------------------------------------------------------


================Reducing node 21283, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21283
------------------------------------------------------------


================Reducing node 21281, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21281
------------------------------------------------------------


================Reducing node 21278, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21278
------------------------------------------------------------


================Reducing node 21332, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21332
------------------------------------------------------------


================Reducing node 21336, size=12================

The current best program is the following

    int    main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21336
------------------------------------------------------------


======Fixpoint iteration 64. Reducer: subtree_replacer======

The spar-tree is the following.
translationUnit {id=21274}
|___(+) {id=21275,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=21277,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=21278,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=21332,slot_type=declarationSpecifiers}
        |       |___Token:int {id=21336,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=21323,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=21331,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=21325,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=21327,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=21328,slot_type=LeftParen}
        |           |___Token:) {id=21330,slot_type=RightParen}
        |___compoundStatement {id=21280,slot_type=compoundStatement}
            |___Token:{ {id=21281,slot_type=LeftBrace}
            |___(?) {id=21282,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=21285,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___jumpStatement {id=21288,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=21291,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=21292,slot_type=Return}
            |           |   |___(?) {id=21293,slot_type=optional__postfixExpression_1}
            |           |       |___aux_rule__unaryExpression_8 {id=21309,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_8]}
            |           |           |___aux_rule__unaryExpression_10 {id=21312,slot_type=[altnt_block__unaryExpression_2,aux_rule__unaryExpression_10]}
            |           |           |   |___Token:__alignof__ {id=21322,slot_type=[altnt_block__unaryExpression_3,Alignof_gcc]}
            |           |           |   |___Token:( {id=21314,slot_type=LeftParen}
            |           |           |   |___Token:double {id=21321,slot_type=[altnt_block__unaryExpression_4,typeName,specifierQualifierList,altnt_block__specifierQualifierList_3,typeSpecifierWithAttrList,typeSpecifier,Double]}
            |           |           |___Token:) {id=21311,slot_type=RightParen}
            |           |___Token:; {id=21290,slot_type=Semi}
            |___Token:} {id=21283,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    long   main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    float  main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    double main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    unsigned main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Bool  main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    _Complex main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128 main(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128dmain(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    __m128imain(){
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main[]{
        return __alignof__(double) ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace a node with a node generated by another alternative rule
    int    main(){
        return __alignof__(signed) ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


#test success = 33
#test failure = 878
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 0
#external test execution cache hits = 0
