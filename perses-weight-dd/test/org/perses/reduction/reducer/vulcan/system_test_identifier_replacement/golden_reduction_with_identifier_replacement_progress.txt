=====================Reduction starts.======================

The initial program size is 40
------------------------------------------------------------


=Fixpoint iteration 1. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=257,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=152,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
    |   |___(?) {id=153,slot_type=optional__functionDefinition_2}
    |   |   |___(+) {id=252,slot_type=declarationSpecifiers}
    |   |       |___Token:void {id=256,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
    |   |___directDeclarator {id=229,slot_type=[declarator,directDeclarator]}
    |   |   |___Token:f {id=251,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |   |___(*) {id=231,slot_type=kleene_star__directDeclarator_7}
    |   |       |___aux_rule__directDeclarator_15 {id=233,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |           |___Token:( {id=234,slot_type=LeftParen}
    |   |           |___(+) {id=240,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
    |   |           |   |___Token:int {id=250,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |           |   |___Token:i {id=247,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |           |___Token:) {id=236,slot_type=RightParen}
    |   |___compoundStatement {id=155,slot_type=compoundStatement}
    |       |___Token:{ {id=156,slot_type=LeftBrace}
    |       |___(?) {id=157,slot_type=optional__compoundStatement_1}
    |       |   |___(+) {id=160,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
    |       |       |___expressionStatement {id=163,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
    |       |           |___(?) {id=164,slot_type=optional__postfixExpression_1}
    |       |           |   |___postfixExpression {id=181,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
    |       |           |       |___Token:printf {id=228,slot_type=[aux_rule__postfixExpression_4,Identifier]}
    |       |           |       |___(*) {id=183,slot_type=kleene_star__postfixExpression_2}
    |       |           |           |___aux_rule__postfixExpression_11 {id=185,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
    |       |           |               |___Token:( {id=186,slot_type=LeftParen}
    |       |           |               |___(?) {id=187,slot_type=optional__postfixExpression_1}
    |       |           |               |   |___expression {id=189,slot_type=expression}
    |       |           |               |       |___(+) {id=226,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
    |       |           |               |       |   |___Token:"%d\n" {id=227,slot_type=StringLiteral}
    |       |           |               |       |___(*) {id=191,slot_type=kleene_star__expression_1}
    |       |           |               |           |___aux_rule__expression_2 {id=192,slot_type=aux_rule__expression_2}
    |       |           |               |               |___Token:, {id=193,slot_type=Comma}
    |       |           |               |               |___Token:i {id=210,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
    |       |           |               |___Token:) {id=188,slot_type=RightParen}
    |       |           |___Token:; {id=165,slot_type=Semi}
    |       |___Token:} {id=158,slot_type=RightBrace}
    |___functionDefinition {id=6,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=7,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=147,slot_type=declarationSpecifiers}
        |       |___Token:int {id=151,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=138,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=146,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=140,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=142,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=143,slot_type=LeftParen}
        |           |___Token:) {id=145,slot_type=RightParen}
        |___compoundStatement {id=9,slot_type=compoundStatement}
            |___Token:{ {id=10,slot_type=LeftBrace}
            |___(?) {id=11,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=14,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=103,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=104,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=137,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=105,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=108,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=133,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=110,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=111,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=112,slot_type=Assign}
            |       |   |               |___Token:123 {id=130,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=106,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=67,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=68,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=101,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=69,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=72,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=97,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=74,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=75,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=76,slot_type=Assign}
            |       |   |               |___Token:123 {id=94,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=70,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=45,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=46,slot_type=declarationSpecifiers}
            |       |   |   |___Token:f {id=65,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=47,slot_type=optional__declaration_2}
            |       |   |   |___aux_rule__directDeclarator_16 {id=54,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator,aux_rule__directDeclarator_9,aux_rule__directDeclarator_16]}
            |       |   |       |___Token:( {id=55,slot_type=LeftParen}
            |       |   |       |___Token:b {id=60,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___Token:) {id=57,slot_type=RightParen}
            |       |   |___Token:; {id=48,slot_type=Semi}
            |       |___jumpStatement {id=20,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=23,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=24,slot_type=Return}
            |           |   |___(?) {id=25,slot_type=optional__postfixExpression_1}
            |           |       |___Token:a {id=43,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |___Token:; {id=22,slot_type=Semi}
            |___Token:} {id=12,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    #include <stdio.h>
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    #include <stdio.h>
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 6, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
           ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       int a = 123;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       int b = 123;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       f(b);
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


==================Reducing node 9, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


=================Reducing node 11, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


=================Reducing node 14, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 14
------------------------------------------------------------


=================Reducing node 152, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
                        ;
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 152
------------------------------------------------------------


=================Reducing node 155, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 155
------------------------------------------------------------


=================Reducing node 157, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 157
------------------------------------------------------------


=================Reducing node 160, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 160
------------------------------------------------------------


=================Reducing node 163, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 163
------------------------------------------------------------


=================Reducing node 164, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 164
------------------------------------------------------------


=================Reducing node 181, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
              "%d\n"    ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
              "%d\n", i ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 181
------------------------------------------------------------


=================Reducing node 229, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void       i {
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 229
------------------------------------------------------------


=================Reducing node 183, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 183
------------------------------------------------------------


=================Reducing node 185, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 185
------------------------------------------------------------


=================Reducing node 103, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
                  ;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 103
------------------------------------------------------------


=================Reducing node 67, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
                  ;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 67
------------------------------------------------------------


=================Reducing node 45, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
           ;
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 45
------------------------------------------------------------


=================Reducing node 231, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 231
------------------------------------------------------------


=================Reducing node 233, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 233
------------------------------------------------------------


=================Reducing node 187, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    #include <stdio.h>
    void f(int i){
       printf(         );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 187
------------------------------------------------------------


=================Reducing node 189, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf(         );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf(        i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 189
------------------------------------------------------------


=================Reducing node 138, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 138
------------------------------------------------------------


=================Reducing node 105, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int        ;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 105
------------------------------------------------------------


=================Reducing node 108, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int        ;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a      ;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 108
------------------------------------------------------------


=================Reducing node 69, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int        ;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 69
------------------------------------------------------------


=================Reducing node 72, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int        ;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b      ;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 72
------------------------------------------------------------


=================Reducing node 47, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f   ;
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 47
------------------------------------------------------------


=================Reducing node 54, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f   ;
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f b ;
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 54
------------------------------------------------------------


=================Reducing node 20, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
               ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20
------------------------------------------------------------


=================Reducing node 240, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    #include <stdio.h>
    void f(     ){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]remove whole except first
    #include <stdio.h>
    void f(int  ){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    #include <stdio.h>
    void f(int  ){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    #include <stdio.h>
    void f(    i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 240
------------------------------------------------------------


=================Reducing node 191, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 191
------------------------------------------------------------


=================Reducing node 192, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 192
------------------------------------------------------------


=================Reducing node 140, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 140
------------------------------------------------------------


=================Reducing node 142, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 142
------------------------------------------------------------


=================Reducing node 110, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a      ;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 110
------------------------------------------------------------


=================Reducing node 111, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a      ;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 111
------------------------------------------------------------


=================Reducing node 74, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b      ;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 74
------------------------------------------------------------


=================Reducing node 75, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b      ;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 75
------------------------------------------------------------


=================Reducing node 23, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 23
------------------------------------------------------------


=================Reducing node 257, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 257
------------------------------------------------------------


=================Reducing node 251, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 251
------------------------------------------------------------


=================Reducing node 250, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 250
------------------------------------------------------------


=================Reducing node 247, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 247
------------------------------------------------------------


=================Reducing node 236, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 236
------------------------------------------------------------


=================Reducing node 234, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 234
------------------------------------------------------------


=================Reducing node 228, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 228
------------------------------------------------------------


=================Reducing node 226, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 226
------------------------------------------------------------


=================Reducing node 227, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 227
------------------------------------------------------------


=================Reducing node 210, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 210
------------------------------------------------------------


=================Reducing node 193, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 193
------------------------------------------------------------


=================Reducing node 188, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 188
------------------------------------------------------------


=================Reducing node 186, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 186
------------------------------------------------------------


=================Reducing node 165, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 165
------------------------------------------------------------


=================Reducing node 158, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 158
------------------------------------------------------------


=================Reducing node 156, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 156
------------------------------------------------------------


=================Reducing node 153, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    #include <stdio.h>
         f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 153
------------------------------------------------------------


=================Reducing node 252, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    #include <stdio.h>
         f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 252
------------------------------------------------------------


=================Reducing node 256, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 256
------------------------------------------------------------


=================Reducing node 146, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 146
------------------------------------------------------------


=================Reducing node 145, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 145
------------------------------------------------------------


=================Reducing node 143, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 143
------------------------------------------------------------


=================Reducing node 133, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 133
------------------------------------------------------------


=================Reducing node 130, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 130
------------------------------------------------------------


=================Reducing node 112, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 112
------------------------------------------------------------


=================Reducing node 106, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 106
------------------------------------------------------------


=================Reducing node 104, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 104
------------------------------------------------------------


=================Reducing node 137, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 137
------------------------------------------------------------


=================Reducing node 97, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 97
------------------------------------------------------------


=================Reducing node 94, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 94
------------------------------------------------------------


=================Reducing node 76, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 76
------------------------------------------------------------


=================Reducing node 70, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 70
------------------------------------------------------------


=================Reducing node 68, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 68
------------------------------------------------------------


=================Reducing node 101, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 101
------------------------------------------------------------


=================Reducing node 60, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 60
------------------------------------------------------------


=================Reducing node 57, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 57
------------------------------------------------------------


=================Reducing node 55, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 55
------------------------------------------------------------


=================Reducing node 48, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 48
------------------------------------------------------------


=================Reducing node 46, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 46
------------------------------------------------------------


=================Reducing node 65, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 65
------------------------------------------------------------


=================Reducing node 25, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 25
------------------------------------------------------------


=================Reducing node 43, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 43
------------------------------------------------------------


=================Reducing node 24, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 24
------------------------------------------------------------


=================Reducing node 22, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 22
------------------------------------------------------------


=================Reducing node 12, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 12
------------------------------------------------------------


=================Reducing node 10, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


==================Reducing node 7, size=40==================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
        main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 7
------------------------------------------------------------


=================Reducing node 147, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
        main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 147
------------------------------------------------------------


=================Reducing node 151, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 151
------------------------------------------------------------


=======Fixpoint iteration 2. Reducer: token_replacer========

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=257,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=152,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
    |   |___(?) {id=153,slot_type=optional__functionDefinition_2}
    |   |   |___(+) {id=252,slot_type=declarationSpecifiers}
    |   |       |___Token:void {id=256,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
    |   |___directDeclarator {id=229,slot_type=[declarator,directDeclarator]}
    |   |   |___Token:f {id=251,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |   |___(*) {id=231,slot_type=kleene_star__directDeclarator_7}
    |   |       |___aux_rule__directDeclarator_15 {id=233,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |           |___Token:( {id=234,slot_type=LeftParen}
    |   |           |___(+) {id=240,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
    |   |           |   |___Token:int {id=250,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |           |   |___Token:i {id=247,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |           |___Token:) {id=236,slot_type=RightParen}
    |   |___compoundStatement {id=155,slot_type=compoundStatement}
    |       |___Token:{ {id=156,slot_type=LeftBrace}
    |       |___(?) {id=157,slot_type=optional__compoundStatement_1}
    |       |   |___(+) {id=160,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
    |       |       |___expressionStatement {id=163,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
    |       |           |___(?) {id=164,slot_type=optional__postfixExpression_1}
    |       |           |   |___postfixExpression {id=181,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
    |       |           |       |___Token:printf {id=228,slot_type=[aux_rule__postfixExpression_4,Identifier]}
    |       |           |       |___(*) {id=183,slot_type=kleene_star__postfixExpression_2}
    |       |           |           |___aux_rule__postfixExpression_11 {id=185,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
    |       |           |               |___Token:( {id=186,slot_type=LeftParen}
    |       |           |               |___(?) {id=187,slot_type=optional__postfixExpression_1}
    |       |           |               |   |___expression {id=189,slot_type=expression}
    |       |           |               |       |___(+) {id=226,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
    |       |           |               |       |   |___Token:"%d\n" {id=227,slot_type=StringLiteral}
    |       |           |               |       |___(*) {id=191,slot_type=kleene_star__expression_1}
    |       |           |               |           |___aux_rule__expression_2 {id=192,slot_type=aux_rule__expression_2}
    |       |           |               |               |___Token:, {id=193,slot_type=Comma}
    |       |           |               |               |___Token:i {id=210,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
    |       |           |               |___Token:) {id=188,slot_type=RightParen}
    |       |           |___Token:; {id=165,slot_type=Semi}
    |       |___Token:} {id=158,slot_type=RightBrace}
    |___functionDefinition {id=6,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=7,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=147,slot_type=declarationSpecifiers}
        |       |___Token:int {id=151,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=138,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=146,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=140,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=142,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=143,slot_type=LeftParen}
        |           |___Token:) {id=145,slot_type=RightParen}
        |___compoundStatement {id=9,slot_type=compoundStatement}
            |___Token:{ {id=10,slot_type=LeftBrace}
            |___(?) {id=11,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=14,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=103,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=104,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=137,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=105,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=108,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=133,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=110,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=111,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=112,slot_type=Assign}
            |       |   |               |___Token:123 {id=130,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=106,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=67,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=68,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=101,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=69,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=72,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=97,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=74,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=75,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=76,slot_type=Assign}
            |       |   |               |___Token:123 {id=94,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=70,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=45,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=46,slot_type=declarationSpecifiers}
            |       |   |   |___Token:f {id=65,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=47,slot_type=optional__declaration_2}
            |       |   |   |___aux_rule__directDeclarator_16 {id=54,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator,aux_rule__directDeclarator_9,aux_rule__directDeclarator_16]}
            |       |   |       |___Token:( {id=55,slot_type=LeftParen}
            |       |   |       |___Token:b {id=60,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___Token:) {id=57,slot_type=RightParen}
            |       |   |___Token:; {id=48,slot_type=Semi}
            |       |___jumpStatement {id=20,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=23,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=24,slot_type=Return}
            |           |   |___(?) {id=25,slot_type=optional__postfixExpression_1}
            |           |       |___Token:a {id=43,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |___Token:; {id=22,slot_type=Semi}
            |___Token:} {id=12,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return i;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return f;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 3. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=261}
|___(+) {id=262,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=517,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=412,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
    |   |___(?) {id=413,slot_type=optional__functionDefinition_2}
    |   |   |___(+) {id=512,slot_type=declarationSpecifiers}
    |   |       |___Token:void {id=516,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
    |   |___directDeclarator {id=489,slot_type=[declarator,directDeclarator]}
    |   |   |___Token:f {id=511,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |   |___(*) {id=491,slot_type=kleene_star__directDeclarator_7}
    |   |       |___aux_rule__directDeclarator_15 {id=493,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |           |___Token:( {id=494,slot_type=LeftParen}
    |   |           |___(+) {id=500,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
    |   |           |   |___Token:int {id=510,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |           |   |___Token:i {id=507,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |           |___Token:) {id=496,slot_type=RightParen}
    |   |___compoundStatement {id=415,slot_type=compoundStatement}
    |       |___Token:{ {id=416,slot_type=LeftBrace}
    |       |___(?) {id=417,slot_type=optional__compoundStatement_1}
    |       |   |___(+) {id=420,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
    |       |       |___expressionStatement {id=423,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
    |       |           |___(?) {id=424,slot_type=optional__postfixExpression_1}
    |       |           |   |___postfixExpression {id=441,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
    |       |           |       |___Token:printf {id=488,slot_type=[aux_rule__postfixExpression_4,Identifier]}
    |       |           |       |___(*) {id=443,slot_type=kleene_star__postfixExpression_2}
    |       |           |           |___aux_rule__postfixExpression_11 {id=445,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
    |       |           |               |___Token:( {id=446,slot_type=LeftParen}
    |       |           |               |___(?) {id=447,slot_type=optional__postfixExpression_1}
    |       |           |               |   |___expression {id=449,slot_type=expression}
    |       |           |               |       |___(+) {id=486,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
    |       |           |               |       |   |___Token:"%d\n" {id=487,slot_type=StringLiteral}
    |       |           |               |       |___(*) {id=451,slot_type=kleene_star__expression_1}
    |       |           |               |           |___aux_rule__expression_2 {id=452,slot_type=aux_rule__expression_2}
    |       |           |               |               |___Token:, {id=453,slot_type=Comma}
    |       |           |               |               |___Token:i {id=470,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
    |       |           |               |___Token:) {id=448,slot_type=RightParen}
    |       |           |___Token:; {id=425,slot_type=Semi}
    |       |___Token:} {id=418,slot_type=RightBrace}
    |___functionDefinition {id=266,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=267,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=407,slot_type=declarationSpecifiers}
        |       |___Token:int {id=411,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=398,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=406,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=400,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=402,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=403,slot_type=LeftParen}
        |           |___Token:) {id=405,slot_type=RightParen}
        |___compoundStatement {id=269,slot_type=compoundStatement}
            |___Token:{ {id=270,slot_type=LeftBrace}
            |___(?) {id=271,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=274,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=363,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=364,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=397,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=365,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=368,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=393,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=370,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=371,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=372,slot_type=Assign}
            |       |   |               |___Token:123 {id=390,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=366,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=327,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=328,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=361,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=329,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=332,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=357,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=334,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=335,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=336,slot_type=Assign}
            |       |   |               |___Token:123 {id=354,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=330,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=305,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=306,slot_type=declarationSpecifiers}
            |       |   |   |___Token:f {id=325,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=307,slot_type=optional__declaration_2}
            |       |   |   |___aux_rule__directDeclarator_16 {id=314,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator,aux_rule__directDeclarator_9,aux_rule__directDeclarator_16]}
            |       |   |       |___Token:( {id=315,slot_type=LeftParen}
            |       |   |       |___Token:b {id=320,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___Token:) {id=317,slot_type=RightParen}
            |       |   |___Token:; {id=308,slot_type=Semi}
            |       |___jumpStatement {id=280,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=283,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=284,slot_type=Return}
            |           |   |___(?) {id=285,slot_type=optional__postfixExpression_1}
            |           |       |___Token:b {id=303,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |___Token:; {id=282,slot_type=Semi}
            |___Token:} {id=272,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 262, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    #include <stdio.h>
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    #include <stdio.h>
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 262
------------------------------------------------------------


=================Reducing node 266, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
           ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       int a = 123;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       int b = 123;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       f(b);
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 266
------------------------------------------------------------


=================Reducing node 269, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 269
------------------------------------------------------------


=================Reducing node 271, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 271
------------------------------------------------------------


=================Reducing node 274, size=40=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 274 from 40 to 35
------------------------------------------------------------


=================Reducing node 412, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
                        ;
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 412
------------------------------------------------------------


=================Reducing node 415, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 415
------------------------------------------------------------


=================Reducing node 417, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 417
------------------------------------------------------------


=================Reducing node 420, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 420
------------------------------------------------------------


=================Reducing node 423, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 423
------------------------------------------------------------


=================Reducing node 424, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 424
------------------------------------------------------------


=================Reducing node 441, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
              "%d\n"    ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
              "%d\n", i ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 441
------------------------------------------------------------


=================Reducing node 489, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void       i {
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 489
------------------------------------------------------------


=================Reducing node 443, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 443
------------------------------------------------------------


=================Reducing node 445, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 445
------------------------------------------------------------


=================Reducing node 327, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
                  ;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 327
------------------------------------------------------------


=================Reducing node 305, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
           ;
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 305
------------------------------------------------------------


=================Reducing node 491, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 491
------------------------------------------------------------


=================Reducing node 493, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 493
------------------------------------------------------------


=================Reducing node 447, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    #include <stdio.h>
    void f(int i){
       printf(         );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 447
------------------------------------------------------------


=================Reducing node 449, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf(         );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf(        i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 449
------------------------------------------------------------


=================Reducing node 398, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 398
------------------------------------------------------------


=================Reducing node 329, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int        ;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 329
------------------------------------------------------------


=================Reducing node 332, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int        ;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b      ;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 332
------------------------------------------------------------


=================Reducing node 307, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f   ;
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 307
------------------------------------------------------------


=================Reducing node 314, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f   ;
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f b ;
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 314
------------------------------------------------------------


=================Reducing node 280, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
               ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 280
------------------------------------------------------------


=================Reducing node 500, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    #include <stdio.h>
    void f(     ){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]remove whole except first
    #include <stdio.h>
    void f(int  ){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    #include <stdio.h>
    void f(int  ){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    #include <stdio.h>
    void f(    i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 500
------------------------------------------------------------


=================Reducing node 451, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 451
------------------------------------------------------------


=================Reducing node 452, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 452
------------------------------------------------------------


=================Reducing node 400, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 400
------------------------------------------------------------


=================Reducing node 402, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 402
------------------------------------------------------------


=================Reducing node 334, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b      ;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 334
------------------------------------------------------------


=================Reducing node 335, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b      ;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 335
------------------------------------------------------------


=================Reducing node 283, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 283
------------------------------------------------------------


=================Reducing node 517, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 517
------------------------------------------------------------


=================Reducing node 511, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 511
------------------------------------------------------------


=================Reducing node 510, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 510
------------------------------------------------------------


=================Reducing node 507, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 507
------------------------------------------------------------


=================Reducing node 496, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 496
------------------------------------------------------------


=================Reducing node 494, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 494
------------------------------------------------------------


=================Reducing node 488, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 488
------------------------------------------------------------


=================Reducing node 486, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 486
------------------------------------------------------------


=================Reducing node 487, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 487
------------------------------------------------------------


=================Reducing node 470, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 470
------------------------------------------------------------


=================Reducing node 453, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 453
------------------------------------------------------------


=================Reducing node 448, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 448
------------------------------------------------------------


=================Reducing node 446, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 446
------------------------------------------------------------


=================Reducing node 425, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 425
------------------------------------------------------------


=================Reducing node 418, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 418
------------------------------------------------------------


=================Reducing node 416, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 416
------------------------------------------------------------


=================Reducing node 413, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    #include <stdio.h>
         f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 413
------------------------------------------------------------


=================Reducing node 512, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    #include <stdio.h>
         f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 512
------------------------------------------------------------


=================Reducing node 516, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 516
------------------------------------------------------------


=================Reducing node 406, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 406
------------------------------------------------------------


=================Reducing node 405, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 405
------------------------------------------------------------


=================Reducing node 403, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 403
------------------------------------------------------------


=================Reducing node 357, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 357
------------------------------------------------------------


=================Reducing node 354, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 354
------------------------------------------------------------


=================Reducing node 336, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 336
------------------------------------------------------------


=================Reducing node 330, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 330
------------------------------------------------------------


=================Reducing node 328, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 328
------------------------------------------------------------


=================Reducing node 361, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 361
------------------------------------------------------------


=================Reducing node 320, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 320
------------------------------------------------------------


=================Reducing node 317, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 317
------------------------------------------------------------


=================Reducing node 315, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 315
------------------------------------------------------------


=================Reducing node 308, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 308
------------------------------------------------------------


=================Reducing node 306, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 306
------------------------------------------------------------


=================Reducing node 325, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 325
------------------------------------------------------------


=================Reducing node 285, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 285
------------------------------------------------------------


=================Reducing node 303, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 303
------------------------------------------------------------


=================Reducing node 284, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 284
------------------------------------------------------------


=================Reducing node 282, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 282
------------------------------------------------------------


=================Reducing node 272, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 272
------------------------------------------------------------


=================Reducing node 270, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 270
------------------------------------------------------------


=================Reducing node 267, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
        main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 267
------------------------------------------------------------


=================Reducing node 407, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
        main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 407
------------------------------------------------------------


=================Reducing node 411, size=35=================

The current best program is the following

    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 411
------------------------------------------------------------


=======Fixpoint iteration 4. Reducer: token_replacer========

The spar-tree is the following.
translationUnit {id=261}
|___(+) {id=262,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=517,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=412,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
    |   |___(?) {id=413,slot_type=optional__functionDefinition_2}
    |   |   |___(+) {id=512,slot_type=declarationSpecifiers}
    |   |       |___Token:void {id=516,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
    |   |___directDeclarator {id=489,slot_type=[declarator,directDeclarator]}
    |   |   |___Token:f {id=511,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |   |___(*) {id=491,slot_type=kleene_star__directDeclarator_7}
    |   |       |___aux_rule__directDeclarator_15 {id=493,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |           |___Token:( {id=494,slot_type=LeftParen}
    |   |           |___(+) {id=500,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
    |   |           |   |___Token:int {id=510,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |           |   |___Token:i {id=507,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |           |___Token:) {id=496,slot_type=RightParen}
    |   |___compoundStatement {id=415,slot_type=compoundStatement}
    |       |___Token:{ {id=416,slot_type=LeftBrace}
    |       |___(?) {id=417,slot_type=optional__compoundStatement_1}
    |       |   |___(+) {id=420,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
    |       |       |___expressionStatement {id=423,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
    |       |           |___(?) {id=424,slot_type=optional__postfixExpression_1}
    |       |           |   |___postfixExpression {id=441,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
    |       |           |       |___Token:printf {id=488,slot_type=[aux_rule__postfixExpression_4,Identifier]}
    |       |           |       |___(*) {id=443,slot_type=kleene_star__postfixExpression_2}
    |       |           |           |___aux_rule__postfixExpression_11 {id=445,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
    |       |           |               |___Token:( {id=446,slot_type=LeftParen}
    |       |           |               |___(?) {id=447,slot_type=optional__postfixExpression_1}
    |       |           |               |   |___expression {id=449,slot_type=expression}
    |       |           |               |       |___(+) {id=486,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
    |       |           |               |       |   |___Token:"%d\n" {id=487,slot_type=StringLiteral}
    |       |           |               |       |___(*) {id=451,slot_type=kleene_star__expression_1}
    |       |           |               |           |___aux_rule__expression_2 {id=452,slot_type=aux_rule__expression_2}
    |       |           |               |               |___Token:, {id=453,slot_type=Comma}
    |       |           |               |               |___Token:i {id=470,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
    |       |           |               |___Token:) {id=448,slot_type=RightParen}
    |       |           |___Token:; {id=425,slot_type=Semi}
    |       |___Token:} {id=418,slot_type=RightBrace}
    |___functionDefinition {id=266,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=267,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=407,slot_type=declarationSpecifiers}
        |       |___Token:int {id=411,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=398,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=406,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=400,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=402,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=403,slot_type=LeftParen}
        |           |___Token:) {id=405,slot_type=RightParen}
        |___compoundStatement {id=269,slot_type=compoundStatement}
            |___Token:{ {id=270,slot_type=LeftBrace}
            |___(?) {id=271,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=274,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=327,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=328,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=361,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=329,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=332,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=357,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=334,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=335,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=336,slot_type=Assign}
            |       |   |               |___Token:123 {id=354,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=330,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=305,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=306,slot_type=declarationSpecifiers}
            |       |   |   |___Token:f {id=325,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=307,slot_type=optional__declaration_2}
            |       |   |   |___aux_rule__directDeclarator_16 {id=314,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator,aux_rule__directDeclarator_9,aux_rule__directDeclarator_16]}
            |       |   |       |___Token:( {id=315,slot_type=LeftParen}
            |       |   |       |___Token:b {id=320,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___Token:) {id=317,slot_type=RightParen}
            |       |   |___Token:; {id=308,slot_type=Semi}
            |       |___jumpStatement {id=280,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=283,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=284,slot_type=Return}
            |           |   |___(?) {id=285,slot_type=optional__postfixExpression_1}
            |           |       |___Token:b {id=303,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |___Token:; {id=282,slot_type=Semi}
            |___Token:} {id=272,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       b(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       i(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       printf(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       main(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", b);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", f);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", printf);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", main);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 2 lexer nodes with new lexeme 'i'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(i);
       return i;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 2 lexer nodes with new lexeme 'f'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(f);
       return f;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 2 lexer nodes with new lexeme 'printf'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(printf);
       return printf;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 2 lexer nodes with new lexeme 'main'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(main);
       return main;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int b   () {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int i   () {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int f   () {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int printf(){
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    #include <stdio.h>
    void f(int i){
       b     ("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    #include <stdio.h>
    void f(int i){
       i     ("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    #include <stdio.h>
    void f(int i){
       f     ("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    #include <stdio.h>
    void f(int i){
       main  ("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    #include <stdio.h>
    void b(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    #include <stdio.h>
    void i(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    #include <stdio.h>
    void printf(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    #include <stdio.h>
    void main(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    #include <stdio.h>
    void f(int b){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    #include <stdio.h>
    void f(int f){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    #include <stdio.h>
    void f(int printf){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    #include <stdio.h>
    void f(int main){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int i = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int f = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int printf=123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int main=123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(i);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(f);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(printf);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(main);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return i;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return f;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return printf;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return main;
    }
------------------------------------------------------------


#test success = 2
#test failure = 194
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 0
#external test execution cache hits = 0
