=====================Reduction starts.======================

The initial program size is 54
------------------------------------------------------------


=Fixpoint iteration 1. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___aux_rule__declaration_3 {id=336,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=337,slot_type=declarationSpecifiers}
    |   |   |___Token:int {id=377,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |___(?) {id=338,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=343,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:printf {id=373,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=345,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_15 {id=347,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |               |___Token:( {id=348,slot_type=LeftParen}
    |   |               |___parameterTypeList {id=351,slot_type=[altnt_block__directDeclarator_11,parameterTypeList]}
    |   |               |   |___parameterDeclaration {id=357,slot_type=[parameterList,parameterDeclaration]}
    |   |               |   |   |___(+) {id=358,slot_type=declarationSpecifiers}
    |   |               |   |   |   |___Token:const {id=372,slot_type=[declarationSpecifier,typeQualifier,Const]}
    |   |               |   |   |   |___Token:char {id=370,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Char]}
    |   |               |   |   |___(?) {id=360,slot_type=[altnt_block__parameterDeclaration_2,optional__typeName_1]}
    |   |               |   |       |___Token:* {id=365,slot_type=[abstractDeclarator,pointer,altnt_block__pointer_8,Star]}
    |   |               |   |___(?) {id=353,slot_type=optional__parameterTypeList_2}
    |   |               |       |___aux_rule__parameterTypeList_1 {id=354,slot_type=aux_rule__parameterTypeList_1}
    |   |               |           |___Token:, {id=355,slot_type=Comma}
    |   |               |           |___Token:... {id=356,slot_type=Ellipsis}
    |   |               |___Token:) {id=350,slot_type=RightParen}
    |   |___Token:; {id=339,slot_type=Semi}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=330,slot_type=declarationSpecifiers}
        |       |___Token:int {id=334,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=280,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=329,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=282,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=284,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=285,slot_type=LeftParen}
        |           |___parameterList {id=289,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList]}
        |           |   |___(+) {id=318,slot_type=[parameterDeclaration,declarationSpecifiers]}
        |           |   |   |___Token:int {id=328,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |           |   |   |___Token:argc {id=325,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
        |           |   |___(*) {id=291,slot_type=kleene_star__parameterList_1}
        |           |       |___aux_rule__parameterList_2 {id=292,slot_type=aux_rule__parameterList_2}
        |           |           |___Token:, {id=293,slot_type=Comma}
        |           |           |___parameterDeclaration {id=294,slot_type=parameterDeclaration}
        |           |               |___(+) {id=295,slot_type=declarationSpecifiers}
        |           |               |   |___Token:char {id=317,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Char]}
        |           |               |___declarator {id=297,slot_type=[altnt_block__parameterDeclaration_2,declarator]}
        |           |                   |___(?) {id=298,slot_type=optional__declarator_1}
        |           |                   |   |___Token:* {id=313,slot_type=[pointer,altnt_block__pointer_8,Star]}
        |           |                   |___directDeclarator {id=299,slot_type=directDeclarator}
        |           |                       |___Token:argv {id=309,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |           |                       |___(*) {id=301,slot_type=kleene_star__directDeclarator_7}
        |           |                           |___aux_rule__directDeclarator_14 {id=303,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_14]}
        |           |                               |___Token:[ {id=304,slot_type=LeftBracket}
        |           |                               |___Token:] {id=306,slot_type=RightBracket}
        |           |___Token:) {id=287,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=245,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=246,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=279,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=247,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=250,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=275,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=252,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=253,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=254,slot_type=Assign}
            |       |   |               |___Token:1 {id=272,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=248,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=111,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=112,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=243,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=113,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=116,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=239,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=118,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=119,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=120,slot_type=Assign}
            |       |   |               |___aux_rule__postfixExpression_13 {id=138,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,aux_rule__postfixExpression_13]}
            |       |   |                   |___aux_rule__primaryExpression_4 {id=141,slot_type=[altnt_block__primaryExpression_3,aux_rule__primaryExpression_4]}
            |       |   |                   |   |___Token:( {id=142,slot_type=LeftParen}
            |       |   |                   |   |___aux_rule__postfixExpression_13 {id=160,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,aux_rule__postfixExpression_13]}
            |       |   |                   |       |___aux_rule__primaryExpression_4 {id=163,slot_type=[altnt_block__primaryExpression_3,aux_rule__primaryExpression_4]}
            |       |   |                   |       |   |___Token:( {id=164,slot_type=LeftParen}
            |       |   |                   |       |   |___additiveExpression {id=176,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |                   |       |       |___aux_rule__postfixExpression_13 {id=192,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,aux_rule__postfixExpression_13]}
            |       |   |                   |       |       |   |___aux_rule__primaryExpression_4 {id=195,slot_type=[altnt_block__primaryExpression_3,aux_rule__primaryExpression_4]}
            |       |   |                   |       |       |   |   |___Token:( {id=196,slot_type=LeftParen}
            |       |   |                   |       |       |   |   |___aux_rule__postfixExpression_13 {id=214,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,aux_rule__postfixExpression_13]}
            |       |   |                   |       |       |   |       |___aux_rule__primaryExpression_4 {id=217,slot_type=[altnt_block__primaryExpression_3,aux_rule__primaryExpression_4]}
            |       |   |                   |       |       |   |       |   |___Token:( {id=218,slot_type=LeftParen}
            |       |   |                   |       |       |   |       |   |___Token:a {id=236,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |                   |       |       |   |       |___Token:) {id=216,slot_type=RightParen}
            |       |   |                   |       |       |   |___Token:) {id=194,slot_type=RightParen}
            |       |   |                   |       |       |___(*) {id=178,slot_type=kleene_star__additiveExpression_1}
            |       |   |                   |       |           |___aux_rule__additiveExpression_2 {id=179,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |       |               |___Token:+ {id=187,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |       |               |___Token:1 {id=186,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |                   |       |___Token:) {id=162,slot_type=RightParen}
            |       |   |                   |___Token:) {id=140,slot_type=RightParen}
            |       |   |___Token:; {id=114,slot_type=Semi}
            |       |___expressionStatement {id=44,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
            |       |   |___(?) {id=45,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=62,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
            |       |   |       |___Token:printf {id=109,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=64,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=66,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=67,slot_type=LeftParen}
            |       |   |               |___(?) {id=68,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___expression {id=70,slot_type=expression}
            |       |   |               |       |___(+) {id=107,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |   |___Token:"b=%d\n" {id=108,slot_type=StringLiteral}
            |       |   |               |       |___(*) {id=72,slot_type=kleene_star__expression_1}
            |       |   |               |           |___aux_rule__expression_2 {id=73,slot_type=aux_rule__expression_2}
            |       |   |               |               |___Token:, {id=74,slot_type=Comma}
            |       |   |               |               |___Token:b {id=91,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |               |___Token:) {id=69,slot_type=RightParen}
            |       |   |___Token:; {id=46,slot_type=Semi}
            |       |___jumpStatement {id=19,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=22,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=23,slot_type=Return}
            |           |   |___(?) {id=24,slot_type=optional__postfixExpression_1}
            |           |       |___Token:0 {id=42,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=21,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=54==================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    int printf(const char*, ...);
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 5, size=54==================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
      return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
      int a = 1;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
      int b = ((      ((a)) + 1  ));
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


==================Reducing node 8, size=54==================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


=================Reducing node 10, size=54==================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


=================Reducing node 13, size=54==================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
      return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=13}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

1 entries are removed: 8 --> 7.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 12
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 13 from 54 to 51
------------------------------------------------------------


=================Reducing node 111, size=51=================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=111}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
                                   ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 111
------------------------------------------------------------


=================Reducing node 113, size=51=================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int                          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 113
------------------------------------------------------------


=================Reducing node 116, size=51=================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=116}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b                        ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 116
------------------------------------------------------------


=================Reducing node 118, size=51=================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b                        ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 118
------------------------------------------------------------


=================Reducing node 119, size=51=================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=119}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 119
------------------------------------------------------------


=================Reducing node 280, size=51=================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int main                          {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int           argc                {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 280
------------------------------------------------------------


=================Reducing node 138, size=51=================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a))        ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =  (      ((a)) + 1  ) ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

5 entries are removed: 16 --> 11.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 13
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 138 from 51 to 47
------------------------------------------------------------


=================Reducing node 336, size=47=================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 336
------------------------------------------------------------


=================Reducing node 282, size=47=================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int printf(const char*, ...);
    int main                          {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 282
------------------------------------------------------------


=================Reducing node 284, size=47=================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=284}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 284
------------------------------------------------------------


=================Reducing node 338, size=47=================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    int                         ;
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 338
------------------------------------------------------------


=================Reducing node 343, size=47=================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=343}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf                  ;
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 343
------------------------------------------------------------


=================Reducing node 289, size=47=================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular_node]can be epsilon
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int printf(const char*, ...);
    int main (int                   ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int printf(const char*, ...);
    int main (    argc              ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int printf(const char*, ...);
    int main (          char        ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int printf(const char*, ...);
    int main (int argc              ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int printf(const char*, ...);
    int main (          char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

12 entries are removed: 16 --> 4.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 12
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 289 from 47 to 39
------------------------------------------------------------


=================Reducing node 345, size=39=================

The current best program is the following

    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    int printf                  ;
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 345
------------------------------------------------------------


=================Reducing node 347, size=39=================

The current best program is the following

    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=347}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 347
------------------------------------------------------------


=================Reducing node 176, size=39=================

The current best program is the following

    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =                 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =           a          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =          (a)         ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a))        ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 176
------------------------------------------------------------


=================Reducing node 44, size=39==================

The current best program is the following

    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
                         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 44
------------------------------------------------------------


=================Reducing node 45, size=39==================

The current best program is the following

    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
                         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 45
------------------------------------------------------------


=================Reducing node 62, size=39==================

The current best program is the following

    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=62}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf             ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
             "b=%d\n"    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
             "b=%d\n", b ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 62
------------------------------------------------------------


=================Reducing node 351, size=39=================

The current best program is the following

    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular_node]can be epsilon
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int printf(const           );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int printf(      char      );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int printf(const char      );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int printf(const char*     );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

13 entries are removed: 14 --> 1.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 16
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 351 from 39 to 34
------------------------------------------------------------


=================Reducing node 245, size=34=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int printf(                );
    int main (                      ) {
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main (                      ) {
               ;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 245
------------------------------------------------------------


=================Reducing node 192, size=34=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =          (a)  + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

3 entries are removed: 3 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 4
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 192 from 34 to 30
------------------------------------------------------------


=================Reducing node 64, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf             ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 64
------------------------------------------------------------


=================Reducing node 66, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=66}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 66
------------------------------------------------------------


=================Reducing node 247, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    int printf(                );
    int main (                      ) {
      int      ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 247
------------------------------------------------------------


=================Reducing node 250, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=250}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main (                      ) {
      int a    ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 250
------------------------------------------------------------


=================Reducing node 68, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf(           );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 68
------------------------------------------------------------


=================Reducing node 70, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=70}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf(          b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 70
------------------------------------------------------------


=================Reducing node 252, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a    ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 252
------------------------------------------------------------


=================Reducing node 253, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=253}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 253
------------------------------------------------------------


=================Reducing node 178, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 178
------------------------------------------------------------


=================Reducing node 179, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=179}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 179
------------------------------------------------------------


=================Reducing node 72, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n"   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 72
------------------------------------------------------------


=================Reducing node 73, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=73}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 73
------------------------------------------------------------


=================Reducing node 373, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 373
------------------------------------------------------------


=================Reducing node 350, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 350
------------------------------------------------------------


=================Reducing node 348, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 348
------------------------------------------------------------


=================Reducing node 339, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 339
------------------------------------------------------------


=================Reducing node 337, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 337
------------------------------------------------------------


=================Reducing node 377, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 377
------------------------------------------------------------


=================Reducing node 329, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 329
------------------------------------------------------------


=================Reducing node 287, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 287
------------------------------------------------------------


=================Reducing node 285, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 285
------------------------------------------------------------


=================Reducing node 275, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 275
------------------------------------------------------------


=================Reducing node 272, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 272
------------------------------------------------------------


=================Reducing node 254, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 254
------------------------------------------------------------


=================Reducing node 248, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 248
------------------------------------------------------------


=================Reducing node 246, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 246
------------------------------------------------------------


=================Reducing node 279, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 279
------------------------------------------------------------


=================Reducing node 239, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 239
------------------------------------------------------------


=================Reducing node 236, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 236
------------------------------------------------------------


=================Reducing node 187, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 187
------------------------------------------------------------


=================Reducing node 186, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 186
------------------------------------------------------------


=================Reducing node 120, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 120
------------------------------------------------------------


=================Reducing node 114, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 114
------------------------------------------------------------


=================Reducing node 112, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 112
------------------------------------------------------------


=================Reducing node 243, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 243
------------------------------------------------------------


=================Reducing node 109, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 109
------------------------------------------------------------


=================Reducing node 107, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 107
------------------------------------------------------------


=================Reducing node 108, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 108
------------------------------------------------------------


=================Reducing node 91, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 91
------------------------------------------------------------


=================Reducing node 74, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 74
------------------------------------------------------------


=================Reducing node 69, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 69
------------------------------------------------------------


=================Reducing node 67, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 67
------------------------------------------------------------


=================Reducing node 46, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 46
------------------------------------------------------------


=================Reducing node 11, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


==================Reducing node 9, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


==================Reducing node 6, size=30==================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    int printf(                );
        main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


=================Reducing node 330, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=330}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 330
------------------------------------------------------------


=================Reducing node 334, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 334
------------------------------------------------------------


=Fixpoint iteration 2. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=378}
|___(+) {id=379,slot_type=kleene_plus__translationUnit_3}
    |___aux_rule__declaration_3 {id=558,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=559,slot_type=declarationSpecifiers}
    |   |   |___Token:int {id=577,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |___(?) {id=560,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=565,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:printf {id=573,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=567,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_15 {id=569,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |               |___Token:( {id=570,slot_type=LeftParen}
    |   |               |___Token:) {id=572,slot_type=RightParen}
    |   |___Token:; {id=561,slot_type=Semi}
    |___functionDefinition {id=382,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=383,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=552,slot_type=declarationSpecifiers}
        |       |___Token:int {id=556,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=543,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=551,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=545,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=547,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=548,slot_type=LeftParen}
        |           |___Token:) {id=550,slot_type=RightParen}
        |___compoundStatement {id=385,slot_type=compoundStatement}
            |___Token:{ {id=386,slot_type=LeftBrace}
            |___(?) {id=387,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=390,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=508,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=509,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=542,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=510,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=513,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=538,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=515,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=516,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=517,slot_type=Assign}
            |       |   |               |___Token:1 {id=535,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=511,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=462,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=463,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=506,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=464,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=467,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=502,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=469,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=470,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=471,slot_type=Assign}
            |       |   |               |___additiveExpression {id=483,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |                   |___Token:a {id=499,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |                   |___(*) {id=485,slot_type=kleene_star__additiveExpression_1}
            |       |   |                       |___aux_rule__additiveExpression_2 {id=486,slot_type=aux_rule__additiveExpression_2}
            |       |   |                           |___Token:+ {id=494,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                           |___Token:1 {id=493,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=465,slot_type=Semi}
            |       |___expressionStatement {id=395,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
            |           |___(?) {id=396,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=413,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
            |           |       |___Token:printf {id=460,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=415,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=417,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=418,slot_type=LeftParen}
            |           |               |___(?) {id=419,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=421,slot_type=expression}
            |           |               |       |___(+) {id=458,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"b=%d\n" {id=459,slot_type=StringLiteral}
            |           |               |       |___(*) {id=423,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=424,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=425,slot_type=Comma}
            |           |               |               |___Token:b {id=442,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=420,slot_type=RightParen}
            |           |___Token:; {id=397,slot_type=Semi}
            |___Token:} {id=388,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 379, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    int printf(                );
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=382}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 379
------------------------------------------------------------


=================Reducing node 382, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=382}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
      int a = 1;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
      int b =           a   + 1    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 382
------------------------------------------------------------


=================Reducing node 385, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 385
------------------------------------------------------------


=================Reducing node 387, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    int printf(                );
    int main (                      ) {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 387
------------------------------------------------------------


=================Reducing node 390, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=390}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    int printf(                );
    int main (                      ) {
      int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    int printf(                );
    int main (                      ) {
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    int printf(                );
    int main (                      ) {
      int a = 1;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    int printf(                );
    int main (                      ) {
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 390
------------------------------------------------------------


=================Reducing node 462, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=462}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main (                      ) {
      int a = 1;
                                   ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 462
------------------------------------------------------------


=================Reducing node 395, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=395}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
                         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 395
------------------------------------------------------------


=================Reducing node 396, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
                         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 396
------------------------------------------------------------


=================Reducing node 413, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=413}
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf             ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
             "b=%d\n"    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
             "b=%d\n", b ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 413
------------------------------------------------------------


=================Reducing node 558, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=558}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    ;
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 558
------------------------------------------------------------


=================Reducing node 508, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=508}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main (                      ) {
               ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 508
------------------------------------------------------------


=================Reducing node 464, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    int printf(                );
    int main (                      ) {
      int a = 1;
      int                          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 464
------------------------------------------------------------


=================Reducing node 467, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=467}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b                        ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main (                      ) {
      int a = 1;
      int               a          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 467
------------------------------------------------------------


=================Reducing node 415, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf             ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 415
------------------------------------------------------------


=================Reducing node 417, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=417}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 417
------------------------------------------------------------


=================Reducing node 469, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b                        ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 469
------------------------------------------------------------


=================Reducing node 470, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=470}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 470
------------------------------------------------------------


=================Reducing node 560, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    int                         ;
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 560
------------------------------------------------------------


=================Reducing node 565, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=565}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf                  ;
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 565
------------------------------------------------------------


=================Reducing node 543, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main                          {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 543
------------------------------------------------------------


=================Reducing node 510, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int      ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 510
------------------------------------------------------------


=================Reducing node 513, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=513}
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a    ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 513
------------------------------------------------------------


=================Reducing node 483, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =                 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 483
------------------------------------------------------------


=================Reducing node 419, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf(           );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 419
------------------------------------------------------------


=================Reducing node 421, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=421}
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n"   );
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf(          b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 421
------------------------------------------------------------


=================Reducing node 567, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf                  ;
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 567
------------------------------------------------------------


=================Reducing node 569, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=569}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 569
------------------------------------------------------------


=================Reducing node 545, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main                          {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 545
------------------------------------------------------------


=================Reducing node 547, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=547}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 547
------------------------------------------------------------


=================Reducing node 515, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a    ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 515
------------------------------------------------------------


=================Reducing node 516, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=516}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 516
------------------------------------------------------------


=================Reducing node 485, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 485
------------------------------------------------------------


=================Reducing node 486, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=486}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 486
------------------------------------------------------------


=================Reducing node 423, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n"   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 423
------------------------------------------------------------


=================Reducing node 424, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=424}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 424
------------------------------------------------------------


=================Reducing node 573, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 573
------------------------------------------------------------


=================Reducing node 572, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 572
------------------------------------------------------------


=================Reducing node 570, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 570
------------------------------------------------------------


=================Reducing node 561, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 561
------------------------------------------------------------


=================Reducing node 559, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 559
------------------------------------------------------------


=================Reducing node 577, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 577
------------------------------------------------------------


=================Reducing node 551, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 551
------------------------------------------------------------


=================Reducing node 550, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 550
------------------------------------------------------------


=================Reducing node 548, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 548
------------------------------------------------------------


=================Reducing node 538, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 538
------------------------------------------------------------


=================Reducing node 535, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 535
------------------------------------------------------------


=================Reducing node 517, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 517
------------------------------------------------------------


=================Reducing node 511, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 511
------------------------------------------------------------


=================Reducing node 509, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 509
------------------------------------------------------------


=================Reducing node 542, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 542
------------------------------------------------------------


=================Reducing node 502, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 502
------------------------------------------------------------


=================Reducing node 499, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 499
------------------------------------------------------------


=================Reducing node 494, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 494
------------------------------------------------------------


=================Reducing node 493, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 493
------------------------------------------------------------


=================Reducing node 471, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 471
------------------------------------------------------------


=================Reducing node 465, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 465
------------------------------------------------------------


=================Reducing node 463, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 463
------------------------------------------------------------


=================Reducing node 506, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 506
------------------------------------------------------------


=================Reducing node 460, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 460
------------------------------------------------------------


=================Reducing node 458, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 458
------------------------------------------------------------


=================Reducing node 459, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 459
------------------------------------------------------------


=================Reducing node 442, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 442
------------------------------------------------------------


=================Reducing node 425, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 425
------------------------------------------------------------


=================Reducing node 420, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 420
------------------------------------------------------------


=================Reducing node 418, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 418
------------------------------------------------------------


=================Reducing node 397, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 397
------------------------------------------------------------


=================Reducing node 388, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 388
------------------------------------------------------------


=================Reducing node 386, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 386
------------------------------------------------------------


=================Reducing node 383, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int printf(                );
        main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 383
------------------------------------------------------------


=================Reducing node 552, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=552}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 552
------------------------------------------------------------


=================Reducing node 556, size=30=================

The current best program is the following

    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 556
------------------------------------------------------------


#test success = 5
#test failure = 66
#test result cache hits = 21
#test execution cancelled = 11
#node edit action set cache hits = 37
#external test execution cache hits = 0
