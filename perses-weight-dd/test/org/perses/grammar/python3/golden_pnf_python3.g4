// Auto-generated by Perses AST.
// DO NOT MODIFY.
parser grammar PnfPython3Parser;

options {
    tokenVocab=Python3Lexer;
}


file_input
    : kleene_star__file_input_2 EOF
    ;

decorator
    : '@' dotted_name optional__decorator_3 NEWLINE
    ;

decorators
    : decorator+
    ;

decorated
    : decorators altnt_block__decorated_1
    ;

async_funcdef
    : ASYNC funcdef
    ;

funcdef
    : 'def' NAME parameters optional__funcdef_2 ':' suite
    ;

parameters
    : '(' optional__parameters_1 ')'
    ;

typedargslist
    : aux_rule__typedargslist_33
    | aux_rule__typedargslist_34
    | aux_rule__typedargslist_35
    ;

tfpdef
    : NAME optional__tfpdef_2
    ;

varargslist
    : aux_rule__varargslist_33
    | aux_rule__varargslist_34
    | aux_rule__varargslist_35
    ;

vfpdef
    : NAME
    ;

simple_stmt
    : small_stmt kleene_star__simple_stmt_2 optional__simple_stmt_3 NEWLINE
    ;

expr_stmt
    : testlist_star_expr optional__expr_stmt_4
    ;

annassign
    : ':' test optional__typedargslist_2
    ;

testlist_star_expr
    : altnt_block__testlist_star_expr_4 kleene_star__testlist_star_expr_2 optional__testlist_3
    ;

augassign
    : '+='
    | '-='
    | '*='
    | '@='
    | '/='
    | '%='
    | '&='
    | '|='
    | '^='
    | '<<='
    | '>>='
    | '**='
    | '//='
    ;

del_stmt
    : 'del' exprlist
    ;

pass_stmt
    : 'pass'
    ;

break_stmt
    : 'break'
    ;

continue_stmt
    : 'continue'
    ;

return_stmt
    : 'return' optional__return_stmt_1
    ;

yield_stmt
    : yield_expr
    ;

raise_stmt
    : 'raise' optional__raise_stmt_4
    ;

import_name
    : 'import' dotted_as_names
    ;

import_from
    : 'from' altnt_block__import_from_5 'import' altnt_block__import_from_6
    ;

import_as_name
    : NAME optional__import_as_name_2
    ;

dotted_as_name
    : dotted_name optional__import_as_name_2
    ;

import_as_names
    : import_as_name kleene_star__import_as_names_2 optional__testlist_3
    ;

dotted_as_names
    : dotted_as_name kleene_star__dotted_as_names_2
    ;

dotted_name
    : NAME kleene_star__dotted_name_2
    ;

global_stmt
    : 'global' NAME kleene_star__global_stmt_2
    ;

nonlocal_stmt
    : 'nonlocal' NAME kleene_star__global_stmt_2
    ;

assert_stmt
    : 'assert' test optional__assert_stmt_2
    ;

async_stmt
    : ASYNC altnt_block__async_stmt_1
    ;

if_stmt
    : 'if' test ':' suite kleene_star__if_stmt_2 optional__if_stmt_4
    ;

while_stmt
    : 'while' test ':' suite optional__if_stmt_4
    ;

for_stmt
    : 'for' exprlist 'in' testlist ':' suite optional__if_stmt_4
    ;

try_stmt
    : 'try' ':' suite altnt_block__try_stmt_7
    ;

with_stmt
    : 'with' with_item kleene_star__with_stmt_2 ':' suite
    ;

with_item
    : test optional__with_item_2
    ;

except_clause
    : 'except' optional__except_clause_4
    ;

suite
    : simple_stmt
    | aux_rule__suite_2
    ;

test
    : aux_rule__test_3
    | lambdef
    ;

test_nocond
    : or_test
    | lambdef_nocond
    ;

lambdef
    : 'lambda' optional__lambdef_1 ':' test
    ;

lambdef_nocond
    : 'lambda' optional__lambdef_1 ':' test_nocond
    ;

or_test
    : and_test kleene_star__or_test_2
    ;

and_test
    : not_test kleene_star__and_test_2
    ;

not_test
    : aux_rule__not_test_1
    | comparison
    ;

comparison
    : expr kleene_star__comparison_2
    ;

comp_op
    : '<'
    | '>'
    | '=='
    | '>='
    | '<='
    | '<>'
    | '!='
    | aux_rule__comp_op_3
    | aux_rule__comp_op_4
    ;

star_expr
    : '*' expr
    ;

expr
    : xor_expr kleene_star__expr_2
    ;

xor_expr
    : and_expr kleene_star__xor_expr_2
    ;

and_expr
    : shift_expr kleene_star__and_expr_2
    ;

shift_expr
    : arith_expr kleene_star__shift_expr_2
    ;

arith_expr
    : term kleene_star__arith_expr_2
    ;

term
    : factor kleene_star__term_2
    ;

factor
    : aux_rule__factor_2
    | power
    ;

power
    : atom_expr optional__power_2
    ;

atom_expr
    : optional__atom_expr_1 atom kleene_star__atom_expr_2
    ;

atom
    : aux_rule__atom_6
    | aux_rule__atom_7
    | aux_rule__atom_8
    | NAME
    | NUMBER
    | kleene_plus__atom_5
    | '...'
    | 'None'
    | 'True'
    | 'False'
    ;

testlist_comp
    : altnt_block__testlist_star_expr_4 altnt_block__testlist_comp_5
    ;

trailer
    : aux_rule__trailer_2
    | aux_rule__trailer_3
    | aux_rule__trailer_4
    ;

subscriptlist
    : subscript_ kleene_star__subscriptlist_2 optional__testlist_3
    ;

subscript_
    : test
    | aux_rule__subscript__4
    ;

sliceop
    : ':' optional__subscript__1
    ;

exprlist
    : altnt_block__exprlist_4 kleene_star__exprlist_2 optional__testlist_3
    ;

testlist
    : test kleene_star__testlist_2 optional__testlist_3
    ;

dictorsetmaker
    : aux_rule__dictorsetmaker_12
    | aux_rule__dictorsetmaker_13
    ;

classdef
    : 'class' NAME optional__decorator_3 ':' suite
    ;

arglist
    : argument kleene_star__arglist_2 optional__testlist_3
    ;

argument
    : aux_rule__argument_3
    | aux_rule__argument_4
    ;

comp_iter
    : comp_for
    | comp_if
    ;

comp_for
    : optional__comp_for_1 'for' exprlist 'in' or_test optional__comp_for_2
    ;

comp_if
    : 'if' test_nocond optional__comp_for_2
    ;

yield_expr
    : 'yield' optional__yield_expr_1
    ;

yield_arg
    : aux_rule__yield_arg_1
    | testlist
    ;

aux_rule__file_input_1
    : NEWLINE
    | stmt
    ;

kleene_star__file_input_2
    : aux_rule__file_input_1*
    ;

optional__decorator_1
    : arglist?
    ;

aux_rule__decorator_2
    : '(' optional__decorator_1 ')'
    ;

optional__decorator_3
    : aux_rule__decorator_2?
    ;

aux_rule__funcdef_1
    : '->' test
    ;

optional__funcdef_2
    : aux_rule__funcdef_1?
    ;

optional__parameters_1
    : typedargslist?
    ;

aux_rule__typedargslist_1
    : '=' test
    ;

optional__typedargslist_2
    : aux_rule__typedargslist_1?
    ;

aux_rule__typedargslist_5
    : ',' tfpdef optional__typedargslist_2
    ;

kleene_star__typedargslist_6
    : aux_rule__typedargslist_5*
    ;

optional__typedargslist_7
    : tfpdef?
    ;

aux_rule__typedargslist_13
    : '**' tfpdef optional__testlist_3
    ;

optional__typedargslist_14
    : aux_rule__typedargslist_13?
    ;

aux_rule__typedargslist_15
    : ',' optional__typedargslist_14
    ;

optional__typedargslist_16
    : aux_rule__typedargslist_15?
    ;

aux_rule__typedargslist_18
    : aux_rule__typedargslist_36
    | aux_rule__typedargslist_37
    ;

optional__typedargslist_19
    : aux_rule__typedargslist_18?
    ;

aux_rule__typedargslist_20
    : ',' optional__typedargslist_19
    ;

optional__typedargslist_21
    : aux_rule__typedargslist_20?
    ;

aux_rule__tfpdef_1
    : ':' test
    ;

optional__tfpdef_2
    : aux_rule__tfpdef_1?
    ;

aux_rule__varargslist_5
    : ',' vfpdef optional__typedargslist_2
    ;

kleene_star__varargslist_6
    : aux_rule__varargslist_5*
    ;

optional__varargslist_7
    : vfpdef?
    ;

aux_rule__varargslist_13
    : '**' vfpdef optional__testlist_3
    ;

optional__varargslist_14
    : aux_rule__varargslist_13?
    ;

aux_rule__varargslist_15
    : ',' optional__varargslist_14
    ;

optional__varargslist_16
    : aux_rule__varargslist_15?
    ;

aux_rule__varargslist_18
    : aux_rule__varargslist_36
    | aux_rule__varargslist_37
    ;

optional__varargslist_19
    : aux_rule__varargslist_18?
    ;

aux_rule__varargslist_20
    : ',' optional__varargslist_19
    ;

optional__varargslist_21
    : aux_rule__varargslist_20?
    ;

aux_rule__simple_stmt_1
    : ';' small_stmt
    ;

kleene_star__simple_stmt_2
    : aux_rule__simple_stmt_1*
    ;

optional__simple_stmt_3
    : ';'?
    ;

aux_rule__expr_stmt_1
    : '=' altnt_block__expr_stmt_5
    ;

kleene_plus__expr_stmt_2
    : aux_rule__expr_stmt_1+
    ;

aux_rule__expr_stmt_3
    : annassign
    | aux_rule__expr_stmt_7
    | kleene_plus__expr_stmt_2
    ;

optional__expr_stmt_4
    : aux_rule__expr_stmt_3?
    ;

aux_rule__testlist_star_expr_1
    : ',' altnt_block__testlist_star_expr_4
    ;

kleene_star__testlist_star_expr_2
    : aux_rule__testlist_star_expr_1*
    ;

optional__return_stmt_1
    : testlist?
    ;

aux_rule__raise_stmt_1
    : 'from' test
    ;

optional__raise_stmt_2
    : aux_rule__raise_stmt_1?
    ;

aux_rule__raise_stmt_3
    : test optional__raise_stmt_2
    ;

optional__raise_stmt_4
    : aux_rule__raise_stmt_3?
    ;

aux_rule__import_from_1
    : '.'
    | '...'
    ;

kleene_star__import_from_2
    : aux_rule__import_from_1*
    ;

kleene_plus__import_from_4
    : aux_rule__import_from_1+
    ;

aux_rule__import_as_name_1
    : 'as' NAME
    ;

optional__import_as_name_2
    : aux_rule__import_as_name_1?
    ;

aux_rule__import_as_names_1
    : ',' import_as_name
    ;

kleene_star__import_as_names_2
    : aux_rule__import_as_names_1*
    ;

aux_rule__dotted_as_names_1
    : ',' dotted_as_name
    ;

kleene_star__dotted_as_names_2
    : aux_rule__dotted_as_names_1*
    ;

aux_rule__dotted_name_1
    : '.' NAME
    ;

kleene_star__dotted_name_2
    : aux_rule__dotted_name_1*
    ;

aux_rule__global_stmt_1
    : ',' NAME
    ;

kleene_star__global_stmt_2
    : aux_rule__global_stmt_1*
    ;

optional__assert_stmt_2
    : aux_rule__testlist_1?
    ;

aux_rule__if_stmt_1
    : 'elif' test ':' suite
    ;

kleene_star__if_stmt_2
    : aux_rule__if_stmt_1*
    ;

aux_rule__if_stmt_3
    : 'else' ':' suite
    ;

optional__if_stmt_4
    : aux_rule__if_stmt_3?
    ;

aux_rule__try_stmt_1
    : except_clause ':' suite
    ;

kleene_plus__try_stmt_2
    : aux_rule__try_stmt_1+
    ;

aux_rule__try_stmt_5
    : 'finally' ':' suite
    ;

optional__try_stmt_6
    : aux_rule__try_stmt_5?
    ;

aux_rule__with_stmt_1
    : ',' with_item
    ;

kleene_star__with_stmt_2
    : aux_rule__with_stmt_1*
    ;

aux_rule__with_item_1
    : 'as' expr
    ;

optional__with_item_2
    : aux_rule__with_item_1?
    ;

aux_rule__except_clause_3
    : test optional__import_as_name_2
    ;

optional__except_clause_4
    : aux_rule__except_clause_3?
    ;

kleene_plus__suite_1
    : stmt+
    ;

aux_rule__test_1
    : 'if' or_test 'else' test
    ;

optional__test_2
    : aux_rule__test_1?
    ;

optional__lambdef_1
    : varargslist?
    ;

aux_rule__or_test_1
    : 'or' and_test
    ;

kleene_star__or_test_2
    : aux_rule__or_test_1*
    ;

aux_rule__and_test_1
    : 'and' not_test
    ;

kleene_star__and_test_2
    : aux_rule__and_test_1*
    ;

aux_rule__comparison_1
    : comp_op expr
    ;

kleene_star__comparison_2
    : aux_rule__comparison_1*
    ;

aux_rule__expr_1
    : '|' xor_expr
    ;

kleene_star__expr_2
    : aux_rule__expr_1*
    ;

aux_rule__xor_expr_1
    : '^' and_expr
    ;

kleene_star__xor_expr_2
    : aux_rule__xor_expr_1*
    ;

aux_rule__and_expr_1
    : '&' shift_expr
    ;

kleene_star__and_expr_2
    : aux_rule__and_expr_1*
    ;

aux_rule__shift_expr_1
    : altnt_block__shift_expr_3 arith_expr
    ;

kleene_star__shift_expr_2
    : aux_rule__shift_expr_1*
    ;

aux_rule__arith_expr_1
    : altnt_block__arith_expr_3 term
    ;

kleene_star__arith_expr_2
    : aux_rule__arith_expr_1*
    ;

aux_rule__term_1
    : altnt_block__term_3 factor
    ;

kleene_star__term_2
    : aux_rule__term_1*
    ;

aux_rule__power_1
    : '**' factor
    ;

optional__power_2
    : aux_rule__power_1?
    ;

optional__atom_expr_1
    : AWAIT?
    ;

kleene_star__atom_expr_2
    : trailer*
    ;

aux_rule__atom_1
    : yield_expr
    | testlist_comp
    ;

optional__atom_2
    : aux_rule__atom_1?
    ;

optional__atom_3
    : testlist_comp?
    ;

optional__atom_4
    : dictorsetmaker?
    ;

kleene_plus__atom_5
    : STRING+
    ;

aux_rule__subscriptlist_1
    : ',' subscript_
    ;

kleene_star__subscriptlist_2
    : aux_rule__subscriptlist_1*
    ;

optional__subscript__1
    : test?
    ;

optional__subscript__3
    : sliceop?
    ;

aux_rule__exprlist_1
    : ',' altnt_block__exprlist_4
    ;

kleene_star__exprlist_2
    : aux_rule__exprlist_1*
    ;

aux_rule__testlist_1
    : ',' test
    ;

kleene_star__testlist_2
    : aux_rule__testlist_1*
    ;

optional__testlist_3
    : ','?
    ;

aux_rule__dictorsetmaker_1
    : ',' altnt_block__dictorsetmaker_7
    ;

kleene_star__dictorsetmaker_2
    : aux_rule__dictorsetmaker_1*
    ;

aux_rule__arglist_1
    : ',' argument
    ;

kleene_star__arglist_2
    : aux_rule__arglist_1*
    ;

optional__argument_1
    : comp_for?
    ;

optional__comp_for_1
    : ASYNC?
    ;

optional__comp_for_2
    : comp_iter?
    ;

optional__yield_expr_1
    : yield_arg?
    ;

optional__comp_op_1
    : 'not'?
    ;

altnt_block__argument_2
    : aux_rule__argument_5
    | '**'
    | '*'
    ;

small_stmt
    : expr_stmt
    | del_stmt
    | pass_stmt
    | break_stmt
    | continue_stmt
    | return_stmt
    | raise_stmt
    | yield_stmt
    | import_name
    | import_from
    | global_stmt
    | nonlocal_stmt
    | assert_stmt
    ;

altnt_block__decorated_1
    : classdef
    | funcdef
    | async_funcdef
    ;

altnt_block__testlist_star_expr_4
    : test
    | star_expr
    ;

altnt_block__import_from_5
    : aux_rule__import_from_7
    | kleene_plus__import_from_4
    ;

altnt_block__import_from_6
    : '*'
    | aux_rule__import_from_8
    | import_as_names
    ;

altnt_block__async_stmt_1
    : funcdef
    | with_stmt
    | for_stmt
    ;

altnt_block__try_stmt_7
    : aux_rule__try_stmt_8
    | aux_rule__try_stmt_9
    ;

altnt_block__factor_1
    : '+'
    | '-'
    | '~'
    ;

altnt_block__testlist_comp_5
    : comp_for
    | aux_rule__testlist_comp_6
    ;

altnt_block__exprlist_4
    : expr
    | star_expr
    ;

altnt_block__dictorsetmaker_7
    : aux_rule__dictorsetmaker_14
    | aux_rule__dictorsetmaker_15
    ;

altnt_block__dictorsetmaker_8
    : comp_for
    | aux_rule__dictorsetmaker_16
    ;

altnt_block__expr_stmt_5
    : yield_expr
    | testlist_star_expr
    ;

altnt_block__expr_stmt_6
    : yield_expr
    | testlist
    ;

altnt_block__shift_expr_3
    : '<<'
    | '>>'
    ;

altnt_block__arith_expr_3
    : '+'
    | '-'
    ;

altnt_block__term_3
    : '*'
    | '@'
    | '/'
    | '%'
    | '//'
    ;

stmt
    : simple_stmt
    | if_stmt
    | while_stmt
    | for_stmt
    | try_stmt
    | with_stmt
    | funcdef
    | classdef
    | decorated
    | async_stmt
    ;

aux_rule__typedargslist_33
    : tfpdef optional__typedargslist_2 kleene_star__typedargslist_6 optional__typedargslist_21
    ;

aux_rule__typedargslist_34
    : '*' optional__typedargslist_7 kleene_star__typedargslist_6 optional__typedargslist_16
    ;

aux_rule__typedargslist_35
    : '**' tfpdef optional__testlist_3
    ;

aux_rule__varargslist_33
    : vfpdef optional__typedargslist_2 kleene_star__varargslist_6 optional__varargslist_21
    ;

aux_rule__varargslist_34
    : '*' optional__varargslist_7 kleene_star__varargslist_6 optional__varargslist_16
    ;

aux_rule__varargslist_35
    : '**' vfpdef optional__testlist_3
    ;

aux_rule__suite_2
    : NEWLINE INDENT kleene_plus__suite_1 DEDENT
    ;

aux_rule__test_3
    : or_test optional__test_2
    ;

aux_rule__not_test_1
    : 'not' not_test
    ;

aux_rule__comp_op_3
    : optional__comp_op_1 'in'
    ;

aux_rule__comp_op_4
    : 'is' optional__comp_op_1
    ;

aux_rule__factor_2
    : altnt_block__factor_1 factor
    ;

aux_rule__atom_6
    : '(' optional__atom_2 ')'
    ;

aux_rule__atom_7
    : '[' optional__atom_3 ']'
    ;

aux_rule__atom_8
    : '{' optional__atom_4 '}'
    ;

aux_rule__trailer_2
    : '(' optional__decorator_1 ')'
    ;

aux_rule__trailer_3
    : '[' subscriptlist ']'
    ;

aux_rule__trailer_4
    : '.' NAME
    ;

aux_rule__subscript__4
    : optional__subscript__1 ':' optional__subscript__1 optional__subscript__3
    ;

aux_rule__dictorsetmaker_12
    : altnt_block__dictorsetmaker_7 altnt_block__dictorsetmaker_8
    ;

aux_rule__dictorsetmaker_13
    : altnt_block__testlist_star_expr_4 altnt_block__testlist_comp_5
    ;

aux_rule__argument_3
    : test optional__argument_1
    ;

aux_rule__argument_4
    : altnt_block__argument_2 test
    ;

aux_rule__yield_arg_1
    : 'from' test
    ;

aux_rule__typedargslist_36
    : '*' optional__typedargslist_7 kleene_star__typedargslist_6 optional__typedargslist_16
    ;

aux_rule__typedargslist_37
    : '**' tfpdef optional__testlist_3
    ;

aux_rule__varargslist_36
    : '*' optional__varargslist_7 kleene_star__varargslist_6 optional__varargslist_16
    ;

aux_rule__varargslist_37
    : '**' vfpdef optional__testlist_3
    ;

aux_rule__expr_stmt_7
    : augassign altnt_block__expr_stmt_6
    ;

aux_rule__argument_5
    : test '='
    ;

aux_rule__import_from_7
    : kleene_star__import_from_2 dotted_name
    ;

aux_rule__import_from_8
    : '(' import_as_names ')'
    ;

aux_rule__try_stmt_8
    : kleene_plus__try_stmt_2 optional__if_stmt_4 optional__try_stmt_6
    ;

aux_rule__try_stmt_9
    : 'finally' ':' suite
    ;

aux_rule__testlist_comp_6
    : kleene_star__testlist_star_expr_2 optional__testlist_3
    ;

aux_rule__dictorsetmaker_14
    : test ':' test
    ;

aux_rule__dictorsetmaker_15
    : '**' expr
    ;

aux_rule__dictorsetmaker_16
    : kleene_star__dictorsetmaker_2 optional__testlist_3
    ;

