// Auto-generated by Perses AST.
// DO NOT MODIFY.
grammar PnfSolidity;

options {
    tokenVocab=SolidityLexer;
}
sourceUnit
    : kleene_star__sourceUnit_2 EOF
    ;

sourceUnit_1
    : pragmaDirective
    | importDirective
    | contractDefinition
    | interfaceDefinition
    | libraryDefinition
    | functionDefinition
    | constantVariableDeclaration
    | structDefinition
    | enumDefinition
    ;

kleene_star__sourceUnit_2
    : sourceUnit_1*
    ;

pragmaDirective
    : Pragma kleene_plus__pragmaDirective_1 PragmaSemicolon
    ;

kleene_plus__pragmaDirective_1
    : PragmaToken+
    ;

importDirective
    : Import (path optional__importDirective_2 | symbolAliases From path | Mul As unitAlias=identifier From path) Semicolon
    ;

importDirective_1
    : As unitAlias=identifier
    ;

optional__importDirective_2
    : importDirective_1?
    ;

contractDefinition
    : optional__contractDefinition_1 Contract name=identifier optional__contractDefinition_2 LBrace kleene_star__contractDefinition_3 RBrace
    ;

optional__contractDefinition_1
    : Abstract?
    ;

optional__contractDefinition_2
    : inheritanceSpecifierList?
    ;

kleene_star__contractDefinition_3
    : contractBodyElement*
    ;

interfaceDefinition
    : Interface name=identifier optional__contractDefinition_2 LBrace kleene_star__contractDefinition_3 RBrace
    ;

libraryDefinition
    : Library name=identifier LBrace kleene_star__contractDefinition_3 RBrace
    ;

functionDefinition locals [
	boolean visibilitySet = false,
	boolean mutabilitySet = false,
	boolean virtualSet = false,
	boolean overrideSpecifierSet = false
]
    : Function (identifier | Fallback | Receive) LParen optional__functionDefinition_2 RParen kleene_star__functionDefinition_4 optional__functionDefinition_6 (Semicolon | body=block)
    ;

functionDefinition_1
    : arguments=parameterList
    ;

optional__functionDefinition_2
    : functionDefinition_1?
    ;

functionDefinition_3
    : modifierInvocation
    | {!$visibilitySet}? visibility {$visibilitySet = true;}
    | {!$mutabilitySet}? stateMutability {$mutabilitySet = true;}
    | {!$virtualSet}? Virtual {$virtualSet = true;}
    | {!$overrideSpecifierSet}? overrideSpecifier {$overrideSpecifierSet = true;}
    ;

kleene_star__functionDefinition_4
    : functionDefinition_3*
    ;

functionDefinition_5
    : Returns LParen returnParameters=parameterList RParen
    ;

optional__functionDefinition_6
    : functionDefinition_5?
    ;

constantVariableDeclaration
    : type=typeName Constant name=identifier Assign initialValue=expression Semicolon
    ;

structDefinition
    : Struct name=identifier LBrace kleene_plus__structDefinition_2 RBrace
    ;

structDefinition_1
    : members=structMember
    ;

kleene_plus__structDefinition_2
    : structDefinition_1+
    ;

enumDefinition
    : Enum name=identifier LBrace enumValues+=identifier kleene_star__enumDefinition_2 RBrace
    ;

enumDefinition_1
    : Comma enumValues+=identifier
    ;

kleene_star__enumDefinition_2
    : enumDefinition_1*
    ;

path
    : NonEmptyStringLiteral
    ;

identifier
    : Identifier
    | From
    ;

symbolAliases
    : LBrace aliases+=importAliases kleene_star__symbolAliases_2 RBrace
    ;

symbolAliases_1
    : Comma aliases+=importAliases
    ;

kleene_star__symbolAliases_2
    : symbolAliases_1*
    ;

importAliases
    : symbol=identifier optional__importAliases_2
    ;

importAliases_1
    : As alias=identifier
    ;

optional__importAliases_2
    : importAliases_1?
    ;

inheritanceSpecifierList
    : Is inheritanceSpecifiers+=inheritanceSpecifier kleene_star__inheritanceSpecifierList_2
    ;

inheritanceSpecifierList_1
    : Comma inheritanceSpecifiers+=inheritanceSpecifier
    ;

kleene_star__inheritanceSpecifierList_2
    : inheritanceSpecifierList_1*?
    ;

contractBodyElement
    : constructorDefinition
    | functionDefinition
    | modifierDefinition
    | fallbackFunctionDefinition
    | receiveFunctionDefinition
    | structDefinition
    | enumDefinition
    | stateVariableDeclaration
    | eventDefinition
    | usingDirective
    ;

inheritanceSpecifier
    : name=identifierPath optional__inheritanceSpecifier_2
    ;

inheritanceSpecifier_1
    : arguments=callArgumentList
    ;

optional__inheritanceSpecifier_2
    : inheritanceSpecifier_1?
    ;

identifierPath
    : identifier kleene_star__identifierPath_2
    ;

identifierPath_1
    : Period identifier
    ;

kleene_star__identifierPath_2
    : identifierPath_1*
    ;

callArgumentList
    : LParen (optional__callArgumentList_4 | LBrace optional__callArgumentList_8 RBrace) RParen
    ;

callArgumentList_1
    : Comma expression
    ;

kleene_star__callArgumentList_2
    : callArgumentList_1*
    ;

callArgumentList_3
    : expression kleene_star__callArgumentList_2
    ;

optional__callArgumentList_4
    : callArgumentList_3?
    ;

callArgumentList_5
    : Comma namedArgument
    ;

kleene_star__callArgumentList_6
    : callArgumentList_5*
    ;

callArgumentList_7
    : namedArgument kleene_star__callArgumentList_6
    ;

optional__callArgumentList_8
    : callArgumentList_7?
    ;

constructorDefinition locals [boolean payableSet = false, boolean visibilitySet = false]
    : Constructor LParen optional__functionDefinition_2 RParen kleene_star__constructorDefinition_4 body=block
    ;

constructorDefinition_3
    : modifierInvocation
    | {!$payableSet}? Payable {$payableSet = true;}
    | {!$visibilitySet}? alternative__constructorDefinition_5 {$visibilitySet = true;}
    ;

kleene_star__constructorDefinition_4
    : constructorDefinition_3*
    ;

alternative__constructorDefinition_5
    : Internal
    | Public
    ;

modifierDefinition locals [
	boolean virtualSet = false,
	boolean overrideSpecifierSet = false
]
    : Modifier name=identifier optional__modifierDefinition_4 kleene_star__modifierDefinition_6 (Semicolon | body=block)
    ;

modifierDefinition_3
    : LParen optional__functionDefinition_2 RParen
    ;

optional__modifierDefinition_4
    : modifierDefinition_3?
    ;

modifierDefinition_5
    : {!$virtualSet}? Virtual {$virtualSet = true;}
    | {!$overrideSpecifierSet}? overrideSpecifier {$overrideSpecifierSet = true;}
    ;

kleene_star__modifierDefinition_6
    : modifierDefinition_5*
    ;

fallbackFunctionDefinition locals [
	boolean visibilitySet = false,
	boolean mutabilitySet = false,
	boolean virtualSet = false,
	boolean overrideSpecifierSet = false,
	boolean hasParameters = false
]
    : kind=Fallback LParen optional__fallbackFunctionDefinition_2 RParen kleene_star__fallbackFunctionDefinition_4 ({$hasParameters}? Returns LParen returnParameters=parameterList RParen | {!$hasParameters}?) (Semicolon | body=block)
    ;

fallbackFunctionDefinition_1
    : parameterList { $hasParameters = true; }
    ;

optional__fallbackFunctionDefinition_2
    : fallbackFunctionDefinition_1?
    ;

fallbackFunctionDefinition_3
    : modifierInvocation
    | {!$visibilitySet}? External {$visibilitySet = true;}
    | {!$mutabilitySet}? stateMutability {$mutabilitySet = true;}
    | {!$virtualSet}? Virtual {$virtualSet = true;}
    | {!$overrideSpecifierSet}? overrideSpecifier {$overrideSpecifierSet = true;}
    ;

kleene_star__fallbackFunctionDefinition_4
    : fallbackFunctionDefinition_3*
    ;

receiveFunctionDefinition locals [
	boolean visibilitySet = false,
	boolean mutabilitySet = false,
	boolean virtualSet = false,
	boolean overrideSpecifierSet = false
]
    : kind=Receive LParen RParen kleene_star__receiveFunctionDefinition_2 (Semicolon | body=block)
    ;

receiveFunctionDefinition_1
    : modifierInvocation
    | {!$visibilitySet}? External {$visibilitySet = true;}
    | {!$mutabilitySet}? Payable {$mutabilitySet = true;}
    | {!$virtualSet}? Virtual {$virtualSet = true;}
    | {!$overrideSpecifierSet}? overrideSpecifier {$overrideSpecifierSet = true;}
    ;

kleene_star__receiveFunctionDefinition_2
    : receiveFunctionDefinition_1*
    ;

stateVariableDeclaration locals [boolean constantnessSet = false, boolean visibilitySet = false, boolean overrideSpecifierSet = false]
    : type=typeName kleene_star__stateVariableDeclaration_2 name=identifier optional__stateVariableDeclaration_4 Semicolon
    ;

stateVariableDeclaration_1
    : {!$overrideSpecifierSet}? overrideSpecifier {$overrideSpecifierSet = true;}
    | {!$constantnessSet}? alternative__stateVariableDeclaration_5 {$constantnessSet = true;}
    | {!$visibilitySet}? alternative__stateVariableDeclaration_7 {$visibilitySet = true;}
    ;

kleene_star__stateVariableDeclaration_2
    : stateVariableDeclaration_1*
    ;

stateVariableDeclaration_3
    : Assign initialValue=expression
    ;

optional__stateVariableDeclaration_4
    : stateVariableDeclaration_3?
    ;

alternative__stateVariableDeclaration_5
    : Constant
    | Immutable
    ;

alternative__stateVariableDeclaration_7
    : Public
    | Internal
    | Private
    ;

eventDefinition
    : Event name=identifier LParen optional__eventDefinition_4 RParen optional__eventDefinition_5 Semicolon
    ;

eventDefinition_1
    : Comma parameters+=eventParameter
    ;

kleene_star__eventDefinition_2
    : eventDefinition_1*
    ;

eventDefinition_3
    : parameters+=eventParameter kleene_star__eventDefinition_2
    ;

optional__eventDefinition_4
    : eventDefinition_3?
    ;

optional__eventDefinition_5
    : Anonymous?
    ;

usingDirective
    : Using identifierPath For (Mul | typeName) Semicolon
    ;

namedArgument
    : name=identifier Colon value=expression
    ;

expression
    : expression_13 kleene_star__expression_11
    ;

expression_1
    : index=expression
    ;

optional__expression_2
    : expression_1?
    ;

expression_3
    : start=expression
    ;

optional__expression_4
    : expression_3?
    ;

expression_5
    : end=expression
    ;

optional__expression_6
    : expression_5?
    ;

kleene_star__expression_11
    : expression_12*
    ;

expression_12
    : callArgumentList
    | Inc
    | Dec
    | Period (identifier | Address)
    | LBrack alternative__expression_19 RBrack
    | alternative__expression_23 expression
    | LBrace optional__callArgumentList_8 RBrace
    ;

expression_13
    : tupleExpression
    | inlineArrayExpression
    | identifier
    | stringLiteral
    | numberLiteral
    | True
    | False
    | hexStringLiteral
    | unicodeStringLiteral
    | elementaryTypeName[false]
    | Payable callArgumentList
    | Type LParen typeName RParen
    | New typeName
    | alternative__expression_26 expression
    ;

alternative__expression_19
    : optional__expression_2
    | optional__expression_4 Colon optional__expression_6
    ;

alternative__expression_23
    : Shl
    | Sar
    | Shr
    | And
    | BitAnd
    | BitOr
    | BitXor
    | Or
    | Add
    | Sub
    | Equal
    | NotEqual
    | LessThan
    | GreaterThan
    | LessThanOrEqual
    | GreaterThanOrEqual
    | Mul
    | Div
    | Mod
    ;

alternative__expression_26
    : Inc
    | Dec
    | Not
    | BitNot
    | Delete
    | Sub
    | <assoc=right> expression alternative__expression_27
    ;

alternative__expression_27
    : Conditional expression Colon
    | Exp
    | Assign
    | AssignBitOr
    | AssignBitXor
    | AssignBitAnd
    | AssignShl
    | AssignSar
    | AssignShr
    | AssignAdd
    | AssignSub
    | AssignMul
    | AssignDiv
    | AssignMod
    ;

modifierInvocation
    : identifierPath optional__modifierInvocation_1
    ;

optional__modifierInvocation_1
    : callArgumentList?
    ;

visibility
    : Internal
    | External
    | Private
    | Public
    ;

parameterList
    : parameters+=parameterDeclaration kleene_star__parameterList_2
    ;

parameterList_1
    : Comma parameters+=parameterDeclaration
    ;

kleene_star__parameterList_2
    : parameterList_1*
    ;

parameterDeclaration
    : type=typeName optional__parameterDeclaration_2 optional__parameterDeclaration_4
    ;

parameterDeclaration_1
    : location=dataLocation
    ;

optional__parameterDeclaration_2
    : parameterDeclaration_1?
    ;

parameterDeclaration_3
    : name=identifier
    ;

optional__parameterDeclaration_4
    : parameterDeclaration_3?
    ;

typeName
    : typeName_4 kleene_star__typeName_2
    ;

optional__typeName_1
    : expression?
    ;

kleene_star__typeName_2
    : typeName_3*
    ;

typeName_3
    : LBrack optional__typeName_1 RBrack
    ;

typeName_4
    : elementaryTypeName[true]
    | functionTypeName
    | mappingType
    | identifierPath
    ;

dataLocation
    : Memory
    | Storage
    | Calldata
    ;

block
    : LBrace kleene_star__block_2 RBrace
    ;

block_1
    : statement
    | uncheckedBlock
    ;

kleene_star__block_2
    : block_1*
    ;

stateMutability
    : Pure
    | View
    | Payable
    ;

overrideSpecifier
    : Override optional__overrideSpecifier_4
    ;

overrideSpecifier_1
    : Comma overrides+=identifierPath
    ;

kleene_star__overrideSpecifier_2
    : overrideSpecifier_1*
    ;

overrideSpecifier_3
    : LParen overrides+=identifierPath kleene_star__overrideSpecifier_2 RParen
    ;

optional__overrideSpecifier_4
    : overrideSpecifier_3?
    ;

structMember
    : type=typeName name=identifier Semicolon
    ;

eventParameter
    : type=typeName optional__eventParameter_1 optional__parameterDeclaration_4
    ;

optional__eventParameter_1
    : Indexed?
    ;

elementaryTypeName [boolean allowAddressPayable]
    : Address
    | Bool
    | String
    | Bytes
    | SignedIntegerType
    | UnsignedIntegerType
    | FixedBytes
    | Fixed
    | Ufixed
    | {$allowAddressPayable}? Address Payable
    ;

functionTypeName locals [boolean visibilitySet = false, boolean mutabilitySet = false]
    : Function LParen optional__functionDefinition_2 RParen kleene_star__functionTypeName_4 optional__functionDefinition_6
    ;

functionTypeName_3
    : {!$visibilitySet}? visibility {$visibilitySet = true;}
    | {!$mutabilitySet}? stateMutability {$mutabilitySet = true;}
    ;

kleene_star__functionTypeName_4
    : functionTypeName_3*
    ;

mappingType
    : Mapping LParen key=mappingKeyType DoubleArrow value=typeName RParen
    ;

variableDeclaration
    : type=typeName optional__parameterDeclaration_2 name=identifier
    ;

tupleExpression
    : LParen optional__typeName_1 kleene_star__tupleExpression_4 RParen
    ;

tupleExpression_3
    : Comma optional__typeName_1
    ;

kleene_star__tupleExpression_4
    : tupleExpression_3*
    ;

inlineArrayExpression
    : LBrack expression kleene_star__callArgumentList_2 RBrack
    ;

stringLiteral
    : kleene_plus__stringLiteral_1
    ;

kleene_plus__stringLiteral_1
    : StringLiteral+
    ;

numberLiteral
    : (DecimalNumber | HexNumber) optional__numberLiteral_1
    ;

optional__numberLiteral_1
    : NumberUnit?
    ;

hexStringLiteral
    : kleene_plus__hexStringLiteral_1
    ;

kleene_plus__hexStringLiteral_1
    : HexString+
    ;

unicodeStringLiteral
    : kleene_plus__unicodeStringLiteral_1
    ;

kleene_plus__unicodeStringLiteral_1
    : UnicodeStringLiteral+
    ;

statement
    : block
    | simpleStatement
    | ifStatement
    | forStatement
    | whileStatement
    | doWhileStatement
    | continueStatement
    | breakStatement
    | tryStatement
    | returnStatement
    | emitStatement
    | assemblyStatement
    ;

uncheckedBlock
    : Unchecked block
    ;

simpleStatement
    : variableDeclarationStatement
    | expressionStatement
    ;

ifStatement
    : If LParen expression RParen statement optional__ifStatement_2
    ;

ifStatement_1
    : Else statement
    ;

optional__ifStatement_2
    : ifStatement_1?
    ;

forStatement
    : For LParen (simpleStatement | Semicolon) (expressionStatement | Semicolon) optional__typeName_1 RParen statement
    ;

whileStatement
    : While LParen expression RParen statement
    ;

doWhileStatement
    : Do statement While LParen expression RParen Semicolon
    ;

continueStatement
    : Continue Semicolon
    ;

breakStatement
    : Break Semicolon
    ;

tryStatement
    : Try expression optional__functionDefinition_6 block kleene_plus__tryStatement_3
    ;

kleene_plus__tryStatement_3
    : catchClause+
    ;

returnStatement
    : Return optional__typeName_1 Semicolon
    ;

emitStatement
    : Emit expression callArgumentList Semicolon
    ;

assemblyStatement
    : Assembly optional__assemblyStatement_1 AssemblyLBrace kleene_star__assemblyStatement_2 YulRBrace
    ;

optional__assemblyStatement_1
    : AssemblyDialect?
    ;

kleene_star__assemblyStatement_2
    : yulStatement*
    ;

variableDeclarationStatement
    : (variableDeclaration optional__variableDeclarationStatement_2 | variableDeclarationTuple Assign expression) Semicolon
    ;

variableDeclarationStatement_1
    : Assign expression
    ;

optional__variableDeclarationStatement_2
    : variableDeclarationStatement_1?
    ;

expressionStatement
    : expression Semicolon
    ;

catchClause
    : Catch optional__catchClause_3 block
    ;

optional__catchClause_1
    : identifier?
    ;

catchClause_2
    : optional__catchClause_1 LParen arguments=parameterList RParen
    ;

optional__catchClause_3
    : catchClause_2?
    ;

yulStatement
    : yulBlock
    | yulVariableDeclaration
    | yulAssignment
    | yulFunctionCall
    | yulIfStatement
    | yulForStatement
    | yulSwitchStatement
    | YulLeave
    | YulBreak
    | YulContinue
    | yulFunctionDefinition
    ;

variableDeclarationTuple
    : LParen kleene_star__variableDeclarationTuple_1 variableDeclarations+=variableDeclaration kleene_star__variableDeclarationTuple_5 RParen
    ;

kleene_star__variableDeclarationTuple_1
    : Comma*
    ;

variableDeclarationTuple_2
    : variableDeclarations+=variableDeclaration
    ;

optional__variableDeclarationTuple_3
    : variableDeclarationTuple_2?
    ;

variableDeclarationTuple_4
    : Comma optional__variableDeclarationTuple_3
    ;

kleene_star__variableDeclarationTuple_5
    : variableDeclarationTuple_4*
    ;

mappingKeyType
    : elementaryTypeName[false]
    | identifierPath
    ;

yulBlock
    : YulLBrace kleene_star__assemblyStatement_2 YulRBrace
    ;

yulVariableDeclaration
    : YulLet variables+=YulIdentifier alternative__yulVariableDeclaration_7
    ;

yulVariableDeclaration_1
    : YulAssign yulExpression
    ;

optional__yulVariableDeclaration_2
    : yulVariableDeclaration_1?
    ;

yulVariableDeclaration_3
    : YulComma variables+=YulIdentifier
    ;

kleene_star__yulVariableDeclaration_4
    : yulVariableDeclaration_3*
    ;

yulVariableDeclaration_5
    : YulAssign yulFunctionCall
    ;

optional__yulVariableDeclaration_6
    : yulVariableDeclaration_5?
    ;

alternative__yulVariableDeclaration_7
    : optional__yulVariableDeclaration_2
    | kleene_star__yulVariableDeclaration_4 optional__yulVariableDeclaration_6
    ;

yulAssignment
    : yulPath alternative__yulAssignment_3
    ;

yulAssignment_1
    : YulComma yulPath
    ;

kleene_plus__yulAssignment_2
    : yulAssignment_1+
    ;

alternative__yulAssignment_3
    : YulAssign yulExpression
    | kleene_plus__yulAssignment_2 YulAssign yulFunctionCall
    ;

yulFunctionCall
    : (YulIdentifier | YulEVMBuiltin) YulLParen optional__yulFunctionCall_4 YulRParen
    ;

yulFunctionCall_1
    : YulComma yulExpression
    ;

kleene_star__yulFunctionCall_2
    : yulFunctionCall_1*
    ;

yulFunctionCall_3
    : yulExpression kleene_star__yulFunctionCall_2
    ;

optional__yulFunctionCall_4
    : yulFunctionCall_3?
    ;

yulIfStatement
    : YulIf cond=yulExpression body=yulBlock
    ;

yulForStatement
    : YulFor init=yulBlock cond=yulExpression post=yulBlock body=yulBlock
    ;

yulSwitchStatement
    : YulSwitch yulExpression (kleene_plus__yulSwitchStatement_1 optional__yulSwitchStatement_3 | YulDefault yulBlock)
    ;

kleene_plus__yulSwitchStatement_1
    : yulSwitchCase+
    ;

yulSwitchStatement_2
    : YulDefault yulBlock
    ;

optional__yulSwitchStatement_3
    : yulSwitchStatement_2?
    ;

yulFunctionDefinition
    : YulFunction YulIdentifier YulLParen optional__yulFunctionDefinition_4 YulRParen optional__yulFunctionDefinition_8 body=yulBlock
    ;

yulFunctionDefinition_1
    : YulComma arguments+=YulIdentifier
    ;

kleene_star__yulFunctionDefinition_2
    : yulFunctionDefinition_1*
    ;

yulFunctionDefinition_3
    : arguments+=YulIdentifier kleene_star__yulFunctionDefinition_2
    ;

optional__yulFunctionDefinition_4
    : yulFunctionDefinition_3?
    ;

yulFunctionDefinition_5
    : YulComma returnParameters+=YulIdentifier
    ;

kleene_star__yulFunctionDefinition_6
    : yulFunctionDefinition_5*
    ;

yulFunctionDefinition_7
    : YulArrow returnParameters+=YulIdentifier kleene_star__yulFunctionDefinition_6
    ;

optional__yulFunctionDefinition_8
    : yulFunctionDefinition_7?
    ;

yulExpression
    : yulPath
    | yulFunctionCall
    | yulLiteral
    ;

yulPath
    : YulIdentifier kleene_star__yulPath_2
    ;

yulPath_1
    : YulPeriod YulIdentifier
    ;

kleene_star__yulPath_2
    : yulPath_1*
    ;

yulSwitchCase
    : YulCase yulLiteral yulBlock
    ;

yulLiteral
    : YulDecimalNumber
    | YulStringLiteral
    | YulHexNumber
    | YulTrue
    | YulFalse
    ;

