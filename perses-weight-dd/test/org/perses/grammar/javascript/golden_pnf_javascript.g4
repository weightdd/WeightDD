// Auto-generated by Perses AST.
// DO NOT MODIFY.
parser grammar PnfJavaScriptParser;

options {
    tokenVocab=JavaScriptLexer;
    superClass=JavaScriptParserBase;
}


program
    : optional__program_1 optional__program_2 EOF
    ;

sourceElement
    : statement
    ;

block
    : '{' optional__block_1 '}'
    ;

statementList
    : statement+
    ;

importStatement
    : Import importFromBlock
    ;

importFromBlock
    : altnt_block__importFromBlock_2 eos
    ;

moduleItems
    : '{' kleene_star__moduleItems_2 optional__moduleItems_5 '}'
    ;

importDefault
    : aliasName ','
    ;

importNamespace
    : altnt_block__importNamespace_3 optional__importNamespace_2
    ;

importFrom
    : From StringLiteral
    ;

aliasName
    : identifierName optional__importNamespace_2
    ;

exportStatement
    : Export altnt_block__exportStatement_1 eos
    ;

exportFromBlock
    : altnt_block__exportFromBlock_2 eos
    ;

variableStatement
    : variableDeclarationList eos
    ;

variableDeclarationList
    : varModifier variableDeclaration kleene_star__variableDeclarationList_2
    ;

variableDeclaration
    : assignable optional__variableDeclaration_2
    ;

emptyStatement
    : SemiColon
    ;

expressionStatement
    : {this.notOpenBraceAndNotFunction()}? expressionSequence eos
    ;

ifStatement
    : If '(' expressionSequence ')' statement optional__ifStatement_2
    ;

varModifier
    : Var
    | let_
    | Const
    ;

continueStatement
    : Continue optional__continueStatement_2 eos
    ;

breakStatement
    : Break optional__continueStatement_2 eos
    ;

returnStatement
    : Return optional__returnStatement_2 eos
    ;

yieldStatement
    : Yield optional__returnStatement_2 eos
    ;

withStatement
    : With '(' expressionSequence ')' statement
    ;

switchStatement
    : Switch '(' expressionSequence ')' caseBlock
    ;

caseBlock
    : '{' optional__caseBlock_1 optional__caseBlock_4 '}'
    ;

caseClauses
    : caseClause+
    ;

caseClause
    : Case expressionSequence ':' optional__block_1
    ;

defaultClause
    : Default ':' optional__block_1
    ;

labelledStatement
    : identifier ':' statement
    ;

throwStatement
    : Throw {this.notLineTerminator()}? expressionSequence eos
    ;

tryStatement
    : Try block altnt_block__tryStatement_2
    ;

catchProduction
    : Catch optional__catchProduction_3 block
    ;

finallyProduction
    : Finally block
    ;

debuggerStatement
    : Debugger eos
    ;

functionDeclaration
    : optional__functionDeclaration_1 Function optional__functionDeclaration_2 identifier '(' optional__functionDeclaration_3 ')' functionBody
    ;

classDeclaration
    : Class identifier classTail
    ;

classTail
    : optional__classTail_2 '{' kleene_star__classTail_3 '}'
    ;

classElement
    : aux_rule__classElement_5
    | emptyStatement
    | aux_rule__classElement_6
    ;

methodDefinition
    : altnt_block__methodDefinition_9 ')' functionBody
    ;

formalParameterList
    : aux_rule__formalParameterList_5
    | lastFormalParameterArg
    ;

lastFormalParameterArg
    : Ellipsis singleExpression
    ;

functionBody
    : '{' optional__program_2 '}'
    ;

sourceElements
    : sourceElement+
    ;

arrayLiteral
    : '[' elementList ']'
    ;

elementList
    : kleene_star__elementList_1 optional__elementList_2 kleene_star__elementList_5 kleene_star__elementList_1
    ;

arrayElement
    : optional__arrayElement_1 singleExpression
    ;

propertyAssignment
    : aux_rule__propertyAssignment_8
    | aux_rule__propertyAssignment_9
    ;

propertyName
    : identifierName
    | StringLiteral
    | numericLiteral
    | aux_rule__propertyName_1
    ;

arguments
    : '(' optional__arguments_5 ')'
    ;

argument
    : optional__arrayElement_1 altnt_block__argument_2
    ;

expressionSequence
    : singleExpression kleene_star__expressionSequence_2
    ;

assignable
    : identifier
    | arrayLiteral
    | objectLiteral
    ;

objectLiteral
    : '{' optional__objectLiteral_4 optional__moduleItems_3 '}'
    ;

arrowFunctionParameters
    : identifier
    | aux_rule__arrowFunctionParameters_2
    ;

arrowFunctionBody
    : singleExpression
    | functionBody
    ;

numericLiteral
    : DecimalLiteral
    | HexIntegerLiteral
    | OctalIntegerLiteral
    | OctalIntegerLiteral2
    | BinaryIntegerLiteral
    ;

getter
    : {this.n("get")}? identifier propertyName
    ;

setter
    : {this.n("set")}? identifier propertyName
    ;

identifier
    : Identifier
    | NonStrictLet
    | Async
    ;

let_
    : NonStrictLet
    | StrictLet
    ;

eos
    : SemiColon
    | EOF
    | aux_rule__eos_1
    | aux_rule__eos_2
    ;

optional__program_1
    : HashBangLine?
    ;

optional__program_2
    : sourceElements?
    ;

optional__block_1
    : statementList?
    ;

optional__importFromBlock_1
    : importDefault?
    ;

kleene_star__moduleItems_2
    : importDefault*
    ;

optional__moduleItems_3
    : ','?
    ;

aux_rule__moduleItems_4
    : aliasName optional__moduleItems_3
    ;

optional__moduleItems_5
    : aux_rule__moduleItems_4?
    ;

aux_rule__importNamespace_1
    : As identifierName
    ;

optional__importNamespace_2
    : aux_rule__importNamespace_1?
    ;

optional__exportFromBlock_1
    : importFrom?
    ;

aux_rule__variableDeclarationList_1
    : ',' variableDeclaration
    ;

kleene_star__variableDeclarationList_2
    : aux_rule__variableDeclarationList_1*
    ;

aux_rule__variableDeclaration_1
    : '=' singleExpression
    ;

optional__variableDeclaration_2
    : aux_rule__variableDeclaration_1?
    ;

aux_rule__ifStatement_1
    : Else statement
    ;

optional__ifStatement_2
    : aux_rule__ifStatement_1?
    ;

aux_rule__iterationStatement_1
    : expressionSequence
    | variableDeclarationList
    ;

optional__iterationStatement_2
    : aux_rule__iterationStatement_1?
    ;

optional__iterationStatement_3
    : expressionSequence?
    ;

optional__iterationStatement_5
    : Await?
    ;

aux_rule__continueStatement_1
    : {this.notLineTerminator()}? identifier
    ;

optional__continueStatement_2
    : aux_rule__continueStatement_1?
    ;

aux_rule__returnStatement_1
    : {this.notLineTerminator()}? expressionSequence
    ;

optional__returnStatement_2
    : aux_rule__returnStatement_1?
    ;

optional__caseBlock_1
    : caseClauses?
    ;

aux_rule__caseBlock_3
    : defaultClause optional__caseBlock_1
    ;

optional__caseBlock_4
    : aux_rule__caseBlock_3?
    ;

optional__tryStatement_1
    : finallyProduction?
    ;

optional__catchProduction_1
    : assignable?
    ;

aux_rule__catchProduction_2
    : '(' optional__catchProduction_1 ')'
    ;

optional__catchProduction_3
    : aux_rule__catchProduction_2?
    ;

optional__functionDeclaration_1
    : Async?
    ;

optional__functionDeclaration_2
    : '*'?
    ;

optional__functionDeclaration_3
    : formalParameterList?
    ;

aux_rule__classTail_1
    : Extends singleExpression
    ;

optional__classTail_2
    : aux_rule__classTail_1?
    ;

kleene_star__classTail_3
    : classElement*
    ;

aux_rule__classElement_1
    : Static
    | aux_rule__classElement_7
    | Async
    ;

kleene_star__classElement_2
    : aux_rule__classElement_1*
    ;

aux_rule__formalParameterList_3
    : ',' lastFormalParameterArg
    ;

optional__formalParameterList_4
    : aux_rule__formalParameterList_3?
    ;

kleene_star__elementList_1
    : ','*
    ;

optional__elementList_2
    : arrayElement?
    ;

kleene_plus__elementList_3
    : ','+
    ;

aux_rule__elementList_4
    : kleene_plus__elementList_3 arrayElement
    ;

kleene_star__elementList_5
    : aux_rule__elementList_4*
    ;

optional__arrayElement_1
    : Ellipsis?
    ;

aux_rule__arguments_1
    : ',' argument
    ;

kleene_star__arguments_2
    : aux_rule__arguments_1*
    ;

aux_rule__arguments_4
    : argument kleene_star__arguments_2 optional__moduleItems_3
    ;

optional__arguments_5
    : aux_rule__arguments_4?
    ;

aux_rule__expressionSequence_1
    : ',' singleExpression
    ;

kleene_star__expressionSequence_2
    : aux_rule__expressionSequence_1*
    ;

aux_rule__objectLiteral_1
    : ',' propertyAssignment
    ;

kleene_star__objectLiteral_2
    : aux_rule__objectLiteral_1*
    ;

aux_rule__objectLiteral_3
    : propertyAssignment kleene_star__objectLiteral_2
    ;

optional__objectLiteral_4
    : aux_rule__objectLiteral_3?
    ;

optional__singleExpression_1
    : identifier?
    ;

optional__singleExpression_2
    : '?'?
    ;

optional__singleExpression_3
    : '#'?
    ;

optional__singleExpression_4
    : arguments?
    ;

aux_rule__singleExpression_6
    : aux_rule__singleExpression_15
    | aux_rule__singleExpression_16
    | arguments
    | TemplateStringLiteral
    | aux_rule__singleExpression_17
    | aux_rule__singleExpression_18
    ;

kleene_star__singleExpression_5
    : aux_rule__singleExpression_6*
    ;

singleExpression
    : aux_rule__singleExpression_7 kleene_star__singleExpression_5
    ;

aux_rule__singleExpression_8
    : New '.'
    ;

optional__singleExpression_9
    : aux_rule__singleExpression_8?
    ;

altnt_block__iterationStatement_6
    : aux_rule__iterationStatement_11
    | aux_rule__iterationStatement_12
    ;

altnt_block__importFromBlock_2
    : aux_rule__importFromBlock_4
    | StringLiteral
    ;

altnt_block__exportFromBlock_2
    : aux_rule__exportFromBlock_3
    | aux_rule__exportFromBlock_4
    ;

altnt_block__singleExpression_11
    : '++'
    | '--'
    ;

altnt_block__singleExpression_12
    : Delete
    | Void
    | Typeof
    | '++'
    | '--'
    | '+'
    | '-'
    | '~'
    | '!'
    | Await
    ;

altnt_block__singleExpression_13
    : aux_rule__singleExpression_19
    | aux_rule__singleExpression_20
    ;

altnt_block__methodDefinition_9
    : optional__functionDeclaration_2 optional__singleExpression_3 altnt_block__methodDefinition_10
    ;

altnt_block__propertyAssignment_5
    : aux_rule__propertyAssignment_10
    | aux_rule__propertyAssignment_11
    | aux_rule__propertyAssignment_12
    ;

altnt_block__propertyAssignment_6
    : optional__arrayElement_1
    | aux_rule__propertyAssignment_13
    ;

altnt_block__iterationStatement_7
    : aux_rule__iterationStatement_13
    | aux_rule__iterationStatement_14
    ;

altnt_block__propertyAssignment_7
    : propertyName
    | aux_rule__propertyAssignment_14
    ;

altnt_block__iterationStatement_8
    : aux_rule__iterationStatement_15
    | aux_rule__iterationStatement_16
    ;

statement
    : block
    | variableStatement
    | importStatement
    | exportStatement
    | emptyStatement
    | classDeclaration
    | expressionStatement
    | ifStatement
    | aux_rule__statement_1
    | aux_rule__statement_2
    | continueStatement
    | breakStatement
    | returnStatement
    | yieldStatement
    | withStatement
    | labelledStatement
    | switchStatement
    | throwStatement
    | tryStatement
    | debuggerStatement
    | functionDeclaration
    ;

altnt_block__exportStatement_1
    : exportFromBlock
    | variableStatement
    | classDeclaration
    | functionDeclaration
    | aux_rule__exportStatement_2
    ;

altnt_block__singleExpression_10
    : '**'
    | '*'
    | '/'
    | '%'
    | '+'
    | '-'
    | '??'
    | '<<'
    | '>>'
    | '>>>'
    | '<'
    | '>'
    | '<='
    | '>='
    | Instanceof
    | In
    | '=='
    | '!='
    | '==='
    | '!=='
    | '&'
    | '^'
    | '|'
    | '&&'
    | '||'
    | aux_rule__singleExpression_21
    | '='
    | '*='
    | '/='
    | '%='
    | '+='
    | '-='
    | '<<='
    | '>>='
    | '>>>='
    | '&='
    | '^='
    | '|='
    | '**='
    ;

altnt_block__importNamespace_3
    : '*'
    | identifierName
    ;

altnt_block__tryStatement_2
    : aux_rule__tryStatement_3
    | finallyProduction
    ;

altnt_block__classElement_4
    : methodDefinition
    | aux_rule__classElement_8
    ;

altnt_block__argument_2
    : singleExpression
    | identifier
    ;

altnt_block__importFromBlock_3
    : importNamespace
    | moduleItems
    ;

altnt_block__iterationStatement_9
    : singleExpression
    | variableDeclarationList
    ;

altnt_block__singleExpression_14
    : aux_rule__singleExpression_22
    | aux_rule__singleExpression_23
    ;

altnt_block__methodDefinition_10
    : aux_rule__methodDefinition_12
    | aux_rule__methodDefinition_13
    ;

altnt_block__methodDefinition_11
    : propertyName
    | setter
    ;

identifierName
    : identifier
    | Break
    | Do
    | Instanceof
    | Typeof
    | Case
    | Else
    | New
    | Var
    | Catch
    | Finally
    | Return
    | Void
    | Continue
    | For
    | Switch
    | While
    | Debugger
    | Function
    | This
    | With
    | Default
    | If
    | Throw
    | Delete
    | In
    | Try
    | Class
    | Enum
    | Extends
    | Super
    | Const
    | Export
    | Import
    | Implements
    | let_
    | Private
    | Public
    | Interface
    | Package
    | Protected
    | Static
    | Yield
    | Async
    | Await
    | From
    | As
    | NullLiteral
    | BooleanLiteral
    ;

aux_rule__singleExpression_7
    : functionDeclaration
    | aux_rule__singleExpression_24
    | aux_rule__singleExpression_25
    | aux_rule__singleExpression_26
    | yieldStatement
    | This
    | Super
    | NullLiteral
    | BooleanLiteral
    | StringLiteral
    | TemplateStringLiteral
    | RegularExpressionLiteral
    | numericLiteral
    | BigDecimalIntegerLiteral
    | BigHexIntegerLiteral
    | BigOctalIntegerLiteral
    | BigBinaryIntegerLiteral
    | arrayLiteral
    | objectLiteral
    | aux_rule__singleExpression_27
    | aux_rule__singleExpression_28
    | aux_rule__singleExpression_29
    ;

aux_rule__classElement_5
    : kleene_star__classElement_2 altnt_block__classElement_4
    ;

aux_rule__classElement_6
    : optional__singleExpression_3 propertyName '=' singleExpression
    ;

aux_rule__formalParameterList_5
    : variableDeclaration kleene_star__variableDeclarationList_2 optional__formalParameterList_4
    ;

aux_rule__propertyAssignment_8
    : altnt_block__propertyAssignment_5 ')' functionBody
    ;

aux_rule__propertyAssignment_9
    : altnt_block__propertyAssignment_6 singleExpression
    ;

aux_rule__propertyName_1
    : '[' singleExpression ']'
    ;

aux_rule__arrowFunctionParameters_2
    : '(' optional__functionDeclaration_3 ')'
    ;

aux_rule__eos_1
    : {this.lineTerminatorAhead()}?
    ;

aux_rule__eos_2
    : {this.closeBrace()}?
    ;

aux_rule__classElement_7
    : {this.n("static")}? identifier
    ;

aux_rule__singleExpression_15
    : '[' expressionSequence ']'
    ;

aux_rule__singleExpression_16
    : optional__singleExpression_2 '.' optional__singleExpression_3 identifierName
    ;

aux_rule__singleExpression_17
    : altnt_block__singleExpression_10 singleExpression
    ;

aux_rule__singleExpression_18
    : {this.notLineTerminator()}? altnt_block__singleExpression_11
    ;

aux_rule__iterationStatement_11
    : While '(' expressionSequence
    ;

aux_rule__iterationStatement_12
    : For altnt_block__iterationStatement_7
    ;

aux_rule__importFromBlock_4
    : optional__importFromBlock_1 altnt_block__importFromBlock_3 importFrom
    ;

aux_rule__exportFromBlock_3
    : importNamespace importFrom
    ;

aux_rule__exportFromBlock_4
    : moduleItems optional__exportFromBlock_1
    ;

aux_rule__singleExpression_19
    : Import '(' singleExpression
    ;

aux_rule__singleExpression_20
    : '(' expressionSequence
    ;

aux_rule__propertyAssignment_10
    : optional__functionDeclaration_1 optional__functionDeclaration_2 propertyName '(' optional__functionDeclaration_3
    ;

aux_rule__propertyAssignment_11
    : getter '('
    ;

aux_rule__propertyAssignment_12
    : setter '(' variableDeclaration
    ;

aux_rule__propertyAssignment_13
    : altnt_block__propertyAssignment_7 ':'
    ;

aux_rule__iterationStatement_13
    : optional__iterationStatement_5 '(' altnt_block__iterationStatement_9 identifier {this.p("of")}? expressionSequence
    ;

aux_rule__iterationStatement_14
    : '(' altnt_block__iterationStatement_8
    ;

aux_rule__propertyAssignment_14
    : '[' singleExpression ']'
    ;

aux_rule__iterationStatement_15
    : optional__iterationStatement_2 ';' optional__iterationStatement_3 ';' optional__iterationStatement_3
    ;

aux_rule__iterationStatement_16
    : altnt_block__iterationStatement_9 In expressionSequence
    ;

aux_rule__statement_1
    : Do statement While '(' expressionSequence ')' eos
    ;

aux_rule__statement_2
    : altnt_block__iterationStatement_6 ')' statement
    ;

aux_rule__exportStatement_2
    : Default singleExpression
    ;

aux_rule__singleExpression_21
    : '?' singleExpression ':'
    ;

aux_rule__tryStatement_3
    : catchProduction optional__tryStatement_1
    ;

aux_rule__classElement_8
    : assignable '=' objectLiteral ';'
    ;

aux_rule__singleExpression_22
    : Function optional__functionDeclaration_2 '(' optional__functionDeclaration_3 ')' functionBody
    ;

aux_rule__singleExpression_23
    : arrowFunctionParameters '=>' arrowFunctionBody
    ;

aux_rule__methodDefinition_12
    : getter '('
    ;

aux_rule__methodDefinition_13
    : altnt_block__methodDefinition_11 '(' optional__functionDeclaration_3
    ;

aux_rule__singleExpression_24
    : Class optional__singleExpression_1 classTail
    ;

aux_rule__singleExpression_25
    : New singleExpression optional__singleExpression_4
    ;

aux_rule__singleExpression_26
    : optional__singleExpression_9 identifier
    ;

aux_rule__singleExpression_27
    : altnt_block__singleExpression_12 singleExpression
    ;

aux_rule__singleExpression_28
    : altnt_block__singleExpression_13 ')'
    ;

aux_rule__singleExpression_29
    : optional__functionDeclaration_1 altnt_block__singleExpression_14
    ;

