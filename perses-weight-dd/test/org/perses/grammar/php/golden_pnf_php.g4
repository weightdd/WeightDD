// Auto-generated by Perses AST.
// DO NOT MODIFY.
parser grammar PnfPhpParser;

options {
    tokenVocab=PhpLexer;
}


htmlDocument
    : optional__htmlDocument_1 kleene_star__htmlDocument_3 EOF
    ;

inlineHtml
    : kleene_plus__inlineHtml_1
    | scriptText
    ;

htmlElement
    : HtmlDtd
    | HtmlClose
    | HtmlStyleOpen
    | HtmlOpen
    | HtmlName
    | HtmlSlashClose
    | HtmlSlash
    | HtmlText
    | HtmlEquals
    | HtmlStartQuoteString
    | HtmlEndQuoteString
    | HtmlStartDoubleQuoteString
    | HtmlEndDoubleQuoteString
    | HtmlHex
    | HtmlDecimal
    | HtmlQuoteString
    | HtmlDoubleQuoteString
    | StyleBody
    | HtmlScriptOpen
    | HtmlScriptClose
    | aux_rule__htmlElement_2
    ;

scriptText
    : ScriptText+
    ;

phpBlock
    : kleene_star__phpBlock_1 kleene_plus__phpBlock_2
    ;

importStatement
    : Import Namespace namespaceNameList SemiColon
    ;

topStatement
    : statement
    | useDeclaration
    | namespaceDeclaration
    | functionDeclaration
    | classDeclaration
    | globalConstantDeclaration
    ;

useDeclaration
    : Use optional__useDeclaration_2 useDeclarationContentList SemiColon
    ;

useDeclarationContentList
    : optional__useDeclarationContentList_1 useDeclarationContent kleene_star__useDeclarationContentList_4
    ;

useDeclarationContent
    : namespaceNameList
    ;

namespaceDeclaration
    : Namespace altnt_block__namespaceDeclaration_3
    ;

namespaceStatement
    : statement
    | useDeclaration
    | functionDeclaration
    | classDeclaration
    | globalConstantDeclaration
    ;

functionDeclaration
    : optional__functionDeclaration_1 Function_ optional__functionDeclaration_2 identifier optional__functionDeclaration_3 '(' formalParameterList ')' optional__functionDeclaration_6 blockStatement
    ;

classDeclaration
    : optional__functionDeclaration_1 optional__classDeclaration_2 optional__classDeclaration_3 optional__classDeclaration_4 altnt_block__classDeclaration_14 OpenCurlyBracket kleene_star__classDeclaration_13 CloseCurlyBracket
    ;

classEntryType
    : Class
    | Trait
    ;

interfaceList
    : qualifiedStaticTypeRef kleene_star__interfaceList_2
    ;

typeParameterListInBrackets
    : '<:' altnt_block__typeParameterListInBrackets_3 ':>'
    ;

typeParameterList
    : typeParameterDecl kleene_star__typeParameterList_2
    ;

typeParameterWithDefaultsList
    : typeParameterWithDefaultDecl kleene_star__typeParameterWithDefaultsList_2
    ;

typeParameterDecl
    : optional__functionDeclaration_1 identifier
    ;

typeParameterWithDefaultDecl
    : optional__functionDeclaration_1 identifier Eq altnt_block__typeParameterWithDefaultDecl_2
    ;

genericDynamicArgs
    : '<:' typeRef kleene_star__genericDynamicArgs_2 ':>'
    ;

attributes
    : attributeGroup+
    ;

attributeGroup
    : AttributeStart optional__attributeGroup_2 attribute kleene_star__attributeGroup_4 ']'
    ;

attribute
    : qualifiedNamespaceName optional__attribute_1
    ;

innerStatementList
    : innerStatement*
    ;

innerStatement
    : statement
    | functionDeclaration
    | classDeclaration
    ;

statement
    : aux_rule__statement_1
    | blockStatement
    | ifStatement
    | whileStatement
    | doWhileStatement
    | forStatement
    | switchStatement
    | breakStatement
    | continueStatement
    | returnStatement
    | aux_rule__statement_2
    | globalStatement
    | staticVariableStatement
    | echoStatement
    | expressionStatement
    | unsetStatement
    | foreachStatement
    | tryCatchFinally
    | throwStatement
    | gotoStatement
    | declareStatement
    | emptyStatement
    | inlineHtmlStatement
    ;

emptyStatement
    : SemiColon
    ;

blockStatement
    : OpenCurlyBracket innerStatementList CloseCurlyBracket
    ;

ifStatement
    : If parentheses altnt_block__ifStatement_5
    ;

elseIfStatement
    : ElseIf parentheses statement
    ;

elseIfColonStatement
    : ElseIf parentheses ':' innerStatementList
    ;

elseStatement
    : Else statement
    ;

elseColonStatement
    : Else ':' innerStatementList
    ;

whileStatement
    : While parentheses altnt_block__whileStatement_1
    ;

doWhileStatement
    : Do statement While parentheses SemiColon
    ;

forStatement
    : For '(' optional__forStatement_1 SemiColon optional__forStatement_2 SemiColon optional__forStatement_1 ')' altnt_block__forStatement_4
    ;

forInit
    : expressionList
    ;

switchStatement
    : Switch parentheses altnt_block__switchStatement_5
    ;

switchBlock
    : kleene_plus__switchBlock_2 innerStatementList
    ;

breakStatement
    : Break optional__breakStatement_1 SemiColon
    ;

continueStatement
    : Continue optional__breakStatement_1 SemiColon
    ;

returnStatement
    : Return optional__breakStatement_1 SemiColon
    ;

expressionStatement
    : expression SemiColon
    ;

unsetStatement
    : Unset '(' chainList ')' SemiColon
    ;

foreachStatement
    : Foreach altnt_block__foreachStatement_8 altnt_block__foreachStatement_9
    ;

tryCatchFinally
    : Try blockStatement altnt_block__tryCatchFinally_4
    ;

catchClause
    : Catch '(' qualifiedStaticTypeRef kleene_star__catchClause_2 VarName ')' blockStatement
    ;

finallyStatement
    : Finally blockStatement
    ;

throwStatement
    : Throw expression SemiColon
    ;

gotoStatement
    : Goto identifier SemiColon
    ;

declareStatement
    : Declare '(' declareList ')' altnt_block__declareStatement_1
    ;

inlineHtmlStatement
    : inlineHtml+
    ;

declareList
    : identifierInitializer kleene_star__globalConstantDeclaration_3
    ;

formalParameterList
    : optional__formalParameterList_1 kleene_star__formalParameterList_3 optional__formalParameterList_4
    ;

formalParameter
    : optional__functionDeclaration_1 optional__formalParameter_2 optional__functionDeclaration_4 optional__classStatement_2 optional__functionDeclaration_2 optional__formalParameter_6 variableInitializer
    ;

globalStatement
    : Global globalVar kleene_star__globalStatement_2 SemiColon
    ;

globalVar
    : VarName
    | aux_rule__globalVar_2
    ;

echoStatement
    : Echo expressionList SemiColon
    ;

staticVariableStatement
    : Static variableInitializer kleene_star__classStatement_4 SemiColon
    ;

classStatement
    : aux_rule__classStatement_14
    | aux_rule__classStatement_15
    ;

traitAdaptations
    : SemiColon
    | aux_rule__traitAdaptations_2
    ;

traitAdaptationStatement
    : traitPrecedence
    | traitAlias
    ;

traitPrecedence
    : qualifiedNamespaceName '::' identifier InsteadOf qualifiedNamespaceNameList SemiColon
    ;

traitAlias
    : traitMethodReference As altnt_block__traitAlias_2 SemiColon
    ;

traitMethodReference
    : optional__traitMethodReference_2 identifier
    ;

baseCtorCall
    : ':' identifier optional__attribute_1
    ;

methodBody
    : SemiColon
    | blockStatement
    ;

propertyModifiers
    : memberModifiers
    | Var
    ;

memberModifiers
    : memberModifier+
    ;

variableInitializer
    : VarName optional__variableInitializer_2
    ;

identifierInitializer
    : identifier Eq constantInitializer
    ;

globalConstantDeclaration
    : optional__functionDeclaration_1 Const identifierInitializer kleene_star__globalConstantDeclaration_3 SemiColon
    ;

expressionList
    : expression kleene_star__expressionList_2
    ;

parentheses
    : '(' altnt_block__parentheses_1 ')'
    ;

assignable
    : chain
    | arrayCreation
    ;

arrayCreation
    : altnt_block__arrayCreation_5 optional__arrayCreation_4
    ;

matchExpr
    : Match '(' expression ')' OpenCurlyBracket matchItem kleene_star__matchExpr_2 optional__formalParameterList_4 CloseCurlyBracket
    ;

matchItem
    : expression kleene_star__expressionList_2 '=>' expression
    ;

newExpr
    : New typeRef optional__attribute_1
    ;

assignmentOperator
    : Eq
    | '+='
    | '-='
    | '*='
    | '**='
    | '/='
    | '.='
    | '%='
    | '&='
    | '|='
    | '^='
    | '<<='
    | '>>='
    | '??='
    ;

yieldExpression
    : Yield altnt_block__yieldExpression_3
    ;

arrayItemList
    : arrayItem kleene_star__arrayItemList_2 optional__formalParameterList_4
    ;

arrayItem
    : aux_rule__arrayItem_5
    | aux_rule__arrayItem_6
    ;

lambdaFunctionUseVars
    : Use '(' lambdaFunctionUseVar kleene_star__lambdaFunctionUseVars_2 ')'
    ;

lambdaFunctionUseVar
    : optional__functionDeclaration_2 VarName
    ;

qualifiedStaticTypeRef
    : aux_rule__qualifiedStaticTypeRef_2
    | Static
    ;

typeRef
    : aux_rule__typeRef_3
    | primitiveType
    | Static
    | anonymousClass
    ;

anonymousClass
    : optional__functionDeclaration_1 optional__classDeclaration_2 optional__classDeclaration_3 optional__classDeclaration_4 altnt_block__anonymousClass_14 OpenCurlyBracket kleene_star__classDeclaration_13 CloseCurlyBracket
    ;

indirectTypeRef
    : chainBase kleene_star__indirectTypeRef_2
    ;

qualifiedNamespaceName
    : optional__qualifiedNamespaceName_1 optional__useDeclarationContentList_1 namespaceNameList
    ;

namespaceNameList
    : identifier optional__namespaceNameList_6
    ;

namespaceNameTail
    : aux_rule__namespaceNameTail_6
    | aux_rule__namespaceNameTail_7
    ;

qualifiedNamespaceNameList
    : qualifiedNamespaceName kleene_star__qualifiedNamespaceNameList_2
    ;

arguments
    : '(' optional__arguments_4 optional__formalParameterList_4 ')'
    ;

actualArgument
    : aux_rule__actualArgument_3
    | aux_rule__actualArgument_4
    ;

constantInitializer
    : constant
    | string
    | aux_rule__constantInitializer_8
    | aux_rule__constantInitializer_9
    | aux_rule__constantInitializer_10
    ;

classConstant
    : aux_rule__classConstant_5
    | aux_rule__classConstant_6
    ;

stringConstant
    : Label
    ;

string
    : SingleQuoteString
    | aux_rule__string_5
    | aux_rule__string_6
    ;

interpolatedStringPart
    : StringPart
    | UnicodeEscape
    | chain
    ;

chainList
    : chain kleene_star__chainList_2
    ;

chain
    : chainOrigin kleene_star__chain_1
    ;

chainOrigin
    : chainBase
    | functionCall
    | aux_rule__chainOrigin_1
    ;

memberAccess
    : '->' keyedFieldName optional__memberAccess_1
    ;

functionCall
    : functionCallName actualArguments
    ;

functionCallName
    : qualifiedNamespaceName
    | classConstant
    | chainBase
    | parentheses
    ;

actualArguments
    : optional__qualifiedStaticTypeRef_1 arguments kleene_star__keyedVariable_2
    ;

chainBase
    : aux_rule__chainBase_3
    | aux_rule__chainBase_4
    ;

keyedFieldName
    : keyedSimpleFieldName
    | keyedVariable
    ;

keyedSimpleFieldName
    : altnt_block__keyedSimpleFieldName_2 kleene_star__keyedVariable_2
    ;

keyedVariable
    : kleene_star__keyedVariable_1 altnt_block__keyedVariable_3 kleene_star__keyedVariable_2
    ;

squareCurlyExpression
    : aux_rule__squareCurlyExpression_2
    | aux_rule__squareCurlyExpression_3
    ;

assignmentList
    : optional__assignmentList_1 kleene_star__assignmentList_4
    ;

assignmentListElement
    : chain
    | aux_rule__assignmentListElement_1
    | arrayItem
    ;

modifier
    : Abstract
    | Final
    ;

identifier
    : Label
    | Abstract
    | Array
    | As
    | BinaryCast
    | BoolType
    | BooleanConstant
    | Break
    | Callable
    | Case
    | Catch
    | Class
    | Clone
    | Const
    | Continue
    | Declare
    | Default
    | Do
    | DoubleCast
    | DoubleType
    | Echo
    | Else
    | ElseIf
    | Empty
    | EndDeclare
    | EndFor
    | EndForeach
    | EndIf
    | EndSwitch
    | EndWhile
    | Eval
    | Exit
    | Extends
    | Final
    | Finally
    | FloatCast
    | For
    | Foreach
    | Function_
    | Global
    | Goto
    | If
    | Implements
    | Import
    | Include
    | IncludeOnce
    | InstanceOf
    | InsteadOf
    | Int16Cast
    | Int64Type
    | Int8Cast
    | Interface
    | IntType
    | IsSet
    | List
    | LogicalAnd
    | LogicalOr
    | LogicalXor
    | Namespace
    | New
    | Null
    | ObjectType
    | Parent_
    | Partial
    | Print
    | Private
    | Protected
    | Public
    | Require
    | RequireOnce
    | Resource
    | Return
    | Static
    | StringType
    | Switch
    | Throw
    | Trait
    | Try
    | Typeof
    | UintCast
    | UnicodeCast
    | Unset
    | Use
    | Var
    | While
    | Yield
    | From
    | Get
    | Set
    | Call
    | CallStatic
    | Constructor
    | Destruct
    | Wakeup
    | Sleep
    | Autoload
    | IsSet__
    | Unset__
    | ToString__
    | Invoke
    | SetState
    | Clone__
    | DebugInfo
    | Namespace__
    | Class__
    | Traic__
    | Function__
    | Method__
    | Line__
    | File__
    | Dir__
    ;

memberModifier
    : Public
    | Protected
    | Private
    | Static
    | Abstract
    | Final
    ;

primitiveType
    : BoolType
    | IntType
    | Int64Type
    | DoubleType
    | StringType
    | Resource
    | ObjectType
    | Array
    ;

castOperation
    : BoolType
    | Int8Cast
    | Int16Cast
    | IntType
    | Int64Type
    | UintCast
    | DoubleCast
    | DoubleType
    | FloatCast
    | StringType
    | BinaryCast
    | UnicodeCast
    | Array
    | ObjectType
    | Resource
    | Unset
    ;

optional__htmlDocument_1
    : Shebang?
    ;

aux_rule__htmlDocument_2
    : inlineHtml
    | phpBlock
    ;

kleene_star__htmlDocument_3
    : aux_rule__htmlDocument_2*
    ;

kleene_plus__inlineHtml_1
    : htmlElement+
    ;

kleene_star__htmlElement_1
    : XmlText*
    ;

kleene_star__phpBlock_1
    : importStatement*
    ;

kleene_plus__phpBlock_2
    : topStatement+
    ;

aux_rule__useDeclaration_1
    : Function_
    | Const
    ;

optional__useDeclaration_2
    : aux_rule__useDeclaration_1?
    ;

optional__useDeclarationContentList_1
    : '\\'?
    ;

aux_rule__useDeclarationContentList_3
    : ',' optional__useDeclarationContentList_1 useDeclarationContent
    ;

kleene_star__useDeclarationContentList_4
    : aux_rule__useDeclarationContentList_3*
    ;

optional__namespaceDeclaration_1
    : namespaceNameList?
    ;

kleene_star__namespaceDeclaration_2
    : namespaceStatement*
    ;

optional__functionDeclaration_1
    : attributes?
    ;

optional__functionDeclaration_2
    : '&'?
    ;

optional__functionDeclaration_3
    : typeParameterListInBrackets?
    ;

optional__functionDeclaration_4
    : QuestionMark?
    ;

aux_rule__functionDeclaration_5
    : ':' optional__functionDeclaration_4 typeHint
    ;

optional__functionDeclaration_6
    : aux_rule__functionDeclaration_5?
    ;

optional__classDeclaration_2
    : Private?
    ;

optional__classDeclaration_3
    : modifier?
    ;

optional__classDeclaration_4
    : Partial?
    ;

aux_rule__classDeclaration_6
    : Extends qualifiedStaticTypeRef
    ;

optional__classDeclaration_7
    : aux_rule__classDeclaration_6?
    ;

aux_rule__classDeclaration_8
    : Implements interfaceList
    ;

optional__classDeclaration_9
    : aux_rule__classDeclaration_8?
    ;

aux_rule__classDeclaration_11
    : Extends interfaceList
    ;

optional__classDeclaration_12
    : aux_rule__classDeclaration_11?
    ;

kleene_star__classDeclaration_13
    : classStatement*
    ;

aux_rule__interfaceList_1
    : ',' qualifiedStaticTypeRef
    ;

kleene_star__interfaceList_2
    : aux_rule__interfaceList_1*
    ;

aux_rule__typeParameterList_1
    : ',' typeParameterDecl
    ;

kleene_star__typeParameterList_2
    : aux_rule__typeParameterList_1*
    ;

aux_rule__typeParameterWithDefaultsList_1
    : ',' typeParameterWithDefaultDecl
    ;

kleene_star__typeParameterWithDefaultsList_2
    : aux_rule__typeParameterWithDefaultsList_1*
    ;

aux_rule__genericDynamicArgs_1
    : ',' typeRef
    ;

kleene_star__genericDynamicArgs_2
    : aux_rule__genericDynamicArgs_1*
    ;

aux_rule__attributeGroup_1
    : identifier ':'
    ;

optional__attributeGroup_2
    : aux_rule__attributeGroup_1?
    ;

aux_rule__attributeGroup_3
    : ',' attribute
    ;

kleene_star__attributeGroup_4
    : aux_rule__attributeGroup_3*
    ;

optional__attribute_1
    : arguments?
    ;

kleene_star__ifStatement_1
    : elseIfStatement*
    ;

optional__ifStatement_2
    : elseStatement?
    ;

kleene_star__ifStatement_3
    : elseIfColonStatement*
    ;

optional__ifStatement_4
    : elseColonStatement?
    ;

optional__forStatement_1
    : forInit?
    ;

optional__forStatement_2
    : expressionList?
    ;

optional__switchStatement_1
    : SemiColon?
    ;

kleene_star__switchStatement_2
    : switchBlock*
    ;

aux_rule__switchBlock_1
    : altnt_block__switchBlock_3 altnt_block__switchBlock_4
    ;

kleene_plus__switchBlock_2
    : aux_rule__switchBlock_1+
    ;

optional__breakStatement_1
    : expression?
    ;

aux_rule__foreachStatement_3
    : '=>' optional__functionDeclaration_2 chain
    ;

optional__foreachStatement_4
    : aux_rule__foreachStatement_3?
    ;

kleene_plus__tryCatchFinally_1
    : catchClause+
    ;

optional__tryCatchFinally_2
    : finallyStatement?
    ;

kleene_star__tryCatchFinally_3
    : catchClause*
    ;

aux_rule__catchClause_1
    : '|' qualifiedStaticTypeRef
    ;

kleene_star__catchClause_2
    : aux_rule__catchClause_1*
    ;

optional__formalParameterList_1
    : formalParameter?
    ;

aux_rule__formalParameterList_2
    : ',' formalParameter
    ;

kleene_star__formalParameterList_3
    : aux_rule__formalParameterList_2*
    ;

optional__formalParameterList_4
    : ','?
    ;

optional__formalParameter_2
    : memberModifier?
    ;

optional__formalParameter_6
    : '...'?
    ;

aux_rule__globalStatement_1
    : ',' globalVar
    ;

kleene_star__globalStatement_2
    : aux_rule__globalStatement_1*
    ;

optional__classStatement_2
    : typeHint?
    ;

aux_rule__classStatement_3
    : ',' variableInitializer
    ;

kleene_star__classStatement_4
    : aux_rule__classStatement_3*
    ;

optional__classStatement_5
    : memberModifiers?
    ;

optional__classStatement_11
    : baseCtorCall?
    ;

kleene_star__traitAdaptations_1
    : traitAdaptationStatement*
    ;

aux_rule__traitMethodReference_1
    : qualifiedNamespaceName '::'
    ;

optional__traitMethodReference_2
    : aux_rule__traitMethodReference_1?
    ;

aux_rule__variableInitializer_1
    : Eq constantInitializer
    ;

optional__variableInitializer_2
    : aux_rule__variableInitializer_1?
    ;

aux_rule__globalConstantDeclaration_2
    : ',' identifierInitializer
    ;

kleene_star__globalConstantDeclaration_3
    : aux_rule__globalConstantDeclaration_2*
    ;

aux_rule__expressionList_1
    : ',' expression
    ;

kleene_star__expressionList_2
    : aux_rule__expressionList_1*
    ;

optional__arrayCreation_1
    : arrayItemList?
    ;

aux_rule__arrayCreation_3
    : '[' expression ']'
    ;

optional__arrayCreation_4
    : aux_rule__arrayCreation_3?
    ;

optional__lambdaFunctionExpr_1
    : Static?
    ;

optional__lambdaFunctionExpr_3
    : lambdaFunctionUseVars?
    ;

aux_rule__lambdaFunctionExpr_4
    : ':' typeHint
    ;

optional__lambdaFunctionExpr_5
    : aux_rule__lambdaFunctionExpr_4?
    ;

aux_rule__matchExpr_1
    : ',' matchItem
    ;

kleene_star__matchExpr_2
    : aux_rule__matchExpr_1*
    ;

aux_rule__yieldExpression_1
    : '=>' expression
    ;

optional__yieldExpression_2
    : aux_rule__yieldExpression_1?
    ;

aux_rule__arrayItemList_1
    : ',' arrayItem
    ;

kleene_star__arrayItemList_2
    : aux_rule__arrayItemList_1*
    ;

aux_rule__arrayItem_3
    : expression '=>'
    ;

optional__arrayItem_4
    : aux_rule__arrayItem_3?
    ;

aux_rule__lambdaFunctionUseVars_1
    : ',' lambdaFunctionUseVar
    ;

kleene_star__lambdaFunctionUseVars_2
    : aux_rule__lambdaFunctionUseVars_1*
    ;

optional__qualifiedStaticTypeRef_1
    : genericDynamicArgs?
    ;

aux_rule__indirectTypeRef_1
    : '->' keyedFieldName
    ;

kleene_star__indirectTypeRef_2
    : aux_rule__indirectTypeRef_1*
    ;

optional__qualifiedNamespaceName_1
    : Namespace?
    ;

aux_rule__namespaceNameList_1
    : '\\' identifier
    ;

kleene_star__namespaceNameList_2
    : aux_rule__namespaceNameList_1*
    ;

aux_rule__namespaceNameList_3
    : '\\' namespaceNameTail
    ;

optional__namespaceNameList_4
    : aux_rule__namespaceNameList_3?
    ;

aux_rule__namespaceNameTail_1
    : As identifier
    ;

optional__namespaceNameTail_2
    : aux_rule__namespaceNameTail_1?
    ;

aux_rule__namespaceNameTail_3
    : ',' namespaceNameTail
    ;

kleene_star__namespaceNameTail_4
    : aux_rule__namespaceNameTail_3*
    ;

aux_rule__qualifiedNamespaceNameList_1
    : ',' qualifiedNamespaceName
    ;

kleene_star__qualifiedNamespaceNameList_2
    : aux_rule__qualifiedNamespaceNameList_1*
    ;

aux_rule__arguments_1
    : ',' actualArgument
    ;

kleene_star__arguments_2
    : aux_rule__arguments_1*
    ;

aux_rule__arguments_3
    : aux_rule__arguments_6
    | yieldExpression
    ;

optional__arguments_4
    : aux_rule__arguments_3?
    ;

aux_rule__constantInitializer_2
    : arrayItemList optional__formalParameterList_4
    ;

optional__constantInitializer_3
    : aux_rule__constantInitializer_2?
    ;

kleene_plus__string_1
    : HereDocText+
    ;

kleene_star__string_3
    : interpolatedStringPart*
    ;

aux_rule__chainList_1
    : ',' chain
    ;

kleene_star__chainList_2
    : aux_rule__chainList_1*
    ;

kleene_star__chain_1
    : memberAccess*
    ;

optional__memberAccess_1
    : actualArguments?
    ;

aux_rule__chainBase_1
    : '::' keyedVariable
    ;

optional__chainBase_2
    : aux_rule__chainBase_1?
    ;

kleene_star__keyedVariable_1
    : Dollar*
    ;

kleene_star__keyedVariable_2
    : squareCurlyExpression*
    ;

optional__assignmentList_1
    : assignmentListElement?
    ;

aux_rule__assignmentList_3
    : ',' optional__assignmentList_1
    ;

kleene_star__assignmentList_4
    : aux_rule__assignmentList_3*
    ;

aux_rule__expression_1
    : aux_rule__expression_17
    | parentheses
    ;

optional__expression_2
    : aux_rule__expression_1?
    ;

aux_rule__typeHint_2
    : '|' typeHint
    ;

kleene_star__typeHint_1
    : aux_rule__typeHint_2*
    ;

aux_rule__typeHint_3
    : qualifiedStaticTypeRef
    | Callable
    | primitiveType
    ;

typeHint
    : aux_rule__typeHint_3 kleene_star__typeHint_1
    ;

aux_rule__expression_7
    : aux_rule__expression_18
    | aux_rule__expression_19
    ;

kleene_star__expression_6
    : aux_rule__expression_7*
    ;

expression
    : aux_rule__expression_8 kleene_star__expression_6
    ;

aux_rule__namespaceNameList_5
    : kleene_star__namespaceNameList_2 optional__namespaceNameList_4
    ;

optional__namespaceNameList_6
    : aux_rule__namespaceNameList_5?
    ;

aux_rule__typeParameterListInBrackets_1
    : ',' typeParameterWithDefaultsList
    ;

optional__typeParameterListInBrackets_2
    : aux_rule__typeParameterListInBrackets_1?
    ;

altnt_block__expression_9
    : '++'
    | '--'
    ;

optional__expression_10
    : altnt_block__expression_9?
    ;

altnt_block__typeParameterListInBrackets_3
    : typeParameterWithDefaultsList
    | aux_rule__typeParameterListInBrackets_4
    ;

altnt_block__ifStatement_5
    : aux_rule__ifStatement_6
    | aux_rule__ifStatement_7
    ;

altnt_block__expression_11
    : '**'
    | '*'
    | Divide
    | '%'
    | '+'
    | '-'
    | '.'
    | '<<'
    | '>>'
    | Less
    | '<='
    | Greater
    | '>='
    | '==='
    | '!=='
    | '=='
    | IsNotEq
    | '&'
    | '^'
    | '|'
    | '&&'
    | '||'
    | aux_rule__expression_20
    | '??'
    | '<=>'
    | LogicalAnd
    | LogicalXor
    | LogicalOr
    ;

altnt_block__expression_13
    : aux_rule__expression_21
    | aux_rule__expression_22
    | aux_rule__expression_23
    ;

altnt_block__globalVar_1
    : chain
    | aux_rule__globalVar_3
    ;

aux_rule__expression_8
    : newExpr
    | aux_rule__expression_24
    | aux_rule__expression_25
    | aux_rule__expression_26
    | constant
    | string
    | Label
    | BackQuoteString
    | parentheses
    | arrayCreation
    | Yield
    | aux_rule__expression_27
    | aux_rule__expression_28
    | matchExpr
    | aux_rule__expression_29
    | aux_rule__expression_30
    | aux_rule__expression_31
    ;

altnt_block__namespaceDeclaration_3
    : aux_rule__namespaceDeclaration_4
    | aux_rule__namespaceDeclaration_5
    ;

altnt_block__classDeclaration_14
    : aux_rule__classDeclaration_15
    | aux_rule__classDeclaration_16
    ;

altnt_block__typeParameterWithDefaultDecl_2
    : qualifiedStaticTypeRef
    | primitiveType
    ;

altnt_block__whileStatement_1
    : statement
    | aux_rule__whileStatement_2
    ;

altnt_block__forStatement_4
    : statement
    | aux_rule__forStatement_5
    ;

altnt_block__switchStatement_5
    : aux_rule__switchStatement_6
    | aux_rule__switchStatement_7
    ;

altnt_block__foreachStatement_8
    : '(' altnt_block__foreachStatement_10 ')'
    ;

altnt_block__foreachStatement_9
    : statement
    | aux_rule__foreachStatement_12
    ;

altnt_block__tryCatchFinally_4
    : aux_rule__tryCatchFinally_5
    | aux_rule__tryCatchFinally_6
    ;

altnt_block__declareStatement_1
    : statement
    | aux_rule__declareStatement_2
    ;

altnt_block__classStatement_12
    : aux_rule__classStatement_16
    | aux_rule__classStatement_17
    ;

altnt_block__traitAlias_2
    : memberModifier
    | aux_rule__traitAlias_3
    ;

altnt_block__parentheses_1
    : expression
    | yieldExpression
    ;

altnt_block__arrayCreation_5
    : aux_rule__arrayCreation_6
    | aux_rule__arrayCreation_7
    ;

altnt_block__yieldExpression_3
    : aux_rule__yieldExpression_4
    | aux_rule__yieldExpression_5
    ;

altnt_block__typeRef_2
    : qualifiedNamespaceName
    | indirectTypeRef
    ;

altnt_block__anonymousClass_14
    : aux_rule__anonymousClass_15
    | aux_rule__anonymousClass_16
    ;

altnt_block__constantInitializer_7
    : '+'
    | '-'
    ;

altnt_block__classConstant_1
    : Class
    | Parent_
    ;

altnt_block__classConstant_2
    : identifier
    | Constructor
    | Get
    | Set
    ;

altnt_block__classConstant_3
    : qualifiedStaticTypeRef
    | keyedVariable
    | string
    ;

altnt_block__classConstant_4
    : identifier
    | keyedVariable
    ;

altnt_block__keyedSimpleFieldName_2
    : identifier
    | aux_rule__keyedSimpleFieldName_3
    ;

altnt_block__keyedVariable_3
    : VarName
    | aux_rule__keyedVariable_4
    ;

altnt_block__switchBlock_3
    : aux_rule__switchBlock_5
    | Default
    ;

altnt_block__switchBlock_4
    : ':'
    | SemiColon
    ;

altnt_block__expression_15
    : chain
    | newExpr
    ;

altnt_block__foreachStatement_10
    : aux_rule__foreachStatement_13
    | aux_rule__foreachStatement_14
    ;

altnt_block__string_4
    : StartHereDoc
    | StartNowDoc
    ;

altnt_block__foreachStatement_11
    : aux_rule__foreachStatement_15
    | aux_rule__foreachStatement_16
    ;

altnt_block__expression_16
    : aux_rule__expression_32
    | Clone
    | aux_rule__expression_33
    | '~'
    | '@'
    | '!'
    | '+'
    | '-'
    | Print
    | aux_rule__expression_34
    | Include
    | IncludeOnce
    | Require
    | RequireOnce
    | Throw
    | aux_rule__expression_35
    ;

constant
    : Null
    | Real
    | BooleanConstant
    | Octal
    | Decimal
    | Hex
    | Binary
    | stringConstant
    | Namespace__
    | Class__
    | Traic__
    | Function__
    | Method__
    | Line__
    | File__
    | Dir__
    | classConstant
    | qualifiedNamespaceName
    ;

altnt_block__classStatement_13
    : aux_rule__classStatement_18
    | aux_rule__classStatement_19
    ;

aux_rule__htmlElement_2
    : XmlStart kleene_star__htmlElement_1 XmlClose
    ;

aux_rule__statement_1
    : identifier ':'
    ;

aux_rule__statement_2
    : yieldExpression SemiColon
    ;

aux_rule__globalVar_2
    : Dollar altnt_block__globalVar_1
    ;

aux_rule__classStatement_14
    : optional__functionDeclaration_1 altnt_block__classStatement_12
    ;

aux_rule__classStatement_15
    : Use qualifiedNamespaceNameList traitAdaptations
    ;

aux_rule__traitAdaptations_2
    : OpenCurlyBracket kleene_star__traitAdaptations_1 CloseCurlyBracket
    ;

aux_rule__arrayItem_5
    : expression optional__yieldExpression_2
    ;

aux_rule__arrayItem_6
    : optional__arrayItem_4 '&' chain
    ;

aux_rule__qualifiedStaticTypeRef_2
    : qualifiedNamespaceName optional__qualifiedStaticTypeRef_1
    ;

aux_rule__typeRef_3
    : altnt_block__typeRef_2 optional__qualifiedStaticTypeRef_1
    ;

aux_rule__namespaceNameTail_6
    : identifier optional__namespaceNameTail_2
    ;

aux_rule__namespaceNameTail_7
    : OpenCurlyBracket namespaceNameTail kleene_star__namespaceNameTail_4 optional__formalParameterList_4 CloseCurlyBracket
    ;

aux_rule__actualArgument_3
    : optional__attributeGroup_2 optional__formalParameter_6 expression
    ;

aux_rule__actualArgument_4
    : '&' chain
    ;

aux_rule__constantInitializer_8
    : Array '(' optional__constantInitializer_3 ')'
    ;

aux_rule__constantInitializer_9
    : '[' optional__constantInitializer_3 ']'
    ;

aux_rule__constantInitializer_10
    : altnt_block__constantInitializer_7 constantInitializer
    ;

aux_rule__classConstant_5
    : altnt_block__classConstant_1 '::' altnt_block__classConstant_2
    ;

aux_rule__classConstant_6
    : altnt_block__classConstant_3 '::' altnt_block__classConstant_4
    ;

aux_rule__string_5
    : DoubleQuote kleene_star__string_3 DoubleQuote
    ;

aux_rule__string_6
    : altnt_block__string_4 kleene_plus__string_1
    ;

aux_rule__chainOrigin_1
    : '(' newExpr ')'
    ;

aux_rule__chainBase_3
    : keyedVariable optional__chainBase_2
    ;

aux_rule__chainBase_4
    : qualifiedStaticTypeRef '::' keyedVariable
    ;

aux_rule__squareCurlyExpression_2
    : '[' optional__breakStatement_1 ']'
    ;

aux_rule__squareCurlyExpression_3
    : OpenCurlyBracket expression CloseCurlyBracket
    ;

aux_rule__assignmentListElement_1
    : List '(' assignmentList ')'
    ;

aux_rule__arguments_6
    : actualArgument kleene_star__arguments_2
    ;

aux_rule__expression_17
    : '(' ')'
    ;

aux_rule__expression_18
    : InstanceOf typeRef
    ;

aux_rule__expression_19
    : altnt_block__expression_11 expression
    ;

aux_rule__typeParameterListInBrackets_4
    : typeParameterList optional__typeParameterListInBrackets_2
    ;

aux_rule__ifStatement_6
    : statement kleene_star__ifStatement_1 optional__ifStatement_2
    ;

aux_rule__ifStatement_7
    : ':' innerStatementList kleene_star__ifStatement_3 optional__ifStatement_4 EndIf SemiColon
    ;

aux_rule__expression_20
    : QuestionMark optional__breakStatement_1 ':'
    ;

aux_rule__expression_21
    : IsSet '(' chainList
    ;

aux_rule__expression_22
    : Empty '(' chain
    ;

aux_rule__expression_23
    : Eval '(' expression
    ;

aux_rule__globalVar_3
    : OpenCurlyBracket expression CloseCurlyBracket
    ;

aux_rule__expression_24
    : stringConstant '[' expression ']'
    ;

aux_rule__expression_25
    : optional__expression_10 chain
    ;

aux_rule__expression_26
    : chain altnt_block__expression_9
    ;

aux_rule__expression_27
    : Exit optional__expression_2
    ;

aux_rule__expression_28
    : optional__lambdaFunctionExpr_1 Function_ optional__functionDeclaration_2 '(' formalParameterList ')' optional__lambdaFunctionExpr_3 optional__lambdaFunctionExpr_5 blockStatement
    ;

aux_rule__expression_29
    : assignable Eq optional__functionDeclaration_1 '&' altnt_block__expression_15
    ;

aux_rule__expression_30
    : altnt_block__expression_13 ')'
    ;

aux_rule__expression_31
    : altnt_block__expression_16 expression
    ;

aux_rule__namespaceDeclaration_4
    : optional__namespaceDeclaration_1 OpenCurlyBracket kleene_star__namespaceDeclaration_2 CloseCurlyBracket
    ;

aux_rule__namespaceDeclaration_5
    : namespaceNameList SemiColon
    ;

aux_rule__classDeclaration_15
    : classEntryType identifier optional__functionDeclaration_3 optional__classDeclaration_7 optional__classDeclaration_9
    ;

aux_rule__classDeclaration_16
    : Interface identifier optional__functionDeclaration_3 optional__classDeclaration_12
    ;

aux_rule__whileStatement_2
    : ':' innerStatementList EndWhile SemiColon
    ;

aux_rule__forStatement_5
    : ':' innerStatementList EndFor SemiColon
    ;

aux_rule__switchStatement_6
    : OpenCurlyBracket optional__switchStatement_1 kleene_star__switchStatement_2 CloseCurlyBracket
    ;

aux_rule__switchStatement_7
    : ':' optional__switchStatement_1 kleene_star__switchStatement_2 EndSwitch SemiColon
    ;

aux_rule__foreachStatement_12
    : ':' innerStatementList EndForeach SemiColon
    ;

aux_rule__tryCatchFinally_5
    : kleene_plus__tryCatchFinally_1 optional__tryCatchFinally_2
    ;

aux_rule__tryCatchFinally_6
    : kleene_star__tryCatchFinally_3 finallyStatement
    ;

aux_rule__declareStatement_2
    : ':' innerStatementList EndDeclare SemiColon
    ;

aux_rule__classStatement_16
    : propertyModifiers optional__classStatement_2 variableInitializer kleene_star__classStatement_4 SemiColon
    ;

aux_rule__classStatement_17
    : optional__classStatement_5 altnt_block__classStatement_13
    ;

aux_rule__traitAlias_3
    : optional__formalParameter_2 identifier
    ;

aux_rule__arrayCreation_6
    : Array '(' optional__arrayCreation_1 ')'
    ;

aux_rule__arrayCreation_7
    : '[' optional__arrayCreation_1 ']'
    ;

aux_rule__yieldExpression_4
    : expression optional__yieldExpression_2
    ;

aux_rule__yieldExpression_5
    : From expression
    ;

aux_rule__anonymousClass_15
    : classEntryType optional__functionDeclaration_3 optional__classDeclaration_7 optional__classDeclaration_9
    ;

aux_rule__anonymousClass_16
    : Interface identifier optional__functionDeclaration_3 optional__classDeclaration_12
    ;

aux_rule__keyedSimpleFieldName_3
    : OpenCurlyBracket expression CloseCurlyBracket
    ;

aux_rule__keyedVariable_4
    : Dollar OpenCurlyBracket expression CloseCurlyBracket
    ;

aux_rule__switchBlock_5
    : Case expression
    ;

aux_rule__foreachStatement_13
    : expression As assignable optional__foreachStatement_4
    ;

aux_rule__foreachStatement_14
    : chain As altnt_block__foreachStatement_11
    ;

aux_rule__foreachStatement_15
    : optional__functionDeclaration_2 assignable optional__foreachStatement_4
    ;

aux_rule__foreachStatement_16
    : List '(' assignmentList ')'
    ;

aux_rule__expression_32
    : LambdaFn '(' formalParameterList ')' '=>'
    ;

aux_rule__expression_33
    : '(' castOperation ')'
    ;

aux_rule__expression_34
    : List '(' assignmentList ')' Eq
    ;

aux_rule__expression_35
    : assignable assignmentOperator optional__functionDeclaration_1
    ;

aux_rule__classStatement_18
    : Const optional__classStatement_2 identifierInitializer kleene_star__globalConstantDeclaration_3 SemiColon
    ;

aux_rule__classStatement_19
    : Function_ optional__functionDeclaration_2 identifier optional__functionDeclaration_3 '(' formalParameterList ')' optional__classStatement_11 methodBody
    ;

