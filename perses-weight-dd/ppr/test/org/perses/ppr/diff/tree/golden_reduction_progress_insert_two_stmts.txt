=====================Reduction starts.======================

The initial program size is 34
------------------------------------------------------------


=Fixpoint iteration 1. Reducer: customized_tree_diff_node_reducer

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=257,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=252,slot_type=declarationSpecifiers}
        |       |___Token:int {id=256,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=234,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=251,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=236,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=238,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=239,slot_type=LeftParen}
        |           |___(+) {id=245,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
        |           |   |___Token:void {id=250,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
        |           |___Token:) {id=241,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=199,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=200,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=233,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=201,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=204,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=229,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=206,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=207,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=208,slot_type=Assign}
            |       |   |               |___Token:1 {id=226,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=202,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=163,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=164,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=197,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=165,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=168,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=193,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=170,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=171,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=172,slot_type=Assign}
            |       |   |               |___Token:2 {id=190,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=166,slot_type=Semi}
            |       |___expressionStatement {id=138,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
            |       |   |___(?) {id=139,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=156,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
            |       |   |       |___Token:a {id=161,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=158,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___Token:++ {id=160,slot_type=[aux_rule__postfixExpression_3,PlusPlus]}
            |       |   |___Token:; {id=140,slot_type=Semi}
            |       |___expressionStatement {id=113,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
            |       |   |___(?) {id=114,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=131,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
            |       |   |       |___Token:b {id=136,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=133,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___Token:-- {id=135,slot_type=[aux_rule__postfixExpression_3,MinusMinus]}
            |       |   |___Token:; {id=115,slot_type=Semi}
            |       |___expressionStatement {id=46,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
            |       |   |___(?) {id=47,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=64,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
            |       |   |       |___Token:printf {id=111,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=66,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=68,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=69,slot_type=LeftParen}
            |       |   |               |___(?) {id=70,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___expression {id=72,slot_type=expression}
            |       |   |               |       |___(+) {id=109,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |   |___Token:"%d" {id=110,slot_type=StringLiteral}
            |       |   |               |       |___(*) {id=74,slot_type=kleene_star__expression_1}
            |       |   |               |           |___aux_rule__expression_2 {id=75,slot_type=aux_rule__expression_2}
            |       |   |               |               |___Token:, {id=76,slot_type=Comma}
            |       |   |               |               |___Token:a {id=93,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |               |___Token:) {id=71,slot_type=RightParen}
            |       |   |___Token:; {id=48,slot_type=Semi}
            |       |___jumpStatement {id=21,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=24,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=25,slot_type=Return}
            |           |   |___(?) {id=26,slot_type=optional__postfixExpression_1}
            |           |       |___Token:0 {id=44,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=23,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 138, size=34=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        b--;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        b--;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
           ;
        b--;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 138
------------------------------------------------------------


=================Reducing node 113, size=34=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        b--;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
           ;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 4
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 113 from 34 to 31
------------------------------------------------------------


=================Reducing node 139, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
           ;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 139
------------------------------------------------------------


=================Reducing node 156, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=156}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a  ;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 156
------------------------------------------------------------


=================Reducing node 161, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 161
------------------------------------------------------------


=================Reducing node 158, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a  ;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 158
------------------------------------------------------------


=================Reducing node 160, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 160
------------------------------------------------------------


=================Reducing node 140, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 140
------------------------------------------------------------


=Fixpoint iteration 2. Reducer: customized_tree_diff_node_reducer

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=257,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=252,slot_type=declarationSpecifiers}
        |       |___Token:int {id=256,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=234,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=251,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=236,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=238,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=239,slot_type=LeftParen}
        |           |___(+) {id=245,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
        |           |   |___Token:void {id=250,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
        |           |___Token:) {id=241,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=199,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=200,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=233,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=201,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=204,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=229,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=206,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=207,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=208,slot_type=Assign}
            |       |   |               |___Token:1 {id=226,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=202,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=163,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=164,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=197,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=165,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=168,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=193,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=170,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=171,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=172,slot_type=Assign}
            |       |   |               |___Token:2 {id=190,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=166,slot_type=Semi}
            |       |___expressionStatement {id=138,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
            |       |   |___(?) {id=139,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=156,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
            |       |   |       |___Token:a {id=161,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=158,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___Token:++ {id=160,slot_type=[aux_rule__postfixExpression_3,PlusPlus]}
            |       |   |___Token:; {id=140,slot_type=Semi}
            |       |___expressionStatement {id=46,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
            |       |   |___(?) {id=47,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=64,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
            |       |   |       |___Token:printf {id=111,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=66,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=68,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=69,slot_type=LeftParen}
            |       |   |               |___(?) {id=70,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___expression {id=72,slot_type=expression}
            |       |   |               |       |___(+) {id=109,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |   |___Token:"%d" {id=110,slot_type=StringLiteral}
            |       |   |               |       |___(*) {id=74,slot_type=kleene_star__expression_1}
            |       |   |               |           |___aux_rule__expression_2 {id=75,slot_type=aux_rule__expression_2}
            |       |   |               |               |___Token:, {id=76,slot_type=Comma}
            |       |   |               |               |___Token:a {id=93,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |               |___Token:) {id=71,slot_type=RightParen}
            |       |   |___Token:; {id=48,slot_type=Semi}
            |       |___jumpStatement {id=21,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=24,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=25,slot_type=Return}
            |           |   |___(?) {id=26,slot_type=optional__postfixExpression_1}
            |           |       |___Token:0 {id=44,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=23,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 138, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
           ;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 138
------------------------------------------------------------


=================Reducing node 113, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 113
------------------------------------------------------------


=================Reducing node 139, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=156}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 139
------------------------------------------------------------


=================Reducing node 156, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=156}
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeReplacementAction{target_node=156, replacement=161}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 156
------------------------------------------------------------


=================Reducing node 161, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 161
------------------------------------------------------------


=================Reducing node 158, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=160}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 158
------------------------------------------------------------


=================Reducing node 160, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 160
------------------------------------------------------------


=================Reducing node 140, size=31=================

The current best program is the following

    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        a++;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 140
------------------------------------------------------------


#test success = 1
#test failure = 7
#test result cache hits = 0
#test execution cancelled = 1
#node edit action set cache hits = 5
#external test execution cache hits = 0
