=====================Reduction starts.======================

The initial program size is 51
------------------------------------------------------------


=Fixpoint iteration 1. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=348,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=343,slot_type=declarationSpecifiers}
        |       |___Token:int {id=347,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=334,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=342,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=336,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=338,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=339,slot_type=LeftParen}
        |           |___Token:) {id=341,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=299,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=300,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=333,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=301,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=304,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=329,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=306,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=307,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=308,slot_type=Assign}
            |       |   |               |___Token:1 {id=326,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=302,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=263,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=264,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=297,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=265,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=268,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=293,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=270,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=271,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=272,slot_type=Assign}
            |       |   |               |___Token:2 {id=290,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=266,slot_type=Semi}
            |       |___expressionStatement {id=216,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
            |       |   |___(?) {id=217,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=234,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
            |       |   |       |___Token:printf {id=261,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=236,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=238,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=239,slot_type=LeftParen}
            |       |   |               |___(?) {id=240,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___(+) {id=259,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |___Token:"hello" {id=260,slot_type=StringLiteral}
            |       |   |               |___Token:) {id=241,slot_type=RightParen}
            |       |   |___Token:; {id=218,slot_type=Semi}
            |       |___expressionStatement {id=169,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
            |       |   |___(?) {id=170,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=187,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
            |       |   |       |___Token:printf {id=214,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=189,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=191,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=192,slot_type=LeftParen}
            |       |   |               |___(?) {id=193,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___(+) {id=212,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |___Token:"world" {id=213,slot_type=StringLiteral}
            |       |   |               |___Token:) {id=194,slot_type=RightParen}
            |       |   |___Token:; {id=171,slot_type=Semi}
            |       |___aux_rule__statement_3 {id=46,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3]}
            |       |   |___Token:if {id=47,slot_type=If}
            |       |   |___Token:( {id=48,slot_type=LeftParen}
            |       |   |___Token:a {id=167,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |___Token:) {id=50,slot_type=RightParen}
            |       |   |___compoundStatement {id=108,slot_type=[statement,compoundStatement]}
            |       |   |   |___Token:{ {id=109,slot_type=LeftBrace}
            |       |   |   |___(?) {id=110,slot_type=optional__compoundStatement_1}
            |       |   |   |   |___(+) {id=113,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |   |   |       |___aux_rule__declaration_3 {id=116,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |   |           |___(+) {id=117,slot_type=declarationSpecifiers}
            |       |   |   |           |   |___Token:int {id=150,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |   |           |___(?) {id=118,slot_type=optional__declaration_2}
            |       |   |   |           |   |___initDeclarator {id=121,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |   |           |       |___Token:c {id=146,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |   |           |       |___(?) {id=123,slot_type=optional__initDeclarator_2}
            |       |   |   |           |           |___aux_rule__initDeclarator_1 {id=124,slot_type=aux_rule__initDeclarator_1}
            |       |   |   |           |               |___Token:= {id=125,slot_type=Assign}
            |       |   |   |           |               |___Token:1 {id=143,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |   |           |___Token:; {id=119,slot_type=Semi}
            |       |   |   |___Token:} {id=111,slot_type=RightBrace}
            |       |   |___(?) {id=52,slot_type=optional__selectionStatement_2}
            |       |       |___aux_rule__selectionStatement_1 {id=53,slot_type=aux_rule__selectionStatement_1}
            |       |           |___Token:else {id=54,slot_type=Else}
            |       |           |___compoundStatement {id=56,slot_type=[statement,compoundStatement]}
            |       |               |___Token:{ {id=57,slot_type=LeftBrace}
            |       |               |___(?) {id=58,slot_type=optional__compoundStatement_1}
            |       |               |   |___(+) {id=61,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |               |       |___aux_rule__declaration_3 {id=64,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |               |           |___(+) {id=65,slot_type=declarationSpecifiers}
            |       |               |           |   |___Token:int {id=107,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |               |           |___(?) {id=66,slot_type=optional__declaration_2}
            |       |               |           |   |___initDeclarator {id=69,slot_type=[initDeclaratorList,initDeclarator]}
            |       |               |           |       |___Token:d {id=103,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |               |           |       |___(?) {id=71,slot_type=optional__initDeclarator_2}
            |       |               |           |           |___aux_rule__initDeclarator_1 {id=72,slot_type=aux_rule__initDeclarator_1}
            |       |               |           |               |___Token:= {id=73,slot_type=Assign}
            |       |               |           |               |___multiplicativeExpression {id=86,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression]}
            |       |               |           |                   |___Token:a {id=100,slot_type=[castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |               |           |                   |___(*) {id=88,slot_type=kleene_star__multiplicativeExpression_1}
            |       |               |           |                       |___aux_rule__multiplicativeExpression_2 {id=89,slot_type=aux_rule__multiplicativeExpression_2}
            |       |               |           |                           |___Token:* {id=96,slot_type=[altnt_block__multiplicativeExpression_3,Star]}
            |       |               |           |                           |___Token:b {id=95,slot_type=[castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |               |           |___Token:; {id=67,slot_type=Semi}
            |       |               |___Token:} {id=59,slot_type=RightBrace}
            |       |___jumpStatement {id=21,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=24,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=25,slot_type=Return}
            |           |   |___(?) {id=26,slot_type=optional__postfixExpression_1}
            |           |       |___Token:0 {id=44,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=23,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=51==================

The current best program is the following

    #include <stdio.h>
    int main(){
      int a = 1;
      int b = 2;
      printf("hello");
      printf("world");
      if(a) {
        int c = 1;
      }
      else {
        int d = a * b;
      }
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    #include <stdio.h>
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    int main(){
      int a = 1;
      int b = 2;
      printf("hello");
      printf("world");
      if(a) {
        int c = 1;
      }
      else {
        int d = a * b;
      }
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 5, size=51==================

The current best program is the following

    #include <stdio.h>
    int main(){
      int a = 1;
      int b = 2;
      printf("hello");
      printf("world");
      if(a) {
        int c = 1;
      }
      else {
        int d = a * b;
      }
      return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
                     ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
                     ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
              ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
      int a = 1;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
      int b = 2;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


==================Reducing node 8, size=51==================

The current best program is the following

    #include <stdio.h>
    int main(){
      int a = 1;
      int b = 2;
      printf("hello");
      printf("world");
      if(a) {
        int c = 1;
      }
      else {
        int d = a * b;
      }
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    int main()
            {
        int c = 1;
      }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


=================Reducing node 10, size=51==================

The current best program is the following

    #include <stdio.h>
    int main(){
      int a = 1;
      int b = 2;
      printf("hello");
      printf("world");
      if(a) {
        int c = 1;
      }
      else {
        int d = a * b;
      }
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    #include <stdio.h>
    int main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


=================Reducing node 13, size=51==================

The current best program is the following

    #include <stdio.h>
    int main(){
      int a = 1;
      int b = 2;
      printf("hello");
      printf("world");
      if(a) {
        int c = 1;
      }
      else {
        int d = a * b;
      }
      return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=13}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    #include <stdio.h>
    int main(){
      int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    #include <stdio.h>
    int main(){
      int a = 1;
      int b = 2;
      printf("hello");
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    #include <stdio.h>
    int main(){
      int a = 1;
      int b = 2;
      printf("hello");
      printf("world");
      if(a) {
        int c = 1;
      }
      else {
        int d = a * b;
      }
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 14
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    #include <stdio.h>
    int main(){
      int a = 1;
      int b = 2;
      printf("hello");
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    #include <stdio.h>
    int main(){
      int a = 1;
      int b = 2;
      printf("hello");
      printf("world");
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 2
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    #include <stdio.h>
    int main(){
      int a = 1;
      int b = 2;
      printf("hello");
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 2
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 13 from 51 to 12
------------------------------------------------------------


=================Reducing node 169, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    #include <stdio.h>
    int main(){
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    int main(){
                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 169
------------------------------------------------------------


=================Reducing node 170, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    #include <stdio.h>
    int main(){
                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 170
------------------------------------------------------------


=================Reducing node 187, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=187}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    int main(){
      printf         ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    int main(){
             "world" ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    int main(){
             "world" ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 187
------------------------------------------------------------


=================Reducing node 334, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
    int main  {
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 334
------------------------------------------------------------


=================Reducing node 189, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    #include <stdio.h>
    int main(){
      printf         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 189
------------------------------------------------------------


=================Reducing node 191, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=191}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 191
------------------------------------------------------------


=================Reducing node 336, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    #include <stdio.h>
    int main  {
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 336
------------------------------------------------------------


=================Reducing node 338, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=338}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 338
------------------------------------------------------------


=================Reducing node 348, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 348
------------------------------------------------------------


=================Reducing node 342, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 342
------------------------------------------------------------


=================Reducing node 341, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 341
------------------------------------------------------------


=================Reducing node 339, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 339
------------------------------------------------------------


=================Reducing node 214, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 214
------------------------------------------------------------


=================Reducing node 194, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 194
------------------------------------------------------------


=================Reducing node 193, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    #include <stdio.h>
    int main(){
      printf(       );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 193
------------------------------------------------------------


=================Reducing node 212, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=212}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 212
------------------------------------------------------------


=================Reducing node 213, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 213
------------------------------------------------------------


=================Reducing node 192, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 192
------------------------------------------------------------


=================Reducing node 171, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 171
------------------------------------------------------------


=================Reducing node 11, size=12==================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


==================Reducing node 9, size=12==================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


==================Reducing node 6, size=12==================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    #include <stdio.h>
        main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


=================Reducing node 343, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=343}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 343
------------------------------------------------------------


=================Reducing node 347, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 347
------------------------------------------------------------


=Fixpoint iteration 2. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=348,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=343,slot_type=declarationSpecifiers}
        |       |___Token:int {id=347,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=334,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=342,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=336,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=338,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=339,slot_type=LeftParen}
        |           |___Token:) {id=341,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___expressionStatement {id=169,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
            |           |___(?) {id=170,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=187,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
            |           |       |___Token:printf {id=214,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=189,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=191,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=192,slot_type=LeftParen}
            |           |               |___(?) {id=193,slot_type=optional__postfixExpression_1}
            |           |               |   |___(+) {id=212,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |___Token:"world" {id=213,slot_type=StringLiteral}
            |           |               |___Token:) {id=194,slot_type=RightParen}
            |           |___Token:; {id=171,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=12==================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    #include <stdio.h>
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 5, size=12==================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    #include <stdio.h>
                     ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


==================Reducing node 8, size=12==================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


=================Reducing node 10, size=12==================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    #include <stdio.h>
    int main(){
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


=================Reducing node 13, size=12==================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=13}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 13
------------------------------------------------------------


=================Reducing node 169, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=169}
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeReplacementAction{target_node=169, replacement=171}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 169
------------------------------------------------------------


=================Reducing node 170, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=187}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 170
------------------------------------------------------------


=================Reducing node 187, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=187}
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeReplacementAction{target_node=187, replacement=214}
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeReplacementAction{target_node=187, replacement=212}
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeReplacementAction{target_node=187, replacement=213}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 187
------------------------------------------------------------


=================Reducing node 334, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeReplacementAction{target_node=334, replacement=342}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 334
------------------------------------------------------------


=================Reducing node 189, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=191}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 189
------------------------------------------------------------


=================Reducing node 191, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=191}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 191
------------------------------------------------------------


=================Reducing node 336, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=338}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 336
------------------------------------------------------------


=================Reducing node 338, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=338}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 338
------------------------------------------------------------


=================Reducing node 348, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 348
------------------------------------------------------------


=================Reducing node 342, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 342
------------------------------------------------------------


=================Reducing node 341, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 341
------------------------------------------------------------


=================Reducing node 339, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 339
------------------------------------------------------------


=================Reducing node 214, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 214
------------------------------------------------------------


=================Reducing node 194, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 194
------------------------------------------------------------


=================Reducing node 193, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=212}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 193
------------------------------------------------------------


=================Reducing node 212, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=212}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 212
------------------------------------------------------------


=================Reducing node 213, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 213
------------------------------------------------------------


=================Reducing node 192, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 192
------------------------------------------------------------


=================Reducing node 171, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 171
------------------------------------------------------------


=================Reducing node 11, size=12==================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


==================Reducing node 9, size=12==================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


==================Reducing node 6, size=12==================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=343}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


=================Reducing node 343, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=343}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 343
------------------------------------------------------------


=================Reducing node 347, size=12=================

The current best program is the following

    #include <stdio.h>
    int main(){
      printf("world");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 347
------------------------------------------------------------


#test success = 3
#test failure = 30
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 27
#external test execution cache hits = 0
